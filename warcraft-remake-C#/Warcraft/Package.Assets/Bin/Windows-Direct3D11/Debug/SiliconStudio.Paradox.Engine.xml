<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SiliconStudio.Paradox.Engine</name>
    </assembly>
    <members>
        <member name="T:SiliconStudio.ParadoxVersion">
            <summary>
            Internal version used to identify Paradox version.
            </summary>
            <remarks>
            Note: When modifying the version here, it must be modified also in the Paradox.pdxpkg 
            </remarks>
        </member>
        <member name="F:SiliconStudio.ParadoxVersion.CurrentAssemblyAsText">
            <summary>
            The .NET current assembly version as text, not including pre-release (alpha, beta...) information.
            </summary>
        </member>
        <member name="F:SiliconStudio.ParadoxVersion.CurrentAsText">
            <summary>
            The Store current version as text, including pre-release (alpha, beta...) information
            </summary>
            <remarks>
            Version number as described in http://docs.nuget.org/docs/reference/versioning
            When using pre-release (alpha, beta, rc...etc.) and because the order of the release is in alphabetical order,
            please use a double digit like alpha00 alpha01...etc. in order to make sure that we will follow the correct
            order for the versions.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AsyncScript">
            <summary>
            A script which can be implemented as an async microthread.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Script.Id">
            <summary>
            The script identifier.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Script.IsLiveReloading">
            <summary>
            Determines whether the script is currently undergoing live reloading.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Script.Entity">
            <summary>
            Gets the entity this script is attached to.
            </summary>
            <value>
            The entity this script is attached to.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AsyncScript.Execute">
            <summary>
            Called once, as a microthread
            </summary>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.AnimationBlendOperation">
            <summary>
            Describes the type of animation blend operation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationBlendOperation.LinearBlend">
            <summary>
            Linear blend operation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationBlendOperation.Add">
            <summary>
            Add operation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationBlendOperation.Subtract">
            <summary>
            Subtract operation.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.AnimationBlender">
            <summary>
            Performs animation blending.
            For now, all AnimationClip must target the same skeleton.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationBlender.Compute(SiliconStudio.Core.Collections.FastList{SiliconStudio.Paradox.Animations.AnimationOperation},SiliconStudio.Paradox.Animations.AnimationClipResult@)">
            <summary>
            Computes the specified animation operations.
            </summary>
            <param name="animationOperations">The animation operations to perform.</param>
            <param name="result">The optional result (if not null, it expects the final stack to end up with this element).</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.AnimationChannel">
            <summary>
            List of float key frame data applying to a specific property in a node.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationChannel.EvaluateError(System.Func{SiliconStudio.Paradox.Animations.CompressedTimeSpan,System.Single},SiliconStudio.Paradox.Animations.AnimationChannel.Evaluator,SiliconStudio.Paradox.Animations.CompressedTimeSpan,SiliconStudio.Paradox.Animations.KeyFrameData{System.Single},SiliconStudio.Paradox.Animations.KeyFrameData{System.Single})">
            <summary>
            Evaluates the error within specified segment.
            </summary>
            <param name="originalCurve">The original curve.</param>
            <param name="evaluator">The evaluator.</param>
            <param name="stepSize">Size of the step.</param>
            <param name="keyFrame">The key frame.</param>
            <param name="nextKeyFrame">The next key frame.</param>
            <returns></returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationChannel.TargetObject">
            <summary>
            Gets or sets the target object name.
            </summary>
            <value>
            The target object name.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationChannel.TargetProperty">
            <summary>
            Gets or sets the target property name.
            </summary>
            <value>
            The target property name.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.AnimationClip">
            <summary>
            An aggregation of <see cref="T:SiliconStudio.Paradox.Animations.AnimationCurve"/> with their channel names.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationClip.Channels">
            <summary>
            Gets the channels of this clip.
            </summary>
            <value>
            The channels of this clip.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationClip.AddCurve(System.String,SiliconStudio.Paradox.Animations.AnimationCurve)">
            <summary>
            Adds a named curve.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationClip.Optimize">
            <summary>
            Optimizes data from multiple curves to a single linear data stream.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationClip.Duration">
            <summary>
            Gets or sets the duration of this clip.
            </summary>
            <value>
            The duration of this clip.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationClip.RepeatMode">
            <summary>
            Gets or sets the repeat mode of the <see cref="T:SiliconStudio.Paradox.Animations.AnimationClip"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.AnimationClipEvaluator">
            <summary>
            Evaluates <see cref="T:SiliconStudio.Paradox.Animations.AnimationClip"/> to a <see cref="T:SiliconStudio.Paradox.Animations.AnimationClipResult"/> at a given time.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationClipResult.DataSize">
            <summary>
            Total size of all structures to be stored in structures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationClipResult.Data">
            <summary>
            Stores all animation channel struct values at a given time.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationClipResult.Channels">
            <summary>
            Gets or sets the animation channel descriptions.
            </summary>
            <value>
            The animation channel descriptions.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.AnimationCurve">
            <summary>
            Untyped base class for animation curves.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationCurve.AddValue(SiliconStudio.Paradox.Animations.CompressedTimeSpan,System.IntPtr)">
            <summary>
            Writes a new value at the end of the curve (used for building curves).
            It should be done in increasing order as it will simply add a new key at the end of <see cref="P:SiliconStudio.Paradox.Animations.AnimationCurve`1.KeyFrames"/>.
            </summary>
            <param name="newTime">The new time.</param>
            <param name="location">The location.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationCurve.InterpolationType">
            <summary>
            Gets or sets the interpolation type.
            </summary>
            <value>
            The interpolation type.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationCurve.ElementType">
            <summary>
            Gets the type of keyframe values.
            </summary>
            <value>
            The type of keyframe values.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationCurve.ElementSize">
            <summary>
            Gets the size of keyframe values.
            </summary>
            <value>
            The size of keyframe values.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.AnimationCurve`1">
            <summary>
            Typed class for animation curves.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationCurve`1.FindKeyIndex(SiliconStudio.Paradox.Animations.CompressedTimeSpan)">
            <summary>
            Find key index.
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationCurve`1.AddValue(SiliconStudio.Paradox.Animations.CompressedTimeSpan,System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationCurve`1.KeyFrames">
            <summary>
            Gets or sets the key frames.
            </summary>
            <value>
            The key frames.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationCurve`1.ElementType">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationCurve`1.ElementSize">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.AnimationCurve`1.Keys">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.AnimationCurveInterpolationType">
            <summary>
            Describes how a curve should be interpolated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationCurveInterpolationType.Constant">
            <summary>
            Interpolates by using constant value between keyframes.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationCurveInterpolationType.Linear">
            <summary>
            Interpolates linearly between keyframes.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationCurveInterpolationType.Cubic">
            <summary>
            Interpolates with implicit derivatives using points before and after.
            More information at http://en.wikipedia.org/wiki/Cubic_Hermite_spline#Interpolation_on_the_unit_interval_without_exact_derivatives.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationKeyValuePairArraySerializer`1.Initialize(SiliconStudio.Core.Serialization.SerializerSelector)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.AnimationRepeatMode">
            <summary>
            Enumeration describing how an animation should be repeated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationRepeatMode.PlayOnce">
            <summary>
            The animation play once, and then stops.
            </summary>
            <userdoc>The animation play once, and then stops.</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Animations.AnimationRepeatMode.LoopInfinite">
            <summary>
            The animation loop for always.
            </summary>
            <userdoc>The animation loop for always.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.CompressedTimeSpanSerializer">
            <summary>
            Data serializer for TimeSpan.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.Interpolator">
            <summary>
            Various helper functions for float, Vector3 and Quaternion interpolations.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.EffectCompilationMode">
            <summary>
            Defines how <see cref="M:SiliconStudio.Paradox.Rendering.EffectSystem.CreateEffectCompiler(SiliconStudio.Paradox.Shaders.Compiler.TaskSchedulerSelector)"/> tries to create compiler.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EffectCompilationMode.None">
            <summary>
            Effects can't be compiled. <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.NullEffectCompiler"/> will be used.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EffectCompilationMode.Local">
            <summary>
            Effects can only be compiled in process (if possible). <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.EffectCompiler"/> will be used.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EffectCompilationMode.Remote">
            <summary>
            Effects can only be compiled over network. <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.RemoteEffectCompiler"/> will be used.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EffectCompilationMode.LocalOrRemote">
            <summary>
            Effects can be compiled either in process (if possible) or over network otherwise.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Network.ClientRouterMessage">
            <summary>
            Message exchanged between client and router.
            Note: shouldn't collide with <see cref="!:RouterMessage"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Network.SocketMessageLayer">
            <summary>
            High-level layer that can be used on top of <see cref="T:SiliconStudio.Paradox.Engine.Network.SimpleSocket"/> to send and receive objects using serialization.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.CommsInterface">
            <summary>
            Provides a summary of an available network interface on the device.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.Abstractions.ICommsInterface">
            <summary>
            Provides a summary of an available network interface on the device.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.NativeInterfaceId">
            <summary>
            The interface identifier provided by the underlying platform.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.Name">
            <summary>
            The interface name, as provided by the underlying platform.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.IpAddress">
            <summary>
            The IPv4 Address of the interface, if connected. 
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.GatewayAddress">
            <summary>
            The IPv4 address of the gateway, if available.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.BroadcastAddress">
            <summary>
            The IPv4 broadcast address for the interface, if available.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.ConnectionStatus">
            <summary>
            The connection status of the interface, if available
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.IsUsable">
            <summary>
            Indicates whether the interface has a network address and can be used for 
            sending/receiving data.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ICommsInterface.IsLoopback">
            <summary>
            Indicates whether the interface is the loopback interface
            </summary>
        </member>
        <member name="F:Sockets.Plugin.CommsInterface.NativeInterface">
            <summary>
            The native NetworkInterface this CommsInterface represents.
            </summary>
        </member>
        <member name="F:Sockets.Plugin.CommsInterface.NativeIpAddress">
            <summary>
            The Native IpAddress this CommsInterface represents.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.CommsInterface.EndPoint(System.Int32)">
            <summary>
            Returns an IPEndpoint object that can be used to bind the network interface to specified port. 
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.CommsInterface.GetAllInterfacesAsync">
            <summary>
            Retrieves information on the IPv4 network interfaces available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.CommsInterface.GetSubnetMask(System.Net.NetworkInformation.UnicastIPAddressInformation)">
            <summary>
            UnicastIPAddressInformation.IPv4Mask is not implemented in Xamarin. This method sits in a partial class definition
            on each native platform and retrieves the netmask in whatever way it can be done for each platform. 
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.NativeInterfaceId">
            <summary>
            The interface identifier provided by the underlying platform.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.Name">
            <summary>
            The interface name, as provided by the underlying platform.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.IpAddress">
            <summary>
            The IPv4 Address of the interface, if connected. 
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.GatewayAddress">
            <summary>
            The IPv4 address of the gateway, if available.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.BroadcastAddress">
            <summary>
            The IPv4 broadcast address for the interface, if available.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.ConnectionStatus">
            <summary>
            The connection status of the interface, if available
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.IsUsable">
            <summary>
            Indicates whether the interface has a network address and can be used for 
            sending/receiving data.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.CommsInterface.IsLoopback">
            <summary>
            Indicates whether the interface is the loopback interface
            </summary>
        </member>
        <member name="T:Sockets.Plugin.NetworkExtensions">
            <summary>
            Helper methods required for the conversion of platform-specific network items to the abstracted versions. 
            </summary>
        </member>
        <member name="M:Sockets.Plugin.NetworkExtensions.ToCommsInterfaceSummary(System.Net.NetworkInformation.NetworkInterface)">
            <summary>
            Returns a <code>CommsInterface</code> wrapper from a platform native <code>NetworkInterface</code>. 
            </summary>
            <param name="nativeInterface"></param>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.NetworkExtensions.ToCommsInterfaceStatus(System.Net.NetworkInformation.OperationalStatus)">
            <summary>
            Converts an <code>OperationalStatus</code> value to the abstracted <code>CommsInterfaceStatus</code>. 
            </summary>
            <param name="nativeStatus"></param>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.NetworkExtensions.GetBroadcastAddress(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Determines the broadcast address for a given IPAddress
            Adapted from http://blogs.msdn.com/b/knom/archive/2008/12/31/ip-address-calculations-with-c-subnetmasks-networks.aspx
            </summary>
            <param name="address"></param>
            <param name="subnetMask"></param>
            <returns></returns>
        </member>
        <member name="T:Sockets.Plugin.TcpSocketClient">
            <summary>
                Sends and receives data over a TCP socket. Establish a connection with a listening TCP socket using
                <code>ConnectAsync</code>.
                Use the <code>WriteStream</code> and <code>ReadStream</code> properties for sending and receiving data
                respectively.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.Abstractions.ITcpSocketClient">
            <summary>
                Sends and receives data over a TCP socket. Establish a connection with a listening TCP socket using
                <code>ConnectAsync</code>.
                Use the <code>WriteStream</code> and <code>ReadStream</code> properties for sending and receiving data
                respectively.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.Abstractions.ITcpSocketClient.ConnectAsync(System.String,System.Int32,System.Boolean)">
            <summary>
                Establishes a TCP connection with the endpoint at the specified address/port pair.
            </summary>
            <param name="address">The address of the endpoint to connect to.</param>
            <param name="port">The port of the endpoint to connect to.</param>
            <param name="secure">Is this socket secure?</param>
        </member>
        <member name="M:Sockets.Plugin.Abstractions.ITcpSocketClient.DisconnectAsync">
            <summary>
                Disconnects from an endpoint previously connected to using <code>ConnectAsync</code>.
                Should not be called on a <code>TcpSocketClient</code> that is not already connected.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketClient.ReadStream">
            <summary>
                A stream that can be used for receiving data from the remote endpoint.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketClient.WriteStream">
            <summary>
                A stream that can be used for sending data to the remote endpoint.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketClient.RemoteAddress">
            <summary>
                The address of the remote endpoint to which the <code>TcpSocketClient</code> is currently connected.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketClient.RemotePort">
            <summary>
                The port of the remote endpoint to which the <code>TcpSocketClient</code> is currently connected.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.#ctor">
            <summary>
                Default constructor for <code>TcpSocketClient</code>.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sockets.Plugin.TcpSocketClient"/> class.
            </summary>
            <param name="bufferSize">Size of the buffer for the write stream.</param>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.ConnectAsync(System.String,System.Int32,System.Boolean)">
            <summary>
                Establishes a TCP connection with the endpoint at the specified address/port pair.
            </summary>
            <param name="address">The address of the endpoint to connect to.</param>
            <param name="port">The port of the endpoint to connect to.</param>
            <param name="secure">True to enable TLS on the socket.</param>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.DisconnectAsync">
            <summary>
                Disconnects from an endpoint previously connected to using <code>ConnectAsync</code>.
                Should not be called on a <code>TcpSocketClient</code> that is not already connected.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketClient.Finalize">
            <summary>
            Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketClient.ReadStream">
            <summary>
                A stream that can be used for receiving data from the remote endpoint.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketClient.WriteStream">
            <summary>
                A stream that can be used for sending data to the remote endpoint.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketClient.RemoteAddress">
            <summary>
                The address of the remote endpoint to which the <code>TcpSocketClient</code> is currently connected.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketClient.RemotePort">
            <summary>
                The port of the remote endpoint to which the <code>TcpSocketClient</code> is currently connected.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.TcpSocketListener">
            <summary>
                Binds to a port and listens for TCP connections.
                Use <code>StartListeningAsync</code> to bind to a local port, then handle <code>ConnectionReceived</code> events as
                clients connect.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.Abstractions.ITcpSocketListener">
            <summary>
                Binds to a port and listens for TCP connections.
                Use <code>StartListeningAsync</code> to bind to a local port, then handle <code>ConnectionReceived</code> events as
                clients connect.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.Abstractions.ITcpSocketListener.StartListeningAsync(System.Int32,Sockets.Plugin.Abstractions.ICommsInterface)">
            <summary>
                Binds the <code>TcpSocketListener</code> to the specified port on all endpoints and listens for TCP connections.
            </summary>
            <param name="port">The port to listen on.</param>
            <param name="listenOn">The <code>CommsInterface</code> to listen on. If unspecified, all interfaces will be bound.</param>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.Abstractions.ITcpSocketListener.StopListeningAsync">
            <summary>
                Stops the <code>TcpSocketListener</code> from listening for new TCP connections.
                This does not disconnect existing connections.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketListener.LocalPort">
            <summary>
                The port to which the TcpSocketListener is currently bound
            </summary>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.ITcpSocketListener.ConnectionReceived">
            <summary>
                Fired when a new TCP connection has been received.
                Use the <code>SocketClient</code> property of the <code>TcpSocketListenerConnectEventArgs</code>
                to get a <code>TcpSocketClient</code> representing the connection for sending and receiving data.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketListener.StartListeningAsync(System.Int32,Sockets.Plugin.Abstractions.ICommsInterface)">
            <summary>
                Binds the <code>TcpSocketListener</code> to the specified port on all endpoints and listens for TCP connections.
            </summary>
            <param name="port">The port to listen on.</param>
            <param name="listenOn">The <code>CommsInterface</code> to listen on. If unspecified, all interfaces will be bound.</param>
            <returns></returns>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketListener.StopListeningAsync">
            <summary>
                Stops the <code>TcpSocketListener</code> from listening for new TCP connections.
                This does not disconnect existing connections.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.TcpSocketListener.Finalize">
            <summary>
            Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketListener.ConnectionReceived">
            <summary>
                Fired when a new TCP connection has been received.
                Use the <code>SocketClient</code> property of the <code>TcpSocketListenerConnectEventArgs</code>
                to get a <code>TcpSocketClient</code> representing the connection for sending and receiving data.
            </summary>
        </member>
        <member name="P:Sockets.Plugin.TcpSocketListener.LocalPort">
            <summary>
                The port to which the TcpSocketListener is currently bound
            </summary>
        </member>
        <member name="T:Sockets.Plugin.Abstractions.CommsInterfaceStatus">
            <summary>
            The connection state of an interface.
            </summary>
        </member>
        <member name="F:Sockets.Plugin.Abstractions.CommsInterfaceStatus.Unknown">
            <summary>
            The state of the interface can not be determined.
            </summary>
        </member>
        <member name="F:Sockets.Plugin.Abstractions.CommsInterfaceStatus.Connected">
            <summary>
            The interface is connected. 
            </summary>
        </member>
        <member name="F:Sockets.Plugin.Abstractions.CommsInterfaceStatus.Disconnected">
            <summary>
            The interface is disconnected.
            </summary>
        </member>
        <member name="T:Sockets.Plugin.Abstractions.TcpSocketListenerConnectEventArgs">
            <summary>
                Fired when a TcpSocketListener receives a new connection.
            </summary>
        </member>
        <member name="M:Sockets.Plugin.Abstractions.TcpSocketListenerConnectEventArgs.#ctor(Sockets.Plugin.Abstractions.ITcpSocketClient)">
            <summary>
                Constructor for <code>TcpSocketListenerConnectEventArgs.</code>
            </summary>
            <param name="socketClient">A <code>TcpSocketClient</code> representing the newly connected client.</param>
        </member>
        <member name="P:Sockets.Plugin.Abstractions.TcpSocketListenerConnectEventArgs.SocketClient">
            <summary>
                A <code>TcpSocketClient</code> representing the newly connected client.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.StartupScript.Start">
            <summary>
            Called before the script enters it's update loop.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.StartupScript.Cancel">
            <summary>
            Called when the script's update loop is canceled.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.DirectRenderFrameProvider">
            <summary>
            Renders directly to a custom <see cref="P:SiliconStudio.Paradox.Rendering.Composers.DirectRenderFrameProvider.RenderFrame"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderFrameProviderBase">
            <summary>
            Abstract implementation of <see cref="T:SiliconStudio.Paradox.Rendering.IRenderFrameProvider"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.IRenderFrameProvider">
            <summary>
            Common interface for the provider of a <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.IRenderFrameProvider.GetRenderFrame(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Gets the render frame.
            </summary>
            <param name="context">The context.</param>
            <returns>RenderFrame.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.IGraphicsLayerOutput">
            <summary>
            Defines the output of a <see cref="T:SiliconStudio.Paradox.Rendering.Composers.ISceneGraphicsCompositor"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.IImageEffectRendererInput">
            <summary>
            Input interface for an <see cref="T:SiliconStudio.Paradox.Rendering.SceneEffectRenderer"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ISceneRendererOutput">
            <summary>
            Output interface for an <see cref="T:SiliconStudio.Paradox.Rendering.SceneEffectRenderer"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.DirectRenderFrameProvider.#ctor(SiliconStudio.Paradox.Rendering.RenderFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Composers.DirectRenderFrameProvider"/> class.
            </summary>
            <param name="renderFrame">The render frame.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Composers.DirectRenderFrameProvider.RenderFrame">
            <summary>
            Gets or sets the render frame.
            </summary>
            <value>The render frame.</value>
            <userdoc>The render frame to use.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.CullingMode">
            <summary>
            Culling mode of a <see cref="T:SiliconStudio.Paradox.Rendering.SceneCameraRenderer"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.CullingMode.None">
            <summary>
            No culling is applied to meshes.
            </summary>
            <userdoc>No specific culling</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.CullingMode.Frustum">
            <summary>
            Meshes outside of the camera's view frustum will be culled.
            </summary>
            <userdoc>Skip all entities out of the camera frustum.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyBlendFeature">
            <summary>
            A transparent blend material.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialTransparencyFeature">
            <summary>
            Base interface for the transparency material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialFeature">
            <summary>
            Base interface for a material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialShaderGenerator">
            <summary>
            Defines the interface to generate the shaders for a <see cref="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialFeature"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.IMaterialShaderGenerator.Visit(SiliconStudio.Paradox.Rendering.Materials.MaterialGeneratorContext)">
            <summary>
            Generates the shader.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyBlendFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyBlendFeature"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyBlendFeature.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
            <userdoc>An additional factor that can be used to modulate original alpha of the material.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyBlendFeature.Tint">
            <summary>
            Gets or sets the tint color.
            </summary>
            <value>The tint.</value>
            <userdoc>The tint color to apply on the material during the blend.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.RemoteEffectCompiler">
            <summary>
            Compiles effect remotely on the developer host PC.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.RemoteEffectCompiler.GetShaderSourceHash(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Shaders.Compiler.RemoteEffectCompiler.Compile(SiliconStudio.Paradox.Shaders.ShaderMixinSource,SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Shaders.Compiler.RemoteEffectCompiler.FileProvider">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.BackgroundComponentProcessor">
            <summary>
            The processor in charge of updating and drawing the entities having background components.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.EntityProcessor`1">
            <summary>Helper class for <see cref="T:SiliconStudio.Paradox.Engine.EntityProcessor"/>, that will keep track of <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> matching certain <see cref="T:SiliconStudio.Paradox.Engine.EntityComponent"/> requirements.</summary>
            Additional precomputed data will be stored alongside the <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> to offer faster accesses and iterations.
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.EntityProcessor">
            <summary>Entity processor, triggered on various <see cref="P:SiliconStudio.Paradox.Engine.EntityProcessor.EntityManager"/> events such as Entity and Component additions and removals.</summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.EntityProcessor.Tags">
            <summary>
            Tags associated to this entity processor
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor.Update(SiliconStudio.Paradox.Games.GameTime)">
            <summary>
            Performs work related to this processor.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor.Draw(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Performs work related to this processor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor.OnSystemAdd">
            <summary>
            Run when this <see cref="T:SiliconStudio.Paradox.Engine.EntityProcessor"/> is added to an <see cref="P:SiliconStudio.Paradox.Engine.EntityProcessor.EntityManager"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor.OnSystemRemove">
            <summary>
            Run when this <see cref="T:SiliconStudio.Paradox.Engine.EntityProcessor"/> is removed from an <see cref="P:SiliconStudio.Paradox.Engine.EntityProcessor.EntityManager"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor.SetEnabled(SiliconStudio.Paradox.Engine.Entity,System.Boolean)">
            <summary>
            Specifies weither an entity is enabled or not.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor.EntityCheck(SiliconStudio.Paradox.Engine.Entity,System.Collections.Generic.List{SiliconStudio.Paradox.Engine.EntityProcessor},System.Boolean)">
            <summary>
            Checks if <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> needs to be either added or removed.
            </summary>
            <param name="entity">The entity.</param>
            <param name="forceRemove">if set to <c>true</c> [force remove].</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor.InternalAddEntity(SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Adds the entity to the internal list of the <see cref="P:SiliconStudio.Paradox.Engine.EntityProcessor.EntityManager"/>.
            Exposed for inheriting class that has no access to SceneInstance as internal.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor.InternalRemoveEntity(SiliconStudio.Paradox.Engine.Entity,System.Boolean)">
            <summary>
            Removes the entity to the internal list of the <see cref="P:SiliconStudio.Paradox.Engine.EntityProcessor.EntityManager"/>.
            Exposed for inheriting class that has no access to SceneInstance as internal.
            </summary>
            <param name="entity">The entity.</param>
            <param name="removeParent">Indicate if entity should be removed from its parent</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.EntityProcessor.RequiredKeys">
            <summary>Gets the required components for an entity to be added to this entity processor.</summary>
            <value>The required keys.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.EntityProcessor.Order">
            <summary>
            Gets or sets the order of this processor.
            </summary>
            <value>The order.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor`1.OnSystemAdd">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor`1.OnSystemRemove">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor`1.SetEnabled(SiliconStudio.Paradox.Engine.Entity,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor`1.EntityCheck(SiliconStudio.Paradox.Engine.Entity,System.Collections.Generic.List{SiliconStudio.Paradox.Engine.EntityProcessor},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor`1.GenerateAssociatedData(SiliconStudio.Paradox.Engine.Entity)">
            <summary>Generates associated data to the given entity.</summary>
            Called right before <see cref="M:SiliconStudio.Paradox.Engine.EntityProcessor`1.OnEntityAdding(SiliconStudio.Paradox.Engine.Entity,`0)"/>.
            <param name="entity">The entity.</param>
            <returns>The associated data.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor`1.OnEntityAdding(SiliconStudio.Paradox.Engine.Entity,`0)">
            <summary>Run when a matching entity is added to this entity processor.</summary>
            <param name="entity">The entity.</param>
            <param name="data">  The associated data.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityProcessor`1.OnEntityRemoved(SiliconStudio.Paradox.Engine.Entity,`0)">
            <summary>Run when a matching entity is removed from this entity processor.</summary>
            <param name="entity">The entity.</param>
            <param name="data">  The associated data.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.BackgroundComponentProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Sprites.SpriteProcessor"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AnimationComponent">
            <summary>
            Add animation capabilities to an <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>. It will usually apply to <see cref="P:SiliconStudio.Paradox.Engine.ModelComponent.ModelViewHierarchy"/>
            </summary>
            <remarks>
            Data is stored as in http://altdevblogaday.com/2011/10/23/low-level-animation-part-2/.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.EntityComponent"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityComponent.GetDefaultKey">
            <summary>
            The default key this component is associated to.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityComponent.GetDefaultKey``1">
            <summary>
            Gets the default key for the specified entity component type.
            </summary>
            <typeparam name="T">An entity component type</typeparam>
            <returns>PropertyKey.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.EntityComponent.Entity">
            <summary>
            Gets or sets the owner entity.
            </summary>
            <value>
            The owner entity.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.EntityComponent.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Engine.EntityComponent"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.EntityComponent.EnsureEntity">
            <summary>
            Gets the entity and throws an exception if the entity is null.
            </summary>
            <value>The entity.</value>
            <exception cref="T:System.InvalidOperationException">Entity on this instance is null</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AnimationComponent.Play(System.String)">
            <summary>
            Plays right away the animation with the specified name, instantly removing all other blended animations.
            </summary>
            <param name="name">The animation name.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AnimationComponent.Crossfade(System.String,System.TimeSpan)">
            <summary>
            Crossfades to a new animation.
            </summary>
            <param name="name">The name.</param>
            <param name="fadeTimeSpan">The fade time span.</param>
            <exception cref="T:System.ArgumentException">name</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AnimationComponent.Blend(System.String,System.Single,System.TimeSpan)">
            <summary>
            Blends progressively a new animation.
            </summary>
            <param name="name">The name.</param>
            <param name="desiredWeight">The desired weight.</param>
            <param name="fadeTimeSpan">The fade time span.</param>
            <exception cref="T:System.ArgumentException">name</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.AnimationComponent.Animations">
            <summary>
            Gets the animations associated to the component.
            </summary>
            <userdoc>The list of the animation associated to the entity.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent">
            <summary>
            Component representing an audio emitter.
            </summary>
            <remarks>
            <para>
            Associate this component to an entity to simulate a 3D localized source of sound coming from the entity center.
            Use the component <see cref="P:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DistanceScale"/> and <see cref="P:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DopplerScale"/> properties to attenuate or exaggerate the 
            effect the distance sound attenuation and Doppler effect.
            </para>
            <para>
            Several sounds can be associated to a single AudioEmitterComponent. 
            Use the functions <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.AttachSoundEffect(SiliconStudio.Paradox.Audio.SoundEffect)"/> and <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DetachSoundEffect(SiliconStudio.Paradox.Audio.SoundEffect)"/> to associate or dissociate a <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> to the emitter component.
            Each SoundEffect associated to the emitter component can be controlled (played, paused, stopped, ...) independently for the others.
            Once attached to the emitter component, a SoundEffect is controlled using a <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterSoundController"/>.
            To get the AudioEmitterSoundController associated to a SoundEffect use the <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.GetSoundEffectController(SiliconStudio.Paradox.Audio.SoundEffect)"/> function.
            </para>
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterComponent.SoundEffectToController">
            <summary>
            Dictionary associating each soundEffect to a single soundController.
            The controller a valid as long as the corresponding SoundEffect is present in the dictionary.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.#ctor(System.Collections.Generic.IEnumerable{SiliconStudio.Paradox.Audio.SoundEffect})">
            <summary>
            Create an instance of <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> with a list default <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> associated.
            </summary>
            <param name="soundEffectToAttach">The SoundEffect to attach to the emitter by default.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.#ctor">
            <summary>
            Create an instance of <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> with no default <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> associated.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.GetSoundEffectController(SiliconStudio.Paradox.Audio.SoundEffect)">
            <summary>
            Return a <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterSoundController"/> that can be used to control the provided <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/>.
            </summary>
            <param name="soundEffect">The soundEffect that the user want to control.</param>
            <returns>The controller that can control the <paramref name="soundEffect"/></returns>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="soundEffect"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The provided <paramref name="soundEffect"/> is not attached to this component.</exception>
            <remarks>The return AudioEmitterSoundController is valid as long as 
            (1) the associated soundEffect is attached to the emitter, 
            (2) the associated soundEffect is not disposed and,
            (3) the emitter component's entity is present into Entity system.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.AttachSoundEffect(SiliconStudio.Paradox.Audio.SoundEffect)">
            <summary>
            Attach a <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> to this emitter component.
            Once attached a <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterSoundController"/> can be queried using <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.GetSoundEffectController(SiliconStudio.Paradox.Audio.SoundEffect)"/> to control the attached SoundEffect.
            </summary>
            <param name="soundEffect">The SoundEffect to attach</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="soundEffect"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The provided <paramref name="soundEffect"/> can not be localized (contains more than one channel).</exception>
            <remarks>Attaching a soundEffect already attached has no effects.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.AttachSoundEffects(System.Collections.Generic.IEnumerable{SiliconStudio.Paradox.Audio.SoundEffect})">
            <summary>
            Attach a list of <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> to this emitter component.
            Once attached a <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterSoundController"/> can be queried using <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.GetSoundEffectController(SiliconStudio.Paradox.Audio.SoundEffect)"/> to control the attached SoundEffect.
            </summary>
            <param name="soundEffects">The SoundEffects to attach</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="soundEffects"/> list is null.</exception>
            <exception cref="T:System.InvalidOperationException">One or more of the provided SoundEffect can not be localized (contains more than one channel).</exception>
            <remarks>Attaching a soundEffect already attached has no effects.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DetachSoundEffect(SiliconStudio.Paradox.Audio.SoundEffect)">
            <summary>
            Detach a <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> from this emitter component.
            Once detach the controller previously associated to the SoundEffect is invalid.
            </summary>
            <param name="soundEffect">The soundEffect to detach.</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="soundEffect"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The provided <paramref name="soundEffect"/> is not currently attached to the emitter component.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DetachSoundEffects(System.Collections.Generic.IEnumerable{SiliconStudio.Paradox.Audio.SoundEffect})">
            <summary>
            Detach a list of <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> from this emitter component.
            Once detach the controller previously associated to the SoundEffect is invalid.
            </summary>
            <param name="soundEffects">The soundEffects to detach.</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="soundEffects"/> is null.</exception>
            <exception cref="T:System.ArgumentException">One or more of the provided SoundEffect is not currently attached to the emitter component.</exception>
        </member>
        <member name="E:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ControllerCollectionChanged">
            <summary>
            Event triggered when an <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterSoundController"/> has be attached or detached to the component.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DistanceScale">
            <summary>
            Distance scale used to calculate the signal attenuation with the listener
            </summary>
            <remarks>
            By default, this value is 1.0.
            This value represent the distance unit and determines how quickly the signal attenuates between this object and the AudioListener. 
            Values below 1.0 exaggerate the attenuation to make it more apparent. 
            Values above 1.0 scale down the attenuation. A value of 1.0 leaves the default attenuation unchanged.
            Note that this value modifies only the calculated attenuation between this object and a AudioListener. 
            The calculated attenuation is a product of the relationship between AudioEmitter.Position and AudioListener.Position. 
            If the calculation yields a result of no attenuation effect, this value has no effect.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The distance scale of an audio emitter must be greater than or equal to zero.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.AudioEmitterComponent.DopplerScale">
            <summary>
            The scalar applied to the level of Doppler effect calculated between this and the listener
            </summary>
            <remarks>
            By default, this value is 1.0.
            This value determines how much to modify the calculated Doppler effect between this object and a AudioListener. 
            Values below 1.0 scale down the Doppler effect to make it less apparent. 
            Values above 1.0 exaggerate the Doppler effect. A value of 1.0 leaves the effect unmodified.
            Note that this value modifies only the calculated Doppler between this object and a AudioListener. 
            The calculated Doppler is a product of the relationship between AudioEmitter.Velocity and AudioListener.Velocity. 
            If the calculation yields a result of no Doppler effect, this value has no effect.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The Doppler scale of an audio emitter must be greater than or equal to zero.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ShouldBeProcessed">
            <summary>
            Boolean indicating to the <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterProcessor"/> if the AudioEmitterComponent need to be processed or can be skipped.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs">
            <summary>
            Event argument class used to signal the <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterProcessor"/> that a new AudioEmitterSoundController has new added or removed to the component.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs.Entity">
            <summary>
            The entity associated the current component.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs.Controller">
            <summary>
            The controller that have been added or removed to the component.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.AudioEmitterComponent.ControllerCollectionChangedEventArgs.Action">
            <summary>
            Action indication if the controller has been added or removed.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.AudioListenerComponent">
            <summary>
            Component representing an audio listener.
            </summary>
            <remarks>
            <para>Associate this component to an <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> to simulate a physical listener listening to the <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/>s of the scene,
            placed at the entity's center and oriented along the entity's Oz (forward) and Oy (up) vectors.</para>
            <para>Use the AudioSytem's <see cref="M:SiliconStudio.Paradox.Audio.AudioSystem.AddListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)"/> and <see cref="M:SiliconStudio.Paradox.Audio.AudioSystem.RemoveListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)"/> functions 
            to activate/deactivate the listeners that are actually listening at a given time.</para>
            <para>The entity needs to be added to the Entity System so that the associated AudioListenerComponent can be processed.</para></remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.BackgroundComponent">
            <summary>
            Add a background to an <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.BackgroundComponent.#ctor">
            <summary>
            Create an empty Background component.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.BackgroundComponent.Texture">
            <summary>
            Gets or sets the texture to use as background
            </summary>
            <userdoc>The reference to the texture to use as background</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.BackgroundComponent.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
            <value>The intensity.</value>
            <userdoc>The intensity of the background color</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.CameraComponent">
            <summary>
            Describes the camera projection and view.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.CameraComponent.Key">
            <summary>
            The property key of this component.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.CameraComponent.#ctor">
            <summary>
            Create a new <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/> instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.CameraComponent.#ctor(System.Single,System.Single)">
            <summary>
            Create a new <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/> instance with the provided target, near plane and far plane.
            </summary>
            <param name="nearClipPlane">The near plane value</param>
            <param name="farClipPlane">The far plane value</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.CameraComponent.ViewMatrix">
            <summary>
            Gets or sets the local view matrix. See remarks.
            </summary>
            <value>The local view matrix.</value>
            <remarks>
            This value is updated when calling <see cref="M:SiliconStudio.Paradox.Engine.CameraComponent.Update"/> or is directly used when <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.UseCustomViewMatrix"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.CameraComponent.ProjectionMatrix">
            <summary>
            Gets or sets the local projection matrix. See remarks.
            </summary>
            <value>The local projection matrix.</value>
            <remarks>
            This value is updated when calling <see cref="M:SiliconStudio.Paradox.Engine.CameraComponent.Update"/> or is directly used when <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.UseCustomViewMatrix"/> is <c>true</c>.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.CameraComponent.ViewProjectionMatrix">
            <summary>
            The view projection matrix calculated automatically after calling <see cref="M:SiliconStudio.Paradox.Engine.CameraComponent.Update"/> method.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.CameraComponent.Frustum">
            <summary>
            The frustum extracted from the view projection matrix calculated automatically after calling <see cref="M:SiliconStudio.Paradox.Engine.CameraComponent.Update"/> method.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.CameraComponent.Update">
            <summary>
            Calculates the projection matrix and view matrix.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.CameraComponent.Update(System.Nullable{System.Single})">
            <summary>
            Calculates the projection matrix and view matrix.
            </summary>
            <param name="screenAspectRatio">The current screen aspect ratio. If null, use the <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.AspectRatio"/> even if <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.UseCustomAspectRatio"/> is false.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.Projection">
            <summary>
            Gets or sets the projection.
            </summary>
            <value>The projection.</value>
            <userdoc>The type of projection used by the camera.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.VerticalFieldOfView">
            <summary>
            Gets or sets the vertical field of view in degrees.
            </summary>
            <value>
            The vertical field of view.
            </value>
            <userdoc>The vertical field-of-view used by the camera (in degrees).</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.OrthographicSize">
            <summary>
            Gets or sets the height of the orthographic projection.
            </summary>
            <value>
            The height of the orthographic projection.
            </value>
            <userdoc>The height of the orthographic projection (the width is automatically calculated based on the target ratio).</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.NearClipPlane">
            <summary>
            Gets or sets the near plane distance.
            </summary>
            <value>
            The near plane distance.
            </value>
            <userdoc>The value of the near clip plane.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.FarClipPlane">
            <summary>
            Gets or sets the far plane distance.
            </summary>
            <value>
            The far plane distance.
            </value>
            <userdoc>The value of the far clip plane.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.UseCustomAspectRatio">
            <summary>
            Gets or sets a value indicating whether to use a custom <see cref="P:SiliconStudio.Paradox.Engine.CameraComponent.AspectRatio"/>. Default is <c>false</c>, meaning that the aspect ratio is calculated from the ratio of the current viewport when rendering.
            </summary>
            <value>The use custom aspect ratio.</value>
            <userdoc>If checked, use the value contained in 'Aspect Ratio' to calculate the projection matrices. Otherwise, automatically adjust the aspect ratio to the ratio of the render target.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.AspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>
            The aspect ratio.
            </value>
            <userdoc>The aspect ratio used to build the projection matrices when 'Custom Aspect Ratio?' is checked.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.UseCustomViewMatrix">
            <summary>
            Gets or sets a value indicating whether to use custom <see cref="F:SiliconStudio.Paradox.Engine.CameraComponent.ViewMatrix"/>. Default is <c>false</c>
            </summary>
            <value><c>true</c> if use custom <see cref="F:SiliconStudio.Paradox.Engine.CameraComponent.ViewMatrix"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.CameraComponent.UseCustomProjectionMatrix">
            <summary>
            Gets or sets a value indicating whether to use custom <see cref="F:SiliconStudio.Paradox.Engine.CameraComponent.ProjectionMatrix"/>. Default is <c>false</c>
            </summary>
            <value><c>true</c> if use custom <see cref="F:SiliconStudio.Paradox.Engine.CameraComponent.ProjectionMatrix"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.ChildSceneComponent">
            <summary>
            A link to a scene that is rendered by a parent <see cref="P:SiliconStudio.Paradox.Engine.ChildSceneComponent.Scene"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.ChildSceneComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.ChildSceneComponent"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.ChildSceneComponent.#ctor(SiliconStudio.Paradox.Engine.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.ChildSceneComponent"/> class.
            </summary>
            <param name="scene">The scene.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ChildSceneComponent.Scene">
            <summary>
            Gets or sets the child scene.
            </summary>
            <value>The scene.</value>
            <userdoc>The reference to the scene to render. Any scene can be selected except the containing one.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.HierarchicalProcessor">
            <summary>
            This processor will take care of adding/removing children of every Entity added/removed in the SceneInstance.
            It will also exposes a list of root entities.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.HierarchicalProcessor.GenerateAssociatedData(SiliconStudio.Paradox.Engine.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.HierarchicalProcessor.OnSystemAdd">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.HierarchicalProcessor.OnEntityAdding(SiliconStudio.Paradox.Engine.Entity,SiliconStudio.Paradox.Engine.TransformComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.HierarchicalProcessor.OnEntityRemoved(SiliconStudio.Paradox.Engine.Entity,SiliconStudio.Paradox.Engine.TransformComponent)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.HierarchicalProcessor.RootEntities">
            <summary>
            Gets the list of root entities (entities which have no <see cref="P:SiliconStudio.Paradox.Engine.TransformComponent.Parent"/>).
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.ModelComponent">
            <summary>
            Add a <see cref="P:SiliconStudio.Paradox.Engine.ModelComponent.Model"/> to an <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>, that will be used during rendering.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.IModelInstance">
            <summary>
            Instance of a model with its parameters.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.IModelInstance.Model">
            <summary>
            Gets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.IModelInstance.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.IModelInstance.Materials">
            <summary>
            Gets the materials.
            </summary>
            <value>
            The materials.
            </value>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.ModelComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.ModelComponent"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.ModelComponent.#ctor(SiliconStudio.Paradox.Rendering.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.ModelComponent"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.ModelComponent.BoundingBox">
            <summary>
            Gets the bounding box in world space.
            </summary>
            <value>The bounding box.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.ModelComponent.BoundingSphere">
            <summary>
            Gets the bounding sphere in world space.
            </summary>
            <value>The bounding sphere.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelComponent.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
            <userdoc>The reference to the model asset to attach to this entity</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelComponent.Materials">
            <summary>
            Gets the materials; non-null ones will override materials from <see cref="P:SiliconStudio.Paradox.Rendering.Model.Materials"/> (same slots should be used).
            </summary>
            <value>
            The materials overriding <see cref="P:SiliconStudio.Paradox.Rendering.Model.Materials"/> ones.
            </value>
            <userdoc>The list of materials to use with the model. This list overrides the default materials of the model.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelComponent.IsShadowCaster">
            <summary>
            Gets or sets a boolean indicating if this model component is casting shadows.
            </summary>
            <value>A boolean indicating if this model component is casting shadows.</value>
            <userdoc>If checked, the model generates a shadow when enabling shadow maps.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelComponent.IsShadowReceiver">
            <summary>
            Gets or sets a boolean indicating if this model component is receiving shadows.
            </summary>
            <value>A boolean indicating if this model component is receiving shadows.</value>
            <userdoc>If checked, the model can be covered by the shadow of another model.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelComponent.Parameters">
            <summary>
            Gets the parameters used to render this mesh.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelNodeLinkComponent.Target">
            <summary>
            Gets or sets the model which contains the hierarchy to use.
            </summary>
            <value>
            The model which contains the hierarchy to use.
            </value>
            <userdoc>The reference to the target entity to which attach the current entity.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ModelNodeLinkComponent.NodeName">
            <summary>
            Gets or sets the name of the node.
            </summary>
            <value>
            The name of the node.
            </value>
            <userdoc>The name of node of the model of the target entity to which attach the current entity.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.SceneComponent">
            <summary>
            A component used internally to tag a Scene.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SceneComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.SceneComponent"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SceneComponent.GraphicsCompositor">
            <summary>
            Gets or sets the graphics composer for this scene.
            </summary>
            <value>The graphics composer.</value>
            <userdoc>The compositor in charge of creating the graphic pipeline</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SceneComponent.EditorSettings">
            <summary>
            Gets or sets the editor settings.
            </summary>
            <value>The editor settings.</value>
            <userdoc>Settings for the scene editor</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.SceneInstance">
            <summary>
            Manage a collection of entities within a <see cref="P:SiliconStudio.Paradox.Engine.SceneInstance.Scene"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.EntityManager">
            <summary>
            Manage a collection of entities.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.EntityManager"/> class.
            </summary>
            <param name="registry">The registry.</param>
            <exception cref="T:System.ArgumentNullException">registry</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.AddProcessor(SiliconStudio.Paradox.Engine.EntityProcessor)">
            <summary>
            Adds a processor to this instance.
            </summary>
            <param name="processor">The processor.</param>
            <exception cref="T:System.ArgumentNullException">processor</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.RemoveProcessor(SiliconStudio.Paradox.Engine.EntityProcessor)">
            <summary>
            Removes a processor from this instance.
            </summary>
            <param name="processor">The processor.</param>
            <exception cref="T:System.ArgumentNullException">processor</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.Add(SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Adds the entity.
            If the <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> has a parent, its parent should be added (or <see cref="P:SiliconStudio.Paradox.Engine.TransformComponent.Children"/>) should be used.
            </summary>
            <param name="entity">The entity.</param>
            <exception cref="T:System.ArgumentException">Entity shouldn't have a parent.;entity</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.SetEnabled(SiliconStudio.Paradox.Engine.Entity,System.Boolean)">
            <summary>
            Sets the enable state of this entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="enabled">if set to <c>true</c>, entity is [enabled].</param>
            <exception cref="T:System.InvalidOperationException">Entity is not part of this SceneInstance.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.IsEnabled(SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Determines whether the specified entity is enabled.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if the specified entity is enabled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.Enable(SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Enables the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.Disable(SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Disables the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.Remove(SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Removes the entity from the <see cref="T:SiliconStudio.Paradox.Engine.EntityManager"/>.
            It works weither entity has a parent or not.
            In conjonction with <see cref="!:HierarchicalSystem"/>, it will remove children entities as well.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.Reset">
            <summary>
            Removes all entities from the <see cref="T:SiliconStudio.Paradox.Engine.EntityManager"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.GetProcessor``1">
            <summary>
            Gets the processor.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.InternalAddEntity(SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.InternalRemoveEntity(SiliconStudio.Paradox.Engine.Entity,System.Boolean)">
            <summary>
            Removes the specified entity.
            </summary>
            <param name="entity">The entity to remove.</param>
            <param name="removeParent">Indicate if entity should be removed from its parent</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityManager.Contains(SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Determines whether this instance contains the specified entity.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if this instance contains the specified entity; otherwise, <c>false</c>.</returns>
        </member>
        <member name="E:SiliconStudio.Paradox.Engine.EntityManager.EntityAdded">
            <summary>
            Occurs when an entity is added.
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Engine.EntityManager.EntityRemoved">
            <summary>
            Occurs when an entity is removed.
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Engine.EntityManager.ComponentTypeAdded">
            <summary>
            Occurs when a new component type is added.
            </summary>
        </member>
        <member name="E:SiliconStudio.Paradox.Engine.EntityManager.ComponentChanged">
            <summary>
            Occurs when a component changed for an entity (Added or removed)
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.EntityManager.Services">
            <summary>
            Gets the services.
            </summary>
            <value>The services.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.EntityManager.Processors">
            <summary>
            Gets the entity Processors.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.EntityManager.ComponentTypes">
            <summary>
            Gets the list of component types from the entities..
            </summary>
            <value>The registered component types.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.SceneInstance.Current">
            <summary>
            A property key to get the current scene from the <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SceneInstance.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.EntityManager"/> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SceneInstance.#ctor(SiliconStudio.Core.IServiceRegistry,SiliconStudio.Paradox.Engine.Scene,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.SceneInstance"/> class.
            </summary>
            <param name="services">The services.</param>
            <param name="sceneEntityRoot">The scene entity root.</param>
            <param name="enableScripting">if set to <c>true</c> [enable scripting].</param>
            <exception cref="T:System.ArgumentNullException">services
            or
            sceneEntityRoot</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SceneInstance.GetCurrent(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Gets the current scene valid only from a rendering context. May be null.
            </summary>
            <param name="context">The context.</param>
            <returns>SiliconStudio.Paradox.Engine.SceneInstance.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SceneInstance.Draw(SiliconStudio.Paradox.Rendering.RenderContext,SiliconStudio.Paradox.Rendering.RenderFrame,SiliconStudio.Paradox.Rendering.Composers.ISceneGraphicsCompositor)">
            <summary>
            Draws this scene instance with the specified context and <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="toFrame">To frame.</param>
            <param name="compositorOverride">The compositor overload. Set this value to by-pass the default compositor of a scene.</param>
            <exception cref="T:System.ArgumentNullException">
            context
            or
            toFrame
            </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SceneInstance.Update(SiliconStudio.Paradox.Games.GameTime)">
            <summary>
            Updates this scene at the specified time.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="E:SiliconStudio.Paradox.Engine.SceneInstance.SceneChanged">
            <summary>
            Occurs when the scene changed from a scene child component.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SceneInstance.Scene">
            <summary>
            Gets the scene.
            </summary>
            <value>The scene.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SceneInstance.RendererTypes">
            <summary>
            Gets the component renderers.
            </summary>
            <value>The renderers.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.ScriptComponent">
            <summary>
            Script component.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.ScriptComponent.GetDefaultKey">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ScriptComponent.Scripts">
            <summary>
            Gets the scripts.
            </summary>
            <value>
            The scripts.
            </value>
            <userdoc>The list of scripts attached to the entity</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.SkyboxComponent">
            <summary>
            Add a <see cref="P:SiliconStudio.Paradox.Engine.SkyboxComponent.Skybox"/> to an <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>, that will be used during rendering.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SkyboxComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.SkyboxComponent"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SkyboxComponent.#ctor(SiliconStudio.Paradox.Rendering.Skyboxes.Skybox)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.SkyboxComponent"/> class.
            </summary>
            <param name="skybox">The skybox.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SkyboxComponent.Skybox">
            <summary>
            Gets or sets the skybox.
            </summary>
            <value>
            The skybox.
            </value>
            <userdoc>The skybox to use as input</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SkyboxComponent.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>The background.</value>
            <userdoc>Specify how to display skybox in the background</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SkyboxComponent.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
            <value>The intensity.</value>
            <userdoc>The light intensity of the skybox</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.SpriteComponent">
            <summary>
            Add a <see cref="T:SiliconStudio.Paradox.Graphics.Sprite"/> to an <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>. It could be an animated sprite.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.SpriteComponent.SpriteProviderInternal">
            <summary>
            The sprites to play.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.SpriteComponent.SpriteType">
            <summary>
            The type of the sprite.
            </summary>
            <userdoc>The type of the sprite. A 3D sprite in the scene or billboard perpendicular to camera view.</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.SpriteComponent.Color">
            <summary>
            The color to apply on the sprite.
            </summary>
            <userdoc>The color to apply to the sprite.</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.SpriteComponent.IgnoreDepth">
            <summary>
            Ignore the depth of other elements of the scene when rendering the sprite by disabling the depth test.
            </summary>
            <userdoc>Ignore the depth of other elements of the scene when rendering the sprite. When checked, the sprite is always put on top of previous elements.</userdoc>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SpriteComponent.#ctor">
            <summary>
            Creates a new instance of <see cref="T:SiliconStudio.Paradox.Engine.SpriteComponent"/>
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SpriteComponent.SpriteProvider">
            <summary>
            The group of sprites associated to the component.
            </summary>
            <userdoc>The source of the sprite data.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SpriteComponent.PremultipliedAlpha">
            <summary>
            Gets or sets a value indicating whether the sprite is a pre-multiplied alpha (default is true).
            </summary>
            <value><c>true</c> if the texture is pre-multiplied by alpha; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SpriteComponent.CurrentFrame">
            <summary>
            Gets or sets the current frame of the animation.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SpriteComponent.CurrentSprite">
            <summary>
            Gets the current sprite.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.TransformComponent">
            <summary>
            Defines Position, Rotation and Scale of its <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformComponent.WorldMatrix">
            <summary>
            The world matrix.
            Use <see cref="M:SiliconStudio.Paradox.Engine.TransformComponent.UpdateWorldMatrix"/> to ensure it is updated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformComponent.LocalMatrix">
            <summary>
            The local matrix.
            Use <see cref="M:SiliconStudio.Paradox.Engine.TransformComponent.UpdateLocalMatrix"/> to ensure it is updated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformComponent.Position">
            <summary>
            The translation relative to the parent transformation.
            </summary>
            <userdoc>The translation of the entity with regard to its parent</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformComponent.Rotation">
            <summary>
            The rotation relative to the parent transformation.
            </summary>
            <userdoc>The rotation of the entity with regard to its parent</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.TransformComponent.Scale">
            <summary>
            The scaling relative to the parent transformation.
            </summary>
            <userdoc>The scale of the entity with regard to its parent</userdoc>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.TransformComponent"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformComponent.UpdateLocalMatrix">
            <summary>
            Updates the local matrix.
            If <see cref="P:SiliconStudio.Paradox.Engine.TransformComponent.UseTRS"/> is true, <see cref="F:SiliconStudio.Paradox.Engine.TransformComponent.LocalMatrix"/> will be updated from <see cref="F:SiliconStudio.Paradox.Engine.TransformComponent.Position"/>, <see cref="F:SiliconStudio.Paradox.Engine.TransformComponent.Rotation"/> and <see cref="F:SiliconStudio.Paradox.Engine.TransformComponent.Scale"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformComponent.UpdateWorldMatrix">
            <summary>
            Updates the world matrix.
            It will first call <see cref="M:SiliconStudio.Paradox.Engine.TransformComponent.UpdateLocalMatrix"/> on self, and <see cref="M:SiliconStudio.Paradox.Engine.TransformComponent.UpdateWorldMatrix"/> on <see cref="P:SiliconStudio.Paradox.Engine.TransformComponent.Parent"/> if not null.
            Then <see cref="F:SiliconStudio.Paradox.Engine.TransformComponent.WorldMatrix"/> will be updated by multiplying <see cref="F:SiliconStudio.Paradox.Engine.TransformComponent.LocalMatrix"/> and parent <see cref="F:SiliconStudio.Paradox.Engine.TransformComponent.WorldMatrix"/> (if any).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.TransformComponent.CreateMatrixTRS(SiliconStudio.Core.Mathematics.Vector3@,SiliconStudio.Core.Mathematics.Quaternion@,SiliconStudio.Core.Mathematics.Vector3@,SiliconStudio.Core.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that contains both the X, Y and Z rotation, as well as scaling and translation.
            </summary>
            <param name="translation">The translation.</param>
            <param name="rotation">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="scaling">The scaling.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.TransformComponent.UseTRS">
            <summary>
            Gets or sets a value indicating whether to use the Translation/Rotation/Scale.
            </summary>
            <value><c>true</c> if [use TRS]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.TransformComponent.Children">
            <summary>
            Gets the children of this <see cref="T:SiliconStudio.Paradox.Engine.TransformComponent"/>.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.TransformComponent.RotationEulerXYZ">
            <summary>
            Gets or sets the euler rotation, with XYZ order.
            Not stable: setting value and getting it again might return different value as it is internally encoded as a <see cref="T:SiliconStudio.Core.Mathematics.Quaternion"/> in <see cref="F:SiliconStudio.Paradox.Engine.TransformComponent.Rotation"/>.
            </summary>
            <value>
            The euler rotation.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.TransformComponent.Parent">
            <summary>
            Gets or sets the parent of this <see cref="T:SiliconStudio.Paradox.Engine.TransformComponent"/>.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.UIComponent">
            <summary>
            Add an <see cref="T:SiliconStudio.Paradox.UI.UIElement"/> to an <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.UIComponent.RootElement">
            <summary>
            Gets or sets the root element of the UI hierarchy.
            </summary>
            <userdoc>The root element of the UI hierarchy.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.UIComponent.IsFullScreen">
            <summary>
            Gets or sets the value indicating whether the UI should be full screen.
            </summary>
            <userdoc>Check this checkbox to display UI of this component on full screen. Uncheck it to display UI using standard camera.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.UIComponent.VirtualResolution">
            <summary>
            Gets or sets the virtual resolution of the UI in virtual pixels.
            </summary>
            <userdoc>The value in pixels of the resolution of the UI</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.UIComponent.VirtualResolutionMode">
            <summary>
            Gets or sets the camera.
            </summary>
            <value>The camera.</value>
            <userdoc>Indicate how the virtual resolution value should be interpreted</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.UIComponent.IsBillboard">
            <summary>
            Gets or sets the value indicating whether the UI should be displayed as billboard.
            </summary>
            <userdoc>If checked, the UI is displayed as a billboard. That is, it is automatically rotated parallel to the screen.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.UIComponent.SnapText">
            <summary>
            Gets or sets the value indicating of the UI texts should be snapped to closest pixel.
            </summary>
            <userdoc>If checked, all the text of the UI is snapped to the closest pixel (pixel perfect).</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.FallbackEffectType.Compiling">
            <summary>
            The effect is being asynchrounously compiled.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.FallbackEffectType.Error">
            <summary>
            There was an error while compiling the effect.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame">
            <summary>
            A wireframe rendering mode (rendering only ModelComponent for now).
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.CameraRendererMode">
            <summary>
            Defines the type of rendering (Forward, Deferred...etc.)
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RendererBase">
            <summary>
            Base implementation of <see cref="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RendererCoreBase">
            <summary>
            Base implementation of <see cref="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.IGraphicsRendererCore">
            <summary>
            The core interface of a renderer.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.IGraphicsRendererCore.Initialize(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Loads this renderer. See remarks.
            </summary>
            <param name="context">The context.</param>
            <remarks>This method allow a renderer to prepare for rendering. This method should be called once to initialize a renderer.</remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.IGraphicsRendererCore.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.IGraphicsRendererCore.Initialized">
            <summary>
            Gets a value indicating whether this renderer is initialized.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererCoreBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.RendererBase"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererCoreBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.ComponentBase"/> class.
            </summary>
            <param name="name">The name attached to this component</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererCoreBase.Unload">
            <summary>
            Unloads this instance on dispose.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererCoreBase.NewScopedBuffer(SiliconStudio.Paradox.Graphics.BufferDescription,SiliconStudio.Paradox.Graphics.PixelFormat)">
            <summary>
            Gets a render target with the specified description, scoped for the duration of the <see cref="!:DrawEffect.DrawCore"/>.
            </summary>
            <param name="description">The description of the buffer to allocate</param>
            <param name="viewFormat">The pixel format seen in shader</param>
            <returns>A new instance of texture.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererCoreBase.NewScopedTypedBuffer(System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,System.Boolean,SiliconStudio.Paradox.Graphics.GraphicsResourceUsage)">
            <summary>
            Gets a render target with the specified description, scoped for the duration of the <see cref="!:DrawEffect.DrawCore"/>.
            </summary>
            <returns>A new instance of texture.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererCoreBase.PushScopedResource``1(``0)">
            <summary>
            Pushes a new scoped resource to the current Draw.
            </summary>
            <param name="resource">The scoped resource</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererCoreBase.CheckIsInDrawCore">
            <summary>
            Checks that the current execution path is between a PreDraw/PostDraw sequence and throws and exception if not.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RendererCoreBase.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Rendering.EntityComponentRendererBase"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <userdoc>Enabled if checked, disable otherwise</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer">
            <summary>
            A graphics renderer.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.IGraphicsRenderer.Draw(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Draws this renderer with the specified context. See remarks.
            </summary>
            <param name="context">The context.</param>
            <remarks>The method <see cref="M:SiliconStudio.Paradox.Rendering.IGraphicsRendererCore.Initialize(SiliconStudio.Paradox.Rendering.RenderContext)"/> should be called automatically by the implementation if it was not done before the first draw.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.RendererBase"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.ComponentBase"/> class.
            </summary>
            <param name="name">The name attached to this component</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererBase.DrawCore(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Main drawing method for this renderer that must be implemented. 
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererBase.Draw(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Draws this renderer with the specified context.
            </summary>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
            <exception cref="T:System.InvalidOperationException">Cannot use a different context between Load and Draw</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.CameraRendererMode.GetDefaultRasterizerState(System.Boolean)">
            <summary>
            Gets the default <see cref="T:SiliconStudio.Paradox.Graphics.RasterizerState"/> for models drawn by this render mode.
            </summary>
            <param name="isGeomertryInverted"><c>true</c> if the rendered gometry is inverted through scaling, <c>false</c> otherwise.</param>
            <returns>The rasterizer state.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.CameraRendererMode.DrawCore(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Draws entities from a specified <see cref="T:SiliconStudio.Paradox.Rendering.SceneCameraRenderer"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:SiliconStudio.Paradox.Rendering.CameraRendererMode.RendererCreated">
            <summary>
            Occurs when a renderer is created.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererMode.ModelEffect">
            <summary>
            Gets or sets the effect to use to render the models in the scene.
            </summary>
            <value>The main model effect.</value>
            <userdoc>The name of the effect to use to render models (a '.pdxsl' or '.pdxfx' filename without the extension).</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererMode.RendererOverrides">
            <summary>
            Gets the renderer overrides.
            </summary>
            <value>The renderer overrides.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererMode.RenderComponentTypes">
            <summary>
            Gets the filter on the types to render.
            </summary>
            <value>The filter renderer types.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererMode.SkipComponentTypes">
            <summary>
            Gets the filter on the types to skip.
            </summary>
            <value>The filter renderer types.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.GetDefaultRasterizerState(System.Boolean)">
            <summary>
            Gets the default <see cref="T:SiliconStudio.Paradox.Graphics.RasterizerState"/> for models drawn by this render mode.
            </summary>
            <param name="isGeomertryInverted"><c>true</c> if the rendered gometry is inverted through scaling, <c>false</c> otherwise.</param>
            <returns>The rasterizer state.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.ModelEffect">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.FrontColor">
            <summary>
            Gets or sets the color of the front.
            </summary>
            <value>The color of the front.</value>
            <userdoc>The color used to render front faces</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.EnableBackColor">
            <summary>
            Gets or sets a value indicating whether to enable back color computed from the normal backfacing the camera.
            </summary>
            <value><c>true</c> if to enable back color computed from the normal backfacing the camera; otherwise, <c>false</c>.</value>
            <userdoc>If checked, use the color specified by 'Back Color' to render the back faces. Otherwise, uses the same color as for front faces.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.BackColor">
            <summary>
            Gets or sets the color of the back.
            </summary>
            <value>The color of the back.</value>
            <userdoc>The color used to render front faces if 'Enable Back Color' is checked.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.AlphaBlend">
            <summary>
            Gets or sets the alpha blend.
            </summary>
            <value>The blend.</value>
            <userdoc>Specifies the opacity of the wireframe.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.EnableColorBlend">
            <summary>
            Gets or sets a value indicating whether this instance is separating color and alpha blending. Default is false (Color Blend is using Alpha Blend)
            </summary>
            <value><c>true</c> if this instance is separate color and alpha blending; otherwise, <c>false</c>.</value>
            <userdoc>If checked, blend the provided wireframe color with the default color of the model. Otherwise, use only the provided wireframe color.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.ColorBlend">
            <summary>
            Gets or sets the color blend.
            </summary>
            <value>The blend.</value>
            <userdoc>The blend factor between provided wireframe color and the default model color. A factor of 0 represents the default model color. A factor of 1 results in the provided wireframe color.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.ShowBackface">
            <summary>
            Gets or sets a value indicating whether to show backface. Default is true.
            </summary>
            <value><c>true</c> if show backface (default is true); otherwise, <c>false</c>.</value>
            <userdoc>If checked, both the front and back faces are rendered. Otherwise, only front faces are rendered.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.EnableDepth">
            <summary>
            Gets or sets a value indicating whether [enable depth].
            </summary>
            <value><c>true</c> if [enable depth]; otherwise, <c>false</c>.</value>
            <userdoc>If checked, read and writes into the depth buffer when rendering the wireframe, otherwise not.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.BlendFactor">
            <summary>
            Gets or sets the blend factor that will be multiplied to <see cref="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.AlphaBlend"/> and <see cref="P:SiliconStudio.Paradox.Rendering.CameraRendererModeWireFrame.ColorBlend"/>
            </summary>
            <value>The blend factor.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.EntityComponentRendererEventArgs">
            <summary>
            An event published by <see cref="P:SiliconStudio.Paradox.Rendering.EntityComponentRendererEventArgs.CameraRendererMode"/> when a new renderer is created.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.EntityComponentRendererEventArgs.CameraRendererMode">
            <summary>
            Gets the camera renderer mode that created the renderer.
            </summary>
            <value>The camera renderer mode.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.EntityComponentRendererEventArgs.Renderer">
            <summary>
            Gets the new renderer created.
            </summary>
            <value>The renderer.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ImageEffect">
            <summary>
            Post effect base class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.DrawEffect">
            <summary>
            The base class in charge of applying and drawing an effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:SiliconStudio.Paradox.Rendering.DrawEffect"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.#ctor">
            <summary>
            Initializes the <see cref="T:SiliconStudio.Paradox.Rendering.DrawEffect"/> with the given <see cref="T:SiliconStudio.Paradox.Rendering.RenderContext"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.#ctor(SiliconStudio.Paradox.Rendering.RenderContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.DrawEffect"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.InitializeCore">
            <summary>
            Initializes the <see cref="T:SiliconStudio.Paradox.Rendering.DrawEffect"/> with the given <see cref="T:SiliconStudio.Paradox.Rendering.RenderContext"/>.
            </summary>
            /// <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.Reset">
            <summary>
            Resets the state of this effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.SetDefaultParameters">
            <summary>
            Sets the default parameters (called at constructor time and if <see cref="M:SiliconStudio.Paradox.Rendering.DrawEffect.Reset"/> is called)
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.Draw(SiliconStudio.Paradox.Rendering.RenderContext,System.String)">
            <summary>
            Draws a full screen quad using iterating on each pass of this effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.Draw(System.String)">
            <summary>
            Draws a full screen quad using iterating on each pass of this effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.Draw(System.String,System.Object[])">
            <summary>
            Draws a full screen quad using iterating on each pass of this effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.Draw(SiliconStudio.Paradox.Rendering.RenderContext,System.String,System.Object[])">
            <summary>
            Draws a full screen quad using iterating on each pass of this effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DrawEffect.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.DrawEffect.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.DrawEffect.Assets">
            <summary>
            Gets the <see cref="T:SiliconStudio.Core.Serialization.Assets.AssetManager"/>.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.DrawEffect.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.DrawEffect.Scaler">
            <summary>
            Gets a shared <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageScaler"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.IImageEffect.SetInput(System.Int32,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets an input texture
            </summary>
            <param name="slot">The slot.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.IImageEffect.SetViewport(System.Nullable{SiliconStudio.Paradox.Graphics.Viewport})">
            <summary>
            Sets the viewport.
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.IImageEffect.SetOutput(SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets the render target output.
            </summary>
            <param name="view">The render target output view.</param>
            <exception cref="T:System.ArgumentNullException">view</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.IImageEffect.SetOutput(SiliconStudio.Paradox.Graphics.Texture[])">
            <summary>
            Sets the render target outputs.
            </summary>
            <param name="views">The render target output views.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageEffect"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageEffect"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.#ctor(SiliconStudio.Paradox.Rendering.RenderContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageEffect"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.SetInput(System.Int32,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets an input texture
            </summary>
            <param name="slot">The slot.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.Reset">
            <summary>
            Resets the state of this effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.SetOutput(SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets the render target output.
            </summary>
            <param name="view">The render target output view.</param>
            <exception cref="T:System.ArgumentNullException">view</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.SetOutput(SiliconStudio.Paradox.Graphics.Texture[])">
            <summary>
            Sets the render target outputs.
            </summary>
            <param name="views">The render target output views.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.SetViewport(System.Nullable{SiliconStudio.Paradox.Graphics.Viewport})">
            <summary>
            Sets the viewport to use .
            </summary>
            <param name="viewport">The viewport.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.SetRenderTargets">
            <summary>
            Set the render targets for the image effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.DisposeCreatedRenderTargetViews">
            <summary>
            Dispose the render target views that have been created.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.GetInput(System.Int32)">
            <summary>
            Gets an input texture by the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Texture.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.GetSafeInput(System.Int32)">
            <summary>
            Gets a non-null input texture by the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Texture.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.GetOutput(System.Int32)">
            <summary>
            Gets an output render target for the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>RenderTarget.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.GetSafeOutput(System.Int32)">
            <summary>
            Gets an non-null output render target for the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>RenderTarget.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.NewScopedRenderTarget2D(SiliconStudio.Paradox.Graphics.TextureDescription)">
            <summary>
            Gets a render target with the specified description, scoped for the duration of the <see cref="!:DrawEffect.DrawCore"/>.
            </summary>
            <returns>A new instance of texture.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.NewScopedRenderTarget2D(System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.TextureFlags,System.Int32)">
            <summary>
            Gets a render target output for the specified description with a single mipmap, scoped for the duration of the <see cref="!:DrawEffect.DrawCore"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of texture class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.NewScopedRenderTarget2D(System.Int32,System.Int32,SiliconStudio.Paradox.Graphics.PixelFormat,SiliconStudio.Paradox.Graphics.MipMapCount,SiliconStudio.Paradox.Graphics.TextureFlags,System.Int32)">
            <summary>
            Gets a render target output for the specified description, scoped for the duration of the <see cref="!:DrawEffect.DrawCore"/>.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">Describes the format to use.</param>
            <param name="mipCount">Number of mipmaps, set to true to have all mipmaps, set to an int &gt;=1 for a particular mipmap count.</param>
            <param name="flags">Sets the texture flags (for unordered access...etc.)</param>
            <param name="arraySize">Size of the texture 2D array, default to 1.</param>
            <returns>A new instance of texture class.</returns>
            <msdn-id>ff476521</msdn-id>
              <unmanaged>HRESULT ID3D11Device::CreateTexture2D([In] const D3D11_TEXTURE2D_DESC* pDesc,[In, Buffer, Optional] const D3D11_SUBRESOURCE_DATA* pInitialData,[Out, Fast] ID3D11Texture2D** ppTexture2D)</unmanaged>
              <unmanaged-short>ID3D11Device::CreateTexture2D</unmanaged-short>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageEffect.EnableSetRenderTargets">
            <summary>
            Gets or sets a boolean to enable GraphicsDevice.SetDepthAndRenderTargets from output. Default is <c>true</c>.
            </summary>
            <value>A boolean to enable GraphicsDevice.SetDepthAndRenderTargets from output. Default is <c>true</c></value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageEffect.InputCount">
            <summary>
            Gets the number of input textures.
            </summary>
            <value>The input count.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageEffect.OutputCount">
            <summary>
            Gets the number of output render target.
            </summary>
            <value>The output count.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollectionGroup">
            <summary>
            A list of <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection"/> for a particular type of light (direct light, direct light + shadows, environment lights).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollectionGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollectionGroup"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollectionGroup.FindLightCollectionByGroup(SiliconStudio.Paradox.Engine.EntityGroup)">
            <summary>
            Gets the light affecting a specific group.
            </summary>
            <param name="group">The group.</param>
            <returns>LightComponentCollection.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollectionGroup.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>LightComponentCollection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index [{0}] out of range [0, {1}].ToFormat(index, lights.Count - 1)</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollectionGroup.AllLights">
            <summary>
            Gets all the lights stored in this group.
            </summary>
            <value>All lights.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollectionGroup.AllLightsWithShadows">
            <summary>
            Gets the lights with shadows.
            </summary>
            <value>The lights with shadows.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollectionGroup.Count">
            <summary>
            Gets the number of <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection"/> stored in this group.
            </summary>
            <value>The number of <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection"/> stored in this group.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentRenderer">
            <summary>
            The main renderer for <see cref="T:SiliconStudio.Paradox.Engine.LightComponent"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.EntityComponentRendererBase">
            <summary>
            A default implementation for a <see cref="T:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.EntityComponentRendererCoreBase">
            <summary>
            A default implementation for a <see cref="T:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.IEntityComponentRendererCore">
            <summary>
            Base interface for the renderer of an <see cref="T:SiliconStudio.Paradox.Engine.EntityComponent"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.EntityComponentRendererCoreBase.Services">
            <summary>
            Gets the services.
            </summary>
            <value>The services.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.EntityComponentRendererCoreBase.SceneInstance">
            <summary>
            Gets the entity system.
            </summary>
            <value>The entity system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.EntityComponentRendererCoreBase.EffectSystem">
            <summary>
            Gets the effect system.
            </summary>
            <value>The effect system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.EntityComponentRendererCoreBase.SceneCameraRenderer">
            <summary>
            Gets the camera renderer (can be null).
            </summary>
            <value>The camera renderer.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.EntityComponentRendererCoreBase.CurrentRenderFrame">
            <summary>
            Gets the current render frame. Only valid from <see cref="M:SiliconStudio.Paradox.Rendering.RendererBase.DrawCore(SiliconStudio.Paradox.Rendering.RenderContext)"/> method.
            </summary>
            <value>The current render frame.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer">
            <summary>
            A component can be integrated into the rendering pipeline automatically if it defines 
            a <see cref="T:SiliconStudio.Paradox.Engine.Design.DefaultEntityComponentRendererAttribute"/> on its class definition.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer.Prepare(SiliconStudio.Paradox.Rendering.RenderContext,SiliconStudio.Paradox.Rendering.RenderItemCollection,SiliconStudio.Paradox.Rendering.RenderItemCollection)">
            <summary>
            Prepares a list of opaque and transparent <see cref="T:SiliconStudio.Paradox.Rendering.RenderItem"/>. See remarks.
            </summary>
            <param name="context">The context.</param>
            <param name="opaqueList">The opaque list.</param>
            <param name="transparentList">The transparent list.</param>
            <remarks>The implementation should fill the opaqueList and/or the transparentList of render items to render with a proper depth value</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer.Draw(SiliconStudio.Paradox.Rendering.RenderContext,SiliconStudio.Paradox.Rendering.RenderItemCollection,System.Int32,System.Int32)">
            <summary>
            Draws the specified list of <see cref="T:SiliconStudio.Paradox.Rendering.RenderItem"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="renderItems">The render items.</param>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer.SupportPicking">
            <summary>
            Gets the value indicating whether the picking is supported by this renderer or not.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.EntityComponentRendererBase.CurrentCullingMask">
            <summary>
            Gets the current culling mask.
            </summary>
            <value>The current culling mask.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentForwardRenderer">
            <summary>
            TODO: Refactor this class
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightComponentForwardRenderer.activeLightGroups">
            <summary>
            Gets the lights without shadow per light type.
            </summary>
            <value>The lights.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightComponentForwardRenderer.activeLightGroupsWithShadows">
            <summary>
            Gets the lights without shadow per light type.
            </summary>
            <value>The lights.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightComponentForwardRenderer.CollectVisibleLights">
            <summary>
            Collects the visible lights by intersecting them with the frustum.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentForwardRenderer.LightForwardShaderEntryKey">
            <summary>
            We expect this class to be 
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap">
            <summary>
            A directional shadow map.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap">
            <summary>
            Base class for a shadow map.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.ILightShadow">
            <summary>
            Interface for the shadow of a light.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.ILightShadow.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Rendering.Lights.ILightShadow"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <userdoc>If checked, display the shadow of the engendered by the light.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.Filter">
            <summary>
            Gets or sets the shadow map filtering.
            </summary>
            <value>The filter type.</value>
            <userdoc>The type of filter to apply onto the shadow.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.Size">
            <summary>
            Gets or sets the size of the shadow-map.
            </summary>
            <value>The size.</value>
            <userdoc>The size of texture to use for shadow mapping. Large textures produces better shadows edges but are much more costly.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.Importance">
            <summary>
            Gets the importance of the shadow. See remarks.
            </summary>
            <value>The shadow importance.</value>
            <returns>System.Single.</returns>
            <remarks>The higher the importance is, the higher the cost of shadow computation is costly</remarks>
            <userdoc>The importance (intensity) of the shadow. The higher the importance is, the higher the cost of shadow computation is costly</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.BiasParameters">
            <summary>
            Gets the bias parameters.
            </summary>
            <value>The bias parameters.</value>
            <userdoc>Offset values to add during to the depth calculation process of the shadow map.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.Debug">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap"/> is debug.
            </summary>
            <value><c>true</c> if debug; otherwise, <c>false</c>.</value>
            <userdoc>If checked, render the shadow map in debug mode.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters">
            <summary>
            Bias parameters used for shadow map.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters.DepthBias">
            <summary>
            Gets or sets the depth bias used for shadow map comparison.
            </summary>
            <value>The bias.</value>
            <userdoc>An absolute value to add to the calculated depth.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters.NormalOffsetScale">
            <summary>
            Gets or sets the offset scale in world space unit along the surface normal.
            </summary>
            <value>The offset scale.</value>
            <userdoc>A factor specifying the offset to add to the calculated depth with respect to the surface normal.</userdoc>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMap"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.CascadeCount">
            <summary>
            Gets or Sets the number of cascades for this shadow (valid only for directional lights)
            </summary>
            <value>The number of cascades for this shadow.</value>
            <userdoc>The number of cascades for the shadows.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.StabilizationMode">
            <summary>
            Gets or Sets the stabilization mode of the shadow map
            </summary>
            <userdoc>The technique used to stabilize the shadow map</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRange">
            <summary>
            Gets or sets the depth range mode.
            </summary>
            <value>The depth range mode.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.PartitionMode">
            <summary>
            Gets or sets the partition mode.
            </summary>
            <value>The partition mode.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.PartitionModeBase">
            <summary>
            Base class for the partition mode.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.PartitionManual">
            <summary>
            Manual partition. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.PartitionManual.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:LightDirectionalManualPartitionMode"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.PartitionLogarithmic">
            <summary>
            Logarithmic and PSSM partition. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.PartitionLogarithmic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.PartitionLogarithmic"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.PartitionLogarithmic.PSSMFactor">
            <summary>
            Gets or sets the PSSM factor (0.0f is full logarithmic, 1.0f is full PSSM).
            </summary>
            <value>The PSSM factor.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters">
            <summary>
            The depth range is set manually. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.DefaultMinDistance">
            <summary>
            The default minimum distance
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.DefaultGuardDistance">
            <summary>
            The default guard distance for the auto mode.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.DefaultMaxDistance">
            <summary>
            The default maximum distance
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.IsAutomatic">
            <summary>
            Gets or sets a value indicating whether this instance is automatic.
            </summary>
            <value><c>true</c> if this instance is automatic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.GuardDistance">
            <summary>
            Gets or sets the guard distance.
            </summary>
            <value>The guard distance.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.ManualMinDistance">
            <summary>
            Gets or sets the minimum distance in world space unit.
            </summary>
            <value>The minimum distance.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.ManualMaxDistance">
            <summary>
            Gets or sets the maximum distance in world space unit.
            </summary>
            <value>The maximum distance.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightDirectionalShadowMap.DepthRangeParameters.IsBlendingCascades">
            <summary>
            Gets or sets a value indicating whether this instance is filtering accross cascades.
            </summary>
            <value><c>true</c> if this instance is filtering accross cascades; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapStabilizationMode">
            <summary>
            The stabilization mode used for the shadow maps.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapStabilizationMode.None">
            <summary>
            No stabilization is performed.
            </summary>
            <userdoc>No stabilization is performed.</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapStabilizationMode.ProjectionSnapping">
            <summary>
            The light projection is snapped to the closest pixel according to the size of the shadow map. This will decrease filtering but lower the quality of the shadow map (more than <see cref="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapStabilizationMode.None"/>).
            </summary>
            <userdoc>The light projection is snapped to the closest pixel according to the size of the shadow map. This will decrease filtering but lower the quality of the shadow map (more than <see cref="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapStabilizationMode.None"/>)</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapStabilizationMode.ViewSnapping">
            <summary>
            The light target view is snapped according to the size of the shadow map. Gives better results but decrease the quality of the shadow map (more than <see cref="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapStabilizationMode.ProjectionSnapping"/>).
            </summary>
            <userdoc>The light target view is snapped according to the size of the shadow map. Gives better results but decrease the quality of the shadow map (more than <see cref="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapStabilizationMode.ProjectionSnapping"/>).</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightStandardShadowMap">
            <summary>
            A standard shadow map.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.MaterialInstance">
            <summary>
            A <see cref="P:SiliconStudio.Paradox.Rendering.MaterialInstance.Material"/> instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.MaterialInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.MaterialInstance"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.MaterialInstance.#ctor(SiliconStudio.Paradox.Rendering.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.MaterialInstance"/> class.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.MaterialInstance.op_Implicit(SiliconStudio.Paradox.Rendering.Material)~SiliconStudio.Paradox.Rendering.MaterialInstance">
            <summary>
            Performs an explicit conversion from <see cref="P:SiliconStudio.Paradox.Rendering.MaterialInstance.Material"/> to <see cref="T:SiliconStudio.Paradox.Rendering.MaterialInstance"/>.
            </summary>
            <param name="material">The material.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.MaterialInstance.Material">
            <summary>
            Gets or sets the material.
            </summary>
            <value>The material.</value>
            <userdoc>The reference to the material asset to used for this material slot name.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.MaterialInstance.IsShadowCaster">
            <summary>
            Gets or sets if this instance is casting shadows.
            </summary>
            <value>A boolean indicating whether this instance is casting shadows. Default is <c>true</c>.</value>
            <userdoc>If checked, the model generates a shadow when enabling shadow maps.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.MaterialInstance.IsShadowReceiver">
            <summary>
            Gets or sets if this instance is receiving shadows.
            </summary>
            <value>A boolean indicating whether this instance is receiving shadows. Default is <c>true</c>.</value>
            <userdoc>If checked, the model can be covered by the shadow of another model.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator">
            <summary>
            Operands of the MaterialNode.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Add">
            <summary>
            Add of the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Average">
            <summary>
            Average of the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Color">
            <summary>
            Color effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.ColorBurn">
            <summary>
            Color burn effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.ColorDodge">
            <summary>
            Color dodge effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Darken">
            <summary>
            Darken effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Desaturate">
            <summary>
            Desaturate effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Difference">
            <summary>
            Difference of the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Divide">
            <summary>
            Divide first texture with the second one.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Exclusion">
            <summary>
            Exclusion effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.HardLight">
            <summary>
            Hard light effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.HardMix">
            <summary>
            hard mix effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Hue">
            <summary>
            Hue effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Illuminate">
            <summary>
            Illuminate effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.In">
            <summary>
            In effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Lighten">
            <summary>
            Lighten effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.LinearBurn">
            <summary>
            Linear burn effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.LinearDodge">
            <summary>
            Linear dodge effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Mask">
            <summary>
            Apply mask from second texture to the first one.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Multiply">
            <summary>
            Multiply the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Out">
            <summary>
            Out effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Over">
            <summary>
            Over effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Overlay">
            <summary>
            Overlay effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.PinLight">
            <summary>
            Pin light effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Saturate">
            <summary>
            Saturate effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Saturation">
            <summary>
            Saturation effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Screen">
            <summary>
            Screen effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.SoftLight">
            <summary>
            Soft light effect from the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.Subtract">
            <summary>
            Subtract the two textures.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator.SubstituteAlpha">
            <summary>
            Take color for the first texture but alpha from the second
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.DynamicEffectParameterUpdaterDefinition">
            <summary>
            Used to detect parameters change for dynamic effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Shadows.ILightShadowRenderer.Reset">
            <summary>
            Reset the state of this instance before calling Render method multiple times for different shadow map textures. See remarks.
            </summary>
            <remarks>
            This method allows the implementation to prepare some internal states before being rendered.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Shadows.ILightShadowMapRenderer">
            <summary>
            Interface to render a shadow map.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Shadows.LightSpotShadowMapRenderer">
            <summary>
            Renders a shadow map from a directional light.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Shadows.LightSpotShadowMapRenderer.VectorUps">
            <summary>
            The various UP vectors to try.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Shadows.LightSpotShadowMapRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Shadows.LightSpotShadowMapRenderer"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Shadows.LightSpotShadowMapRenderer.LightSpotShadowMapGroupShaderData.#ctor(System.String,SiliconStudio.Paradox.Rendering.Shadows.LightShadowType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Shadows.LightSpotShadowMapRenderer.LightSpotShadowMapGroupShaderData"/> class.
            </summary>
            <param name="compositionKey">The composition key.</param>
            <param name="shadowType">Type of the shadow.</param>
            <param name="lightCountMax">The light count maximum.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Shadows.LightDirectionalShadowMapRenderer">
            <summary>
            Renders a shadow map from a directional light.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Shadows.LightDirectionalShadowMapRenderer.VectorUps">
            <summary>
            The various UP vectors to try.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Shadows.LightDirectionalShadowMapRenderer.FrustumBasePoints">
            <summary>
            Base points for frustum corners.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Shadows.LightDirectionalShadowMapRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Shadows.LightDirectionalShadowMapRenderer"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Shadows.LightDirectionalShadowMapRenderer.LightDirectionalShadowMapGroupShaderData.#ctor(System.String,SiliconStudio.Paradox.Rendering.Shadows.LightShadowType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Shadows.LightDirectionalShadowMapRenderer.LightDirectionalShadowMapGroupShaderData"/> class.
            </summary>
            <param name="compositionKey">The composition key.</param>
            <param name="shadowType">Type of the shadow.</param>
            <param name="lightCountMax">The light count maximum.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Shadows.LightShadowMapTexture">
            <summary>
            An allocated shadow map texture associated to a light.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Shadows.LightShadowMapTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Shadows.LightShadowMapTexture"/> struct.
            </summary>
            <param name="lightComponent">The light component.</param>
            <param name="light">The light component.</param>
            <param name="shadowMap">The light.</param>
            <param name="size">The shadow map.</param>
            <param name="renderer">The renderer.</param>
            <exception cref="T:System.ArgumentNullException">
            lightComponent
            or
            light
            or
            shadowMap
            or
            renderer
            </exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Shadows.ShadowMapAtlasTexture">
            <summary>
            An atlas of shadow maps.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Shadows.ShadowMapRenderer">
            <summary>
            Handles rendering of shadow map casters.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Shadows.ShadowMapRenderer.ShadowMapCasterExtension">
            <summary>
            The shadow map caster extension a discard extension
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Shadows.ShadowMapRenderer.ShadowCamera">
            <summary>
            The shadow camera used for rendering from the shadow space.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Shadows.ShadowMapRenderer.Draw(SiliconStudio.Paradox.Rendering.RenderContext,System.Collections.Generic.List{SiliconStudio.Paradox.Engine.LightComponent})">
            <summary>
            Draws the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="visibleLights">The visible lights.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Shadows.ShadowMapRenderer.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
            <value>The camera.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.VirtualResolutionMode">
            <summary>
            Enumerates the different ways to interpret a visual resolution value.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.VirtualResolutionMode.FixedWidthFixedHeight">
            <summary>
            The resolution is determined by the width, height and depth of the field.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.VirtualResolutionMode.FixedWidthAdaptableHeight">
            <summary>
            The resolution is determined by the width, the ratio of the target, and the depth.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.VirtualResolutionMode.FixedHeightAdaptableWidth">
            <summary>
            The resolution is determined by the height, the ratio of the target, and the depth.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.Afterimage">
            <summary>
            Afterimage simulates the persistence of the bright areas on the retina. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.Afterimage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.Afterimage"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.Afterimage.FadeOutSpeed">
            <summary>
            How fast the persistent image fades out. 
            </summary>
            <userdoc>The factor specifying how much the persistence decreases at each frame (1 means infinite persistence, while 0 means no persistence at all)</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.Afterimage.Sensitivity">
            <summary>
            How sensitive we are to the bright light.
            </summary>
            <userdoc>The sensitiveness of the retina to bright light. This affects the time needed to produce persistence effect.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.RenderModelCollection">
            <summary>
            A collection of <see cref="T:SiliconStudio.Paradox.Rendering.RenderModel"/> for a specific <see cref="T:SiliconStudio.Paradox.Engine.EntityGroup"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.RenderModelCollection.#ctor(SiliconStudio.Paradox.Engine.EntityGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Processors.RenderModelCollection"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Processors.RenderModelCollection.Group">
            <summary>
            Gets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.CameraProcessor">
            <summary>
            The processor for <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.CameraProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Processors.CameraProcessor"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Processors.CameraProcessor.Cameras">
            <summary>
            Gets the current models to render.
            </summary>
            <value>The current models to render.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.CameraProjectionMode">
            <summary>
            Projection of a <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Processors.CameraProjectionMode.Perspective">
            <summary>
            A perspective projection.
            </summary>
            <userdoc>A perspective projection (usually used for 3D games).</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Processors.CameraProjectionMode.Orthographic">
            <summary>
            An orthographic projection.
            </summary>
            <userdoc>An orthographic projection (usually used for 2D games).</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlot">
            <summary>
            A camera slot used by <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsCompositorLayers"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlot"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlot.#ctor(SiliconStudio.Paradox.Engine.CameraComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlot"/> class.
            </summary>
            <param name="camera">The camera.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlot.op_Implicit(SiliconStudio.Paradox.Engine.CameraComponent)~SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlot">
            <summary>
            Performs an implicit conversion from <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/> to <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlot"/>.
            </summary>
            <param name="camera">The camera.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlot.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotCollection">
            <summary>
            A collection of <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotCollection.Current">
            <summary>
            Property key to access the current collection of <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/> from <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotCollection.GetCamera(SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex)">
            <summary>
            Gets the camera for the specified slotIndex or null if empty
            </summary>
            <param name="cameraSlotIndex">The camera slotIndex.</param>
            <returns>SiliconStudio.Paradox.Engine.CameraComponent.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotCollection.GetCurrent(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Gets the current camera collection setup in the <see cref="T:SiliconStudio.Paradox.Rendering.RenderContext"/>.
            </summary>
            <param name="context">The context.</param>
            <returns>SceneCameraSlotCollection.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex">
            <summary>
            Identifies a camera slotIndex in a scene composition.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex"/> struct.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex.op_Implicit(SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="slotIndex">The slotIndex.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex.op_Implicit(System.Int32)~SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex"/>.
            </summary>
            <param name="index">The index.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Composers.SceneCameraSlotIndex.Index">
            <summary>
            Index of the camera in <see cref="P:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsCompositorLayers.Cameras"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.EntityComponentRendererBatch">
            <summary>
            A dedicated batch renderer of <see cref="T:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.GraphicsRendererCollectionBase`1">
            <summary>
            A collection of <see cref="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer"/> that is itself a <see cref="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer"/> handling automatically
            <see cref="!:IGraphicsRenderer.Initialize"/> and <see cref="!:IGraphicsRenderer.Unload"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer"/></typeparam>.
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.GraphicsRendererCollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.GraphicsRendererCollection`1"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.EntityComponentRendererBatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.GraphicsRendererCollection`1"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ColorTransform">
            <summary>
            Base class for a <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase"/> to be used in a <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase">
            <summary>
            Base class for a <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase"/> used by <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransform"/> and <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMapOperator"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase"/> class.
            </summary>
            <param name="colorTransformShader">Name of the shader.</param>
            <exception cref="T:System.ArgumentNullException">shaderName</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase.UpdateParameters(SiliconStudio.Paradox.Rendering.Images.ColorTransformContext)">
            <summary>
            Updates the parameters for this transformation.
            </summary>
            <param name="context">The context.</param>
            <remarks>This method is called just before rendering the ColorTransformGroup that is holding this ColorTransformBase</remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase.Shader">
            <summary>
            Gets or sets the name of the shader.
            </summary>
            <value>The name of the shader.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.FilmGrain.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.FilmGrain"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.FilmGrain.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.FilmGrain"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.FilmGrain.Amount">
            <summary>
            Amount of grain.
            </summary>
            <userdoc>The strength of the effect</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.FilmGrain.GrainSize">
            <summary>
            Grain size.
            </summary>
            <userdoc>The size of the grains (in pixels)</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.FilmGrain.Animate">
            <summary>
            Animates the film grain.
            </summary>
            <userdoc>When checked, the procedural pattern changes at each frame.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.FilmGrain.LuminanceFactor">
            <summary>
            How the luminance influences the amount of grain.
            </summary>
            <userdoc>Specifies how strongly the original pixel luminance is affected by the grain pattern.</userdoc>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.Vignetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.Vignetting"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.Vignetting.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.Vignetting"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.Vignetting.Amount">
            <summary>
            Amount of vignetting (alpha of the halo).
            </summary>
            <userdoc>The strength of the effect</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.Vignetting.Radius">
            <summary>
            Radius from the center, from which vignetting begins. 
            </summary>
            <userdoc>The radius of the vignette from the center of the screen. This value is relative to the size of the screen (1 => half screen, 0 => null radius).</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.Vignetting.Color">
            <summary>
            Color of the vignetting halo.
            </summary>
            <userdoc>The color of the vignette.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ISceneRendererViewport">
            <summary>
            Interface of an <see cref="T:SiliconStudio.Paradox.Rendering.ISceneRenderer"/> that supports a viewport.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ISceneRenderer">
            <summary>
            Interface for a scene graphics renderer
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ISceneRenderer.Output">
            <summary>
            Gets or sets the output of this effect
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ISceneRendererViewport.Viewport">
            <summary>
            Gets or sets the viewport in percentage or pixel.
            </summary>
            <value>The viewport in percentage or pixel.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ISceneRendererViewport.IsViewportInPercentage">
            <summary>
            Gets or sets a value indicating whether the viewport is in fixed pixels instead of percentage.
            </summary>
            <value><c>true</c> if the viewport is in pixels instead of percentage; otherwise, <c>false</c>.</value>
            <userdoc>When this value is true, the Viewport size is a percentage (0-100) calculated relatively to the size of the Output, else it is a fixed size in pixels.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.ColorLightBase">
            <summary>
            Base implementation of <see cref="T:SiliconStudio.Paradox.Rendering.Lights.IColorLight"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.IColorLight">
            <summary>
            Base interface for a light with a color
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.ILight">
            <summary>
            Base interface for all lights.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.IColorLight.ComputeColor(System.Single)">
            <summary>
            Computes the color.
            </summary>
            <param name="intensity">The intensity.</param>
            <returns>Color3.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.IColorLight.Color">
            <summary>
            Gets or sets the light color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.ColorLightBase.ComputeColor(System.Single)">
            <summary>
            Computes the color with intensity, result is in linear space.
            </summary>
            <returns>Gets the color of this light in linear space.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.ColorLightBase.Color">
            <summary>
            Gets or sets the light color.
            </summary>
            <value>The color.</value>
            <userdoc>The color emitted by the light.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.DirectLightBase">
            <summary>
            Base implementation of <see cref="T:SiliconStudio.Paradox.Rendering.Lights.IDirectLight"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.IDirectLight">
            <summary>
            Base interface for all direct lights.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.IDirectLight.ComputeBounds(SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Computes the bounds of this light..
            </summary>
            <param name="position">The position.</param>
            <param name="direction">The direction.</param>
            <returns>BoundingBox.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.IDirectLight.ComputeScreenCoverage(SiliconStudio.Paradox.Rendering.RenderContext,SiliconStudio.Core.Mathematics.Vector3,SiliconStudio.Core.Mathematics.Vector3)">
            <summary>
            Computes the screen coverage of this light in pixel.
            </summary>
            <param name="context">The context.</param>
            <param name="position">The position of the light in world space.</param>
            <param name="direction">The direction of the light in world space.</param>
            <returns>The largest screen coverage width or height size in pixels of this light.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.IDirectLight.Shadow">
            <summary>
            Gets or sets the shadow.
            </summary>
            <value>The shadow.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.IDirectLight.HasBoundingBox">
            <summary>
            Gets a value indicating whether this instance has a bounding box.
            </summary>
            <value><c>true</c> if this instance has a bounding box; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.DirectLightBase.Shadow">
            <summary>
            Gets or sets the shadow.
            </summary>
            <value>The shadow.</value>
            <userdoc>The settings of the light shadow</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.ILightShadowMapFilterType">
            <summary>
            Common interface of a shadowmap filter.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightAmbientRenderer">
            <summary>
            Light renderer for <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightAmbient"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightPoint">
            <summary>
            A point light.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightPoint"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightPoint.Radius">
            <summary>
            Gets or sets the radius of influence of this light.
            </summary>
            <value>The range.</value>
            <userdoc>The radius range of the point light in scene units.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapCascadeCount">
            <summary>
            Number of cascades used for a shadow map.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapCascadeCount.OneCascade">
            <summary>
            A shadow map with one cascade.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapCascadeCount.TwoCascades">
            <summary>
            A shadow map with two cascades.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapCascadeCount.FourCascades">
            <summary>
            A shadow map with four cascades.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapFilterTypePcf">
            <summary>
            No shadowmap filter.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapFilterTypePcf.FilterSize">
            <summary>
            Gets or sets the size of the filter.
            </summary>
            <value>The size of the filter.</value>
            <userdoc>The size of the filter (size of the kernel).</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapSize">
            <summary>
            Size hint of a shadow map. See remarks.
            </summary>
            <remarks>This is a hint to determine the size of a shadow map</remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapSize.Small">
            <summary>
            Use a small size.
            </summary>
            <userodc>A small shadow map</userodc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapSize.Medium">
            <summary>
            Use a medium size.
            </summary>
            <userodc>A medium shadow map</userodc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowMapSize.Large">
            <summary>
            Use a large size.
            </summary>
            <userodc>A large shadow map</userodc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.DisplacementMapStage">
            <summary>
            Enumerates the different shader stages in which a displacement map can be applied.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.DisplacementMapStage.Vertex">
            <summary>
            The vertex shader
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.DisplacementMapStage.Domain">
            <summary>
            The domain shader
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialDescriptor">
            <summary>
            Common interface for the description of a material.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.IMaterialDescriptor.Attributes">
            <summary>
            Gets or sets the material attributes.
            </summary>
            <value>The material attributes.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.IMaterialDescriptor.Layers">
            <summary>
            Gets or sets the material compositor.
            </summary>
            <value>The material compositor.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDisplacementMapFeature">
            <summary>
            The displacement map for a surface material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialDisplacementFeature">
            <summary>
            Base interface for a displacement material feature.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialDisplacementMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDisplacementMapFeature"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialDisplacementMapFeature.#ctor(SiliconStudio.Paradox.Rendering.Materials.IComputeScalar)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDisplacementMapFeature"/> class.
            </summary>
            <param name="displacementMap">The displacement map.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialDisplacementMapFeature.DisplacementMap">
            <summary>
            Gets or sets the displacement map.
            </summary>
            <value>The displacement map.</value>
            <userdoc>
            The map containing the displacement offsets to apply onto the model vertex positions.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialDisplacementMapFeature.Intensity">
            <summary>
            Gets or sets the displacement map.
            </summary>
            <value>The displacement map.</value>
            <userdoc>
            The intensity factor of the displacement. This scales the offset introduced by displacement map.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialDisplacementMapFeature.ScaleAndBias">
            <summary>
            Gets or sets a value indicating whether to scale by (2,2,2) and bias by (-1,-1,-1) the displacement map.
            </summary>
            <value><c>true</c> if scale and bias this displacement map; otherwise, <c>false</c>.</value>
            <userdoc>
            Scale by (2,2,2) and bias by (-1,-1,-1) this displacement map.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialDisplacementMapFeature.Stage">
            <summary>
            Gets or sets a value indicating in which stage the displacement should occur.
            </summary>
            <userdoc>
            The value indicating in which stage the displacement will occur.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialShaderStage">
            <summary>
            Enumerates the different possible material shader stages.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialShaderStage.Vertex">
            <summary>
            The vertex shader
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialShaderStage.Domain">
            <summary>
            The domain shader
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialShaderStage.Pixel">
            <summary>
            The pixel shader
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialTessellationBaseFeature">
            <summary>
            The displacement map for a surface material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialTessellationFeature">
            <summary>
            Base interface for a tessellation material feature.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialTessellationBaseFeature.TriangleSize">
            <summary>
            Gets or sets the desired triangle size.
            </summary>
            <userdoc>
            The desired triangles' size in pixels. This drives the tessellation factor.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialTessellationBaseFeature.AdjacentEdgeAverage">
            <summary>
            Gets or sets the adjacent edges average activation state.
            </summary>
            <userdoc>
            Indicate if average should be performed on adjacent edges to prevent tessellation cracks.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialTessellationFlatFeature">
            <summary>
            Material for flat (dicing) tessellation.    
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialTessellationPNFeature">
            <summary>
            Material for Point-Normal tessellation.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyAdditiveFeature">
            <summary>
            A transparent additive material.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyAdditiveFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyAdditiveFeature"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyAdditiveFeature.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
            <userdoc>The factor used to modulate alpha of the material. See documentation for more details.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyAdditiveFeature.Tint">
            <summary>
            Gets or sets the tint color.
            </summary>
            <value>The tint.</value>
            <userdoc>The tint color to apply on the material during the blend.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyCutoffFeature">
            <summary>
            A transparent cutoff material.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyCutoffFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyCutoffFeature"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialTransparencyCutoffFeature.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
            <userdoc>The alpha threshold of the cutoff. All alpha values above this threshold are considered as fully transparent.
            All alpha values under this threshold are considered as fully opaque.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ParadoxTessellationMethod">
            <summary>
            Describe the different tessellation methods used in Paradox.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ParadoxTessellationMethod.None">
            <summary>
            No tessellation
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ParadoxTessellationMethod.Flat">
            <summary>
            Flat tessellation. Also known as dicing tessellation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ParadoxTessellationMethod.PointNormal">
            <summary>
            Point normal tessellation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ParadoxTessellationMethod.AdjacentEdgeAverage">
            <summary>
            Adjacent edge average.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.EntityComponentRendererTypeCollection">
            <summary>
            A collection of <see cref="T:SiliconStudio.Paradox.Engine.Design.EntityComponentRendererType"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.EntityTransformExtensions">
            <summary>
            Extensions for <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> and the <see cref="T:SiliconStudio.Paradox.Engine.TransformComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityTransformExtensions.AddChild``1(``0,SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Adds a child Entity to the transform component of a parent Entity.
            </summary>
            <typeparam name="T">Type of the parent Entity receiving the child.</typeparam>
            <param name="parentEntity">The parent Entity.</param>
            <param name="childEntity">The child parent Entity.</param>
            <returns>The this instance.</returns>
            <exception cref="T:System.ArgumentNullException">childEntity</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityTransformExtensions.RemoveChild``1(``0,SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Removes a child Entity to the transform component of a parent Entity. Note that the child entity is still in the <see cref="T:SiliconStudio.Paradox.Engine.SceneInstance"/>.
            In order to remove it from the scene instance, you should call <see cref="!:SceneInstance.Remove"/>
            </summary>
            <typeparam name="T">Type of the parent Entity to remove the child from.</typeparam>
            <param name="parentEntity">The parent Entity.</param>
            <param name="childEntity">The child Entity.</param>
            <returns>The this instance.</returns>
            <exception cref="T:System.ArgumentNullException">childEntity</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.RenderFrameRelativeMode">
            <summary>
            Specifies which <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> to use when creating the output of <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer"/> and 
            the size mode defined by <see cref="P:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor.Mode"/> is <see cref="F:SiliconStudio.Paradox.Rendering.RenderFrameSizeMode.Relative"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Composers.RenderFrameRelativeMode.Current">
            <summary>
            The size of the <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> is calculated relatively to the current frame.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Composers.RenderFrameRelativeMode.Master">
            <summary>
            The size of the <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> is calculated relatively to the master frame.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ComputeEffect.ComputeEffectShader">
            <summary>
            A compute effect based directly on a single compute shader.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ComputeEffect.ComputeEffectShader.EffectInstance">
            <summary>
            The current effect instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ComputeEffect.ComputeEffectShader.SetDefaultParameters">
            <summary>
            Sets the default parameters (called at constructor time and if <see cref="M:SiliconStudio.Paradox.Rendering.DrawEffect.Reset"/> is called)
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ComputeEffect.ComputeEffectShader.UpdateParameters">
            <summary>
            Updates the effect <see cref="!:ComputeEffectShader.Parameters"/> from properties defined in this instance. See remarks.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.ComputeEffectShader.ThreadGroupCounts">
            <summary>
            Gets or sets the number of group counts the shader should be dispatched to.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.ComputeEffectShader.ThreadNumbers">
            <summary>
            Gets or sets the number of threads desired by thread group.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.ComputeEffectShader.ShaderSourceName">
            <summary>
            Gets or sets the name of the input compute shader file (.pdxsl)
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.ComputeEffectShader.ParameterCollections">
            <summary>
            Gets the parameter collections used by this effect.
            </summary>
            <value>The parameter collections.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX">
            <summary>
            A class for radiance pre-filtering using the GGX distribution function.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.#ctor(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Create a new instance of the class.
            </summary>
            <param name="context">the context</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.DoNotFilterHighestLevel">
            <summary>
            Gets or sets the boolean indicating if the highest level of mipmaps should be let as-is or pre-filtered.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.RadianceMap">
            <summary>
            Gets or sets the input radiance map to pre-filter.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.PrefilteredRadiance">
            <summary>
            Gets or sets the texture to use to store the result of the pre-filtering.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.MipmapGenerationCount">
            <summary>
            Gets or sets the number of pre-filtered mipmap to generate.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.GGXPrefiltering.RadiancePrefilteringGGX.SamplingsCount">
            <summary>
            Gets or sets the number of sampling used during the importance sampling
            </summary>
            <remarks>Should be a power of 2 and maximum value is 1024</remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSH">
            <summary>
            Performs Lambertian pre-filtering in the form of Spherical Harmonics.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSH.HarmonicOrder">
            <summary>
            Gets or sets the level of precision desired when calculating the spherical harmonics.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSH.PrefilteredLambertianSH">
            <summary>
            Gets the computed spherical harmonics corresponding to the pre-filtered lambertian.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ComputeEffect.LambertianPrefiltering.LambertianPrefilteringSH.RadianceMap">
            <summary>
            Gets or sets the input radiance map to pre-filter.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.GraphicsRendererCollection`1">
            <summary>
            A collection of <see cref="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer"/> that is itself a <see cref="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer"/> handling automatically
            <see cref="!:IGraphicsRenderer.Initialize"/> and <see cref="!:IGraphicsRenderer.Unload"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer"/></typeparam>.
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.IImageEffectRenderer">
            <summary>
            Renderer interface for a end-user <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageEffect"/> accessible from <see cref="T:SiliconStudio.Paradox.Rendering.SceneEffectRenderer"/>. See remarks.
            </summary>
            <remarks>
            An <see cref="T:SiliconStudio.Paradox.Rendering.IImageEffectRenderer"/> expect an input texture on slot 0, possibly a depth texture on slot 1 and a single
            output.
            </remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.FlareArtifactKeys">
            <summary>
            Keys used by <see cref="!:FlareArtifact"/> and FlareArtifactEffect pdxfx.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.LensFlare">
            <summary>
            Applies some lens-flare effect to an image. 
            This takes in input a bright-pass buffer, calculates the lens-flares and blends them 
            additively to the specified output.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.LensFlare.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.LensFlare"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LensFlare.Amount">
            <summary>
            Amount of light streak (intensity).
            </summary>
            <userdoc>The strength of the effect</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LensFlare.ColorAberrationStrength">
            <summary>
            Strength of the color aberration.
            </summary>
            <userdoc>The strength of the color aberrations happening along the streaks and the halo.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LensFlare.ZoomOffsetsDistortions">
            <summary>
            Defines the offsets (through zooming), and the distortion factor of each tap.
            A distortion factor > 0 will stretch in a circular way around the center (fisheye-like); 
            in [-1, 0] it will stretch the texture towards the center. 
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LensFlare.ColorAberrations">
            <summary>
            Modulate the RGB color of each tap.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LensFlare.HaloFactor">
            <summary>
            Halo factor when the camera is pointing exactly at a light source.
            </summary>
            <userdoc>Specifies the intensity of halo effect.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.LightStreak">
            <summary>
            Applies some light-streaks effect to an image.
            This takes in input a bright-pass buffer, calculates the light-streaks and blends them 
            additively to the specified output.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.LightStreak.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.LightStreak"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.Amount">
            <summary>
            Amount of light streak (intensity).
            </summary>
            <userdoc>The strength of the bleeding.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.StreakCount">
            <summary>
            Number of light streaks.
            </summary>
            <userdoc>The number of beams emitted by each bright points</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.IterationCount">
            <summary>
            Number of stretching iterations to apply. 
            </summary>
            <remarks>
            Each iteration rises the length of the light streak to the next power of <see cref="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.TapsPerIteration"/>.
            </remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.TapsPerIteration">
            <summary>
            Number of texture taps for each iteration of light streak extension.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.Attenuation">
            <summary>
            How fast the attenuation is along a streak. (Affects the streak length.)
            </summary>
            <userdoc>Specifies how fast the light attenuates along a streak. (0 for immediate attenuation, 1 for no attenuation)</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.Phase">
            <summary>
            Phase angle for the streaks, in degrees.
            </summary>
            <userdoc>Specifies the angle (rotation) of the star-like pattern.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.ColorAberrationCoefficients">
            <summary>
            RGB coefficients to apply for color aberration along a streak.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.ColorAberrationStrength">
            <summary>
            Strength of the color aberration.
            </summary>
            <userdoc>The strength of the color aberrations visible along the streak.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.IsAnamorphic">
            <summary>
            Applies an anamorphic effect to the streak.
            </summary>
            <userdoc>When enabled, it simulates the behavior of anamorphic camera lenses</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LightStreak.AnamorphicOffsetsWeights">
            <summary>
            For each light streak, you can define some sub-light-streaks drawn at a certain 
            offset of the original streak, with a certain weight.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.LightStreakKeys">
            <summary>
            Keys used by <see cref="T:SiliconStudio.Paradox.Rendering.Images.LightStreak"/> and LightStreakEffect pdxfx.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.IScreenSpaceAntiAliasingEffect">
            <summary>
            Common interface for a screen-space anti-aliasing effect
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderFrameProviderExtensions">
            <summary>
            Extensions for <see cref="T:SiliconStudio.Paradox.Rendering.IRenderFrameProvider"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrameProviderExtensions.GetSafeRenderFrame(SiliconStudio.Paradox.Rendering.IRenderFrameProvider,SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Gets a render frame handling null <see cref="T:SiliconStudio.Paradox.Rendering.IRenderFrameProvider"/>.
            </summary>
            <param name="renderFrameProvider">The render frame provider.</param>
            <param name="context">The context.</param>
            <returns>RenderFrame or null if IRenderFrameProvider is null.</returns>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1">
            <summary>
            A node that describe a binary operation between two <see cref="T:SiliconStudio.Paradox.Rendering.Materials.IComputeNode"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeNode">
            <summary>
            Base interface for all computer color nodes.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IComputeNode">
            <summary>
            Base interface for all <see cref="T:SiliconStudio.Paradox.Rendering.Materials.IComputeNode"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.IComputeNode.GetChildren(System.Object)">
            <summary>
            Gets the children.
            </summary>
            <param name="context">The context to get the children.</param>
            <returns>The list of children.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.IComputeNode.GenerateShaderSource(SiliconStudio.Paradox.Rendering.Materials.MaterialGeneratorContext,SiliconStudio.Paradox.Rendering.Materials.MaterialComputeColorKeys)">
            <summary>
            Generates the shader source equivalent for this node
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeNode"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeNode.GetChildren(System.Object)">
            <summary>
            Gets the children.
            </summary>
            <param name="context">The context to get the children.</param>
            <returns>The list of children.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeNode.GenerateShaderSource(SiliconStudio.Paradox.Rendering.Materials.MaterialGeneratorContext,SiliconStudio.Paradox.Rendering.Materials.MaterialComputeColorKeys)">
            <summary>
            Generates the shader source equivalent for this node
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.#ctor(`0,`0,SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1"/> class.
            </summary>
            <param name="leftChild">The left child.</param>
            <param name="rightChild">The right child.</param>
            <param name="binaryOperator">The material binary operand.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.GetChildren(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.GetCorrespondingShaderSourceName(SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator)">
            <summary>
            Get the name of the ShaderClassSource corresponding to the operation
            </summary>
            <param name="binaryOperand">The operand.</param>
            <returns>The name of the ShaderClassSource.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.Operator">
            <summary>
            The operation to blend the nodes.
            </summary>
            <userdoc>
            The operation between the left (background) and the right (foreground) sub-nodes.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.LeftChild">
            <summary>
            The left (background) child node.
            </summary>
            <userdoc>
            The map used for the left (background) node.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.RightChild">
            <summary>
            The right (foreground) child node.
            </summary>
            <userdoc>
            The map used for the right (foreground) node.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryColor">
            <summary>
            A node that describe a binary operation between two <see cref="T:SiliconStudio.Paradox.Rendering.Materials.IComputeColor"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IComputeColor">
            <summary>
            Base interface for vector/color based compute color nodes.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryScalar">
            <summary>
            A node that describe a binary operation between two <see cref="T:SiliconStudio.Paradox.Rendering.Materials.IComputeScalar"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IComputeScalar">
            <summary>
            Base interface for scalar compute color nodes.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryScalar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryScalar"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryScalar.#ctor(SiliconStudio.Paradox.Rendering.Materials.IComputeScalar,SiliconStudio.Paradox.Rendering.Materials.IComputeScalar,SiliconStudio.Paradox.Rendering.Materials.ComputeColors.BinaryOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeBinaryScalar"/> class.
            </summary>
            <param name="leftChild">The left child.</param>
            <param name="rightChild">The right child.</param>
            <param name="binaryOperator">The material binary operand.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeValueBase`1">
            <summary>
            Base class for a constant value for <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeNode"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeKeyedBase">
            <summary>
            Base interface for all computer color nodes.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeKeyedBase.Key">
            <summary>
            Gets or sets a custom key associated to this node.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeKeyedBase.UsedKey">
            <summary>
            Gets or sets the used key.
            </summary>
            <value>The used key.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeValueBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeValueBase`1"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeValueBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeValueBase`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeValueBase`1.Value">
            <summary>
            The property to access the internal value
            </summary>
            <userdoc>
            The value.
            </userdoc>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColor"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColor.#ctor(SiliconStudio.Core.Mathematics.Color4)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColor"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColor.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColor.PremultiplyAlpha">
            <summary>
            Gets or sets a value indicating whether to convert the texture in pre-multiplied alpha.
            </summary>
            <value><c>true</c> to convert the texture in pre-multiplied alpha.; otherwise, <c>false</c>.</value>
            <userdoc>
            If checked, The color values will be pre-multiplied by the alpha value.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColorParameter">
            <summary>
            Base class for a Color compute color parameter.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.IComputeColorParameter">
            <summary>
            Interface defining a parameter for a <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeNode"/>
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColorParameterSampler.Filtering">
            <summary>
            The texture filtering mode.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColorParameterSampler.AddressModeU">
            <summary>
            The texture address mode.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColorParameterSampler.AddressModeV">
            <summary>
            The texture address mode.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColorParameters">
            <summary>
            A custom dictionary to keep track of the order the elements were inserted.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColorParameters.Serializer.Initialize(SiliconStudio.Core.Serialization.SerializerSelector)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColorParameters.Serializer.Serialize(SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColorParameters@,SiliconStudio.Core.Serialization.ArchiveMode,SiliconStudio.Core.Serialization.SerializationStream)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeFloat">
            <summary>
            A float compute color.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeFloat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeFloat"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeFloat.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeFloat"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeFloat4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeFloat4"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeFloat4.#ctor(SiliconStudio.Core.Mathematics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeFloat4"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeFloat4.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1">
            <summary>
            Base class for shader class node.
            </summary>
            <typeparam name="T">Type of the node (scalar or color)</typeparam>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.mixinReference">
            <summary>
            The reference to the shader.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.GetChildren(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.AddMember``1(System.String,System.Collections.Generic.Dictionary{SiliconStudio.Paradox.Rendering.ParameterKey,System.Object})">
            <summary>
            Add a new member.
            </summary>
            <typeparam name="T">The type of the member.</typeparam>
            <param name="linkName">The name of the parameter key.</param>
            <param name="members">The target parameter collection.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.AddKey``1(System.String,SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeColorParameters)">
            <summary>
            Add a new generic parameter.
            </summary>
            <typeparam name="T">The type of the generic.</typeparam>
            <param name="keyName">The name of the generic.</param>
            <param name="generics">The target ComputeColorParameters.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.AddToCollection``1(SiliconStudio.Paradox.Rendering.ParameterKey,``0,SiliconStudio.Paradox.Rendering.ParameterCollection)">
            <summary>
            Add the parameter to the collection.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="key">The key of the variable.</param>
            <param name="value"></param>
            <param name="collection"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.GetTypedParameterKey``1(System.String)">
            <summary>
            Get the correct parameter key.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="linkName">The name of the parameter key.</param>
            <returns>The parameter key.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.MixinReference">
            <summary>
            The shader.
            </summary>
            <userdoc>
            The shader used in this node. It should be a ComputeColor.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.Generics">
            <summary>
            The generics of this class.
            </summary>
            <userdoc>
            The generics of the shader. There is no need to edit the list, it is automatically filled when the shader is loaded.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.CompositionNodes">
            <summary>
            The compositions of this class.
            </summary>
            <userdoc>
            The compositions of the shader where material nodes can be attached. There is no need to edit the list, it is automatically filled when the shader is loaded.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.Members">
            <summary>
            The members of this class.
            </summary>
            <userdoc>
            The editables values of this shader. There is no need to edit the list, it is automatically filled when the shader is loaded.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassColor">
            <summary>
            A shader outputing a single scalar value.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeShaderClassScalar">
            <summary>
            A shader outputing a color/vector value.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase">
            <summary>
            Base class for texture nodes
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase.#ctor(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Rendering.Materials.TextureCoordinate,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureColor"/> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="texcoordIndex">Index of the texcoord.</param>
            <param name="scale">The scale.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase.Texture">
            <summary>
            The texture Reference.
            </summary>
            <userdoc>
            The reference to the texture asset to use.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase.TexcoordIndex">
            <summary>
            The texture coordinate used to sample the texture.
            </summary>
            <userdoc>
            The set of uv used to sample the texture.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase.Sampler">
            <summary>
            The sampler of the texture.
            </summary>
            <userdoc>
            The sampler of the texture.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase.Filtering">
            <summary>
            The texture filtering mode.
            </summary>
            <userdoc>
            The filtering method to use.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase.AddressModeU">
            <summary>
            The texture address mode.
            </summary>
            <userdoc>
            Specify how to wrap the texture along the U axis (horizontal axis).
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase.AddressModeV">
            <summary>
            The texture address mode.
            </summary>
            <userdoc>
            Specify how to wrap the texture along the V axis (vertical axis).
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase.Scale">
            <summary>
            The scale of the texture coordinates.
            </summary>
            <userdoc>
            The scale to apply onto the texture coordinates. This can be used to zoom into texture or tile it (lower than 1 -> zooming, greater than 1 -> tiling).
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureBase.Offset">
            <summary>
            The offset in the texture coordinates.
            </summary>
            <userdoc>
            The offsets to apply onto the model's texture coordinates.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureColor">
            <summary>
            A color texture node.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureColor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureColor.#ctor(SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureColor"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureColor.#ctor(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Rendering.Materials.TextureCoordinate,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureColor"/> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="texcoordIndex">Index of the texcoord.</param>
            <param name="scale">The scale.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureScalar">
            <summary>
            A scalar texture node.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureScalar.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureScalar.#ctor(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Rendering.Materials.TextureCoordinate,SiliconStudio.Core.Mathematics.Vector2,SiliconStudio.Core.Mathematics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureColor"/> class.
            </summary>
            <param name="texture">The texture.</param>
            <param name="texcoordIndex">Index of the texcoord.</param>
            <param name="scale">The scale.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.ComputeColors.ComputeTextureScalar.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>The channel.</value>
            <userdoc>Selects the RGBA channel to sample from the texture.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialAttributes">
            <summary>
            Base interface for material attributes
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialDiffuseFeature">
            <summary>
            Base interface for a diffuse material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialDiffuseModelFeature">
            <summary>
            Base interface for the diffuse model material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialShadingModelFeature">
            <summary>
            Base interface for a shading light dependent model material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialEmissiveFeature">
            <summary>
            Base interface for the emissive model material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialLayers">
            <summary>
            An interface for defining layers of material.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialMicroSurfaceFeature">
            <summary>
            Base interface for a micro-surface material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialOcclusionFeature">
            <summary>
            Base interface for the occlusion material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialSpecularFeature">
            <summary>
            Base interface for a specular material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialSpecularMicrofacetFresnelFunction">
            <summary>
            Common interface for the Fresnel part of a microfacet shading model.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialSpecularMicrofacetFunction">
            <summary>
            Common interface for a microfacet function.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.IMaterialSpecularMicrofacetFunction.Generate">
            <summary>
            Generates the shader class source used for the shader composition.
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialSpecularMicrofacetNormalDistributionFunction">
            <summary>
            Common interface for the Normal Distribution Function of a microfacet shading model.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialSpecularMicrofacetVisibilityFunction">
            <summary>
            Common interface for the Geometric Shadowing Function of a microfacet shading model.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialSpecularModelFeature">
            <summary>
            Base interface for the specular model material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialSurfaceFeature">
            <summary>
            Base interface for the surface material feature (normals...etc.)
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes">
            <summary>
            Common material attributes.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.Tessellation">
            <summary>
            Gets or sets the tessellation.
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation method to use for this material. Tessellation consists into subdividing model poligons in order to increase the realism.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.Displacement">
            <summary>
            Gets or sets the displacement.
            </summary>
            <value>The displacement.</value>
            <userdoc>The displacement method to use for this material. Displacement consists into atering model original vertex position by adding some offsets.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.Surface">
            <summary>
            Gets or sets the surface.
            </summary>
            <value>The surface.</value>
            <userdoc>The method to use to alter macro-surface aspect of this material. A classic example consists in perturbing the normals of the model.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.MicroSurface">
            <summary>
            Gets or sets the micro surface.
            </summary>
            <value>The micro surface.</value>
            <userdoc>The method to use to alter micro-surface aspect of this material.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.Diffuse">
            <summary>
            Gets or sets the diffuse.
            </summary>
            <value>The diffuse.</value>
            <userdoc>The method to use to determine the diffuse color of the material. 
            The diffuse color of an object corresponds to the essential (pure) color of the object without any reflections.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.DiffuseModel">
            <summary>
            Gets or sets the diffuse model.
            </summary>
            <value>The diffuse model.</value>
            <userdoc>The shading model to use to render the material diffuse color.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.Specular">
            <summary>
            Gets or sets the specular.
            </summary>
            <value>The specular.</value>
            <userdoc>The method to use to determine the specular color of the material. 
            The specular color of an object corresponds to the color produced by the reflection of a white light on the object.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.SpecularModel">
            <summary>
            Gets or sets the specular model.
            </summary>
            <value>The specular model.</value>
            <userdoc>The shading model to use to render the material specular color.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.Occlusion">
            <summary>
            Gets or sets the occlusion.
            </summary>
            <value>The occlusion.</value>
            <userdoc>The occlusion method to use for this material. 
            Occlusions consists in modulating the ambient and direct lighting of the material to simulate shadows or cavity artifacts.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.Emissive">
            <summary>
            Gets or sets the emissive.
            </summary>
            <value>The emissive.</value>
            <userdoc>The method to use to determine the emissive color of the material.
            The emissive color of an object is the color emitted by the object.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.Transparency">
            <summary>
            Gets or sets the transparency.
            </summary>
            <value>The transparency.</value>
            <userdoc>The method to use to determine the transparency of the material.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialAttributes.Overrides">
            <summary>
            Gets or sets the overrides.
            </summary>
            <value>The overrides.</value>
            <userdoc>Can be used to override some of the properties of the current material.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayer">
            <summary>
            A material blend layer
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayer"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayer.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayer"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <userdoc>If checked, the layer in taken into account. Otherwise it is ignored.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayer.Name">
            <summary>
            Gets or sets the name of this blend layer.
            </summary>
            <value>The name.</value>
            <userdoc>The name of the material layer.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayer.Material">
            <summary>
            Gets or sets the material.
            </summary>
            <value>The material.</value>
            <userdoc>The reference to the material asset to layer.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayer.BlendMap">
            <summary>
            Gets or sets the blend map.
            </summary>
            <value>The blend map.</value>
            <userdoc>The blend map specifying how to blend the material with the previous layer.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayer.Overrides">
            <summary>
            Gets or sets the material overrides.
            </summary>
            <value>The overrides.</value>
            <userdoc>Can be used to override properties of the referenced material.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayers">
            <summary>
            A composition material to blend different materials in a stack based manner.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayers"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialOverrides">
            <summary>
            Material overrides used in a <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialBlendLayer"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialOverrides.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialOverrides"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialOverrides.op_Multiply(SiliconStudio.Paradox.Rendering.Materials.MaterialOverrides,SiliconStudio.Paradox.Rendering.Materials.MaterialOverrides)">
            <summary>
            Implements the multiply operator in order to support correct calculation of overrides for a particular layer.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialOverrides.UVScale">
            <summary>
            Gets or sets the scale u and v.
            </summary>
            <value>The scale u.</value>
            <userdoc>The scales to apply on the layered material texture coordinates.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDescriptor">
            <summary>
            A descriptor of a <see cref="T:SiliconStudio.Paradox.Rendering.Material"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDescriptor"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialDescriptor.Attributes">
            <summary>
            Gets or sets the material attributes.
            </summary>
            <value>The material attributes.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialDescriptor.Layers">
            <summary>
            Gets or sets the material compositor.
            </summary>
            <value>The material compositor.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDiffuseLambertModelFeature">
            <summary>
            The diffuse Lambertian for the diffuse material model attribute.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialDiffuseLambertModelFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDiffuseLambertModelFeature"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDiffuseMapFeature">
            <summary>
            A Diffuse map for the diffuse material feature.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.IMaterialStreamProvider">
            <summary>
            An interface to query streams used by materials. 
            </summary>
            <remarks>
            This is not an exhaustive list but is used to allow to display a specific map in the editor.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.IMaterialStreamProvider.GetStreams">
            <summary>
            Gets the streams used by a material
            </summary>
            <returns>IEnumerable&lt;MaterialStream&gt;.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialDiffuseMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDiffuseMapFeature"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialDiffuseMapFeature.#ctor(SiliconStudio.Paradox.Rendering.Materials.IComputeColor)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDiffuseMapFeature"/> class.
            </summary>
            <param name="diffuseMap">The diffuse map.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialDiffuseMapFeature.DiffuseMap">
            <summary>
            Gets or sets the diffuse map.
            </summary>
            <value>The diffuse map.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialEmissiveMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialEmissiveMapFeature"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialEmissiveMapFeature.#ctor(SiliconStudio.Paradox.Rendering.Materials.IComputeColor)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialEmissiveMapFeature"/> class.
            </summary>
            <param name="emissiveMap">The emissive map.</param>
            <exception cref="T:System.ArgumentNullException">emissiveMap</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialEmissiveMapFeature.EmissiveMap">
            <summary>
            Gets or sets the diffuse map.
            </summary>
            <value>The diffuse map.</value>
            <userdoc>The map specifying the color emitted by the material.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialEmissiveMapFeature.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
            <value>The intensity.</value>
            <userdoc>The map specifying the intensity of the light emitted by the material. This scales the color value specified by emissive map.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialEmissiveMapFeature.UseAlpha">
            <summary>
            Gets or sets a value indicating whether [use alpha].
            </summary>
            <value><c>true</c> if [use alpha]; otherwise, <c>false</c>.</value>
            <userdoc>If checked, use the alpha component of the emissive map as main alpha color for the material. Otherwise, ignore it and use the diffuse alpha color.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Assets.ShaderGeneratorContextBase">
            <summary>
            Base class for generating shader class source with associated parameters.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Assets.ShaderGeneratorContextBase.Assets">
            <summary>
            Gets or sets the asset manager.
            </summary>
            <value>
            The asset manager.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialGeneratorContext.OptimizeMaterials">
            <summary>
            Gets or sets a value indicating whether materials will be optimized (textures blended together, generate optimized shader permutations, etc...).
            </summary>
            <value>
              <c>true</c> if [materials are optimized]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialGlossinessMapFeature">
            <summary>
            A smoothness map for the micro-surface material feature.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialGlossinessMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialGlossinessMapFeature"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialGlossinessMapFeature.#ctor(SiliconStudio.Paradox.Rendering.Materials.IComputeScalar)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialGlossinessMapFeature"/> class.
            </summary>
            <param name="glossinessMap">The glossiness map.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialGlossinessMapFeature.GlossinessMap">
            <summary>
            Gets or sets the smoothness map.
            </summary>
            <value>The smoothness map.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialGlossinessMapFeature.Invert">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialGlossinessMapFeature"/> is invert.
            </summary>
            <value><c>true</c> if invert; otherwise, <c>false</c>.</value>
            <userdoc>When checked, considers the map as a roughness map instead of a glossiness map. 
            A roughness value of 1.0 corresponds to a glossiness value of 0.0 and vice-versa.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialMetalnessMapFeature">
            <summary>
            A Metalness map for the specular material feature.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialMetalnessMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialMetalnessMapFeature"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialMetalnessMapFeature.#ctor(SiliconStudio.Paradox.Rendering.Materials.IComputeScalar)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialMetalnessMapFeature"/> class.
            </summary>
            <param name="metalnessMap">The metalness map.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialMetalnessMapFeature.MetalnessMap">
            <summary>
            Gets or sets the metalness map.
            </summary>
            <value>The metalness map.</value>
            <userdoc>The map specifying the metalness of the material.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialNormalMapFeature">
            <summary>
            The normal map for a surface material feature.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialNormalMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialNormalMapFeature"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialNormalMapFeature.#ctor(SiliconStudio.Paradox.Rendering.Materials.IComputeColor)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialNormalMapFeature"/> class.
            </summary>
            <param name="normalMap">The normal map.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialNormalMapFeature.NormalMap">
            <summary>
            Gets or sets the normal map.
            </summary>
            <value>The normal map.</value>
            <userdoc>
            The normal map.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialNormalMapFeature.ScaleAndBias">
            <summary>
            Gets or sets a value indicating whether to scale by (2,2,2) and bias by (-1,-1,-1) the normal map.
            </summary>
            <value><c>true</c> if scale and bias this normal map; otherwise, <c>false</c>.</value>
            <userdoc>
            Scale by (2,2,2) and bias by (-1,-1,-1) this normal map.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialNormalMapFeature.IsXYNormal">
            <summary>
            Gets or sets a value indicating whether the normal is only stored in XY components and Z is assumed to be 1.0.
            </summary>
            <value><c>true</c> if this instance is xy normal; otherwise, <c>false</c>.</value>
            <userdoc>
            Read only xy components and assume z to be = 1. This is used for compressed normals.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialOcclusionMapFeature">
            <summary>
            An occlusion map for the occlusion material feature.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialOcclusionMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialOcclusionMapFeature"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialOcclusionMapFeature.AmbientOcclusionMap">
            <summary>
            Gets or sets the occlusion map.
            </summary>
            <value>The occlusion map.</value>
            <userdoc>The map specifying the ambient occlusion of the material. This modulates the amount of incoming ambient light to the material (0 => no ambient, 1 => full ambient).
            Ambient occlusions are generally used to produce coarse occlusions on the material (shadows, etc...). It is geometry related and thus ignores possible UV scale overrides.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialOcclusionMapFeature.DirectLightingFactor">
            <summary>
            Gets or sets how much the occlusion map can influence direct lighting (default: 0).
            </summary>
            <value>The direct lighting factor.</value>
            <userdoc>Specify how much the occlusion map should influence the direct lighting (non ambient lightings). 
            Usually the occlusion maps are used only to affect ambient lighting, but using this parameter one can also have it partially affecting the direct lighting.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialOcclusionMapFeature.CavityMap">
            <summary>
            Gets or sets the cavity map.
            </summary>
            <value>The cavity map.</value>
            <userdoc>The map specifying the cavity occlusions of the material. This modulates the amount of incoming direct (non-ambient) light to the material (0 => no light, 1 => full light).
            Cavity occlusions are generally used to produce fine grained artifacts on the material.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialOcclusionMapFeature.DiffuseCavity">
            <summary>
            Gets or sets the diffuse cavity influence.
            </summary>
            <value>The diffuse cavity.</value>
            <userdoc>Specify the influence of the cavity map on the diffuse lighting (0 => no influence, 1 => full influence).</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialOcclusionMapFeature.SpecularCavity">
            <summary>
            Gets or sets the specular cavity.
            </summary>
            <value>The specular cavity.</value>
            <userdoc>Specify the influence of the cavity map on the specular lighting (0 => no influence, 1 => full influence).</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMapFeature">
            <summary>
            A Specular map for the specular material feature.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMapFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMapFeature"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMapFeature.SpecularMap">
            <summary>
            Gets or sets the specular map.
            </summary>
            <value>The specular map.</value>
            <userdoc>The map specifying the color of the specular reflection.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMapFeature.Intensity">
            <summary>
            Gets or sets the specular intensity.
            </summary>
            <value>The map specifying the intensity of the specular reflection. An intensity of 0 means no reflection. An intensity of 1 means full reflection.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMapFeature.IsEnergyConservative">
            <summary>
            Gets or sets a value indicating whether this instance is energy conservative.
            </summary>
            <value><c>true</c> if this instance is energy conservative; otherwise, <c>false</c>.</value>
            <value>If checked, the material ensure the energy conservation between the diffuse and specular colors.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetFresnelNone">
            <summary>
            No Fresnel applied.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetFresnelSchlick">
            <summary>
            Fresnel using Schlick approximation.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetModelFeature">
            <summary>
            The microfacet specular shading model.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetModelFeature"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.Fresnel">
            <userdoc>Specify the function to use to calculate the Fresnel component of the micro-facet lighting equation. 
            This defines the amount of the incoming light that is reflected.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.Visibility">
            <userdoc>Specify the function to use to calculate the visibility component of the micro-facet lighting equation.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.NormalDistribution">
            <userdoc>Specify the function to use to calculate the normal distribution in the micro-facet lighting equation. 
            This defines how the normal is distributed.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetNormalDistributionBeckmann">
            <summary>
            The Beckmann Normal Distribution.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetNormalDistributionBlinnPhong">
            <summary>
            The Blinn-Phong Normal Distribution.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetNormalDistributionGGX">
            <summary>
            The GGX Normal Distribution.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetVisibilityCookTorrance">
            <summary>
            Cook-Torrance Geometric Shadowing.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetVisibilityImplicit">
            <summary>
            Implicit Geometric Shadowing.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetVisibilityKelemen">
            <summary>
            Kelemen Geometric Shadowing.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetVisibilityNeumann">
            <summary>
            Neumann Geometric Shadowing.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetVisibilitySmithBeckmann">
            <summary>
            Smith-Beckmann Geometric Shadowing.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetVisibilitySmithGGXCorrelated">
            <summary>
            Smith-GGX Geometric Shadowing.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetVisibilitySmithSchlickBeckmann">
            <summary>
            Schlick-Beckmann Geometric Shadowing.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialSpecularMicrofacetVisibilitySmithSchlickGGX">
            <summary>
            Schlick-GGX Geometric Shadowing.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialStreamType">
            <summary>
            Type of a stream used by <see cref="!:MaterialStreamAttribute"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.Processor.Visitors.MaterialUtility">
            <summary>
            Class MaterialUtility.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.Processor.Visitors.MaterialUtility.GetShaderMixinSource(SiliconStudio.Paradox.Shaders.ShaderSource)">
            <summary>
            Build a encapsulating ShaderMixinSource if necessary.
            </summary>
            <param name="shaderSource">The input ShaderSource.</param>
            <returns>A ShaderMixinSource</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.Processor.Visitors.MaterialUtility.GetDefaultSamplerKey(System.Int32)">
            <summary>
            Get the ParameterKey of generic sampler.
            </summary>
            <param name="i">The id of the texture.</param>
            <returns>The corresponding ParameterKey.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.TextureChannel">
            <summary>
            A RGBA channel selected when performing texture sampling.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.TextureChannel.R">
            <summary>
            The sampled color is returned as a float4(R, R, R, R)
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.TextureChannel.G">
            <summary>
            The sampled color is returned as a float4(G, G, G, G)
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.TextureChannel.B">
            <summary>
            The sampled color is returned as a float4(B, B, B, B)
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.TextureChannel.A">
            <summary>
            The sampled color is returned as a float4(A, A, A, A)
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.TextureCoordinate">
            <summary>
            The texture coordinate.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.CapsuleProceduralModel">
            <summary>
            A Capsule descriptor
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.PrimitiveProceduralModelBase">
            <summary>
            Base class for primitive procedural model.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.IProceduralModel">
            <summary>
            Interface to create a procedural model.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.IProceduralModel.Generate(SiliconStudio.Core.IServiceRegistry,SiliconStudio.Paradox.Rendering.Model)">
            <summary>
            Creates a procedural model.
            </summary>
            <param name="services">The services registry.</param>
            <param name="model">A model instance to fill with procedural content.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.IProceduralModel.MaterialInstances">
            <summary>
            Gets the collection of material instances used by this <see cref="T:SiliconStudio.Paradox.Rendering.ProceduralModels.IProceduralModel"/>/
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.PrimitiveProceduralModelBase.MaterialInstance">
            <summary>
            Gets the material instance.
            </summary>
            <value>The material instance.</value>
            <userdoc>The reference material asset to use with this model.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.PrimitiveProceduralModelBase.MaterialInstances">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.CapsuleProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the Capsule descriptor class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.CapsuleProceduralModel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
            <userdoc>The height of the capsule. That is the distance between the two round extremities.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.CapsuleProceduralModel.Radius">
            <summary>
            Gets or sets the diameter of the base of the Capsule.
            </summary>
            <value>The diameter.</value>
            <userdoc>The radius of the capsule.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.CapsuleProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor.
            </summary>
            <userdoc>The tessellation of the capsule. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.ConeProceduralModel">
            <summary>
            A Cone descriptor
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.ConeProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the Cone descriptor class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.ConeProceduralModel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
            <userdoc>The height of the cone.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.ConeProceduralModel.Radius">
            <summary>
            Gets or sets the diameter of the base of the Cone.
            </summary>
            <value>The diameter.</value>
            <userdoc>The diameter of the cone.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.ConeProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor.
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation of the cone. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.CubeProceduralModel">
            <summary>
            A cube procedural model
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.CubeProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ProceduralModels.CubeProceduralModel"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.CubeProceduralModel.Size">
            <summary>
            Gets or sets the size of the cube.
            </summary>
            <value>The size.</value>
            <userdoc>The size of the cube along the Ox, Oy and Oz axis.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.CylinderProceduralModel">
            <summary>
            A Cylinder descriptor
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.CylinderProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the Cylinder descriptor class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.CylinderProceduralModel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
            <userdoc>The height of the cylinder.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.CylinderProceduralModel.Diameter">
            <summary>
            Gets or sets the diameter of the base of the cylinder.
            </summary>
            <value>The diameter.</value>
            <userdoc>The diameter of the cylinder.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.CylinderProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor.
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation of the cylinder. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.CylinderProceduralModel.ScaleUV">
            <summary>
            Gets or sets the scale to apply on texcoord uv.
            </summary>
            <value>The scale uv.</value>
            <userdoc>The scales to apply onto the UV coordinates of the cylinder. This can be used to tile a texture on it.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.GeoSphereProceduralModel">
            <summary>
            A sphere procedural model.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.GeoSphereProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ProceduralModels.GeoSphereProceduralModel"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.GeoSphereProceduralModel.Diameter">
            <summary>
            Gets or sets the diameter of this sphere.
            </summary>
            <value>The diameter.</value>
            <userdoc>The diameter of the geosphere.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.GeoSphereProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor (default: 3.0)
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation of the geophere. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.PlaneProceduralModel">
            <summary>
            The geometric descriptor for a plane.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.PlaneProceduralModel.#ctor">
            <summary>
            Initializes a new instance of geometric descriptor for a plane.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.PlaneProceduralModel.Size">
            <summary>
            Gets or sets the size of the plane.
            </summary>
            <value>The size x.</value>
            <userdoc>The size of plane along the X/Y axis</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.PlaneProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation of the plane.
            </summary>
            <value>The tessellation x.</value>
            <userdoc>The tessellation of the plane along the X/Y axis. That is the number polygons the plane is made of.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.PlaneProceduralModel.UVScales">
            <summary>
            Gets or sets the UV scales.
            </summary>
            <value>The UV scales</value>
            <userdoc>The scales to apply to the UV coordinates of the plane. This can be used to tile a texture on it.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.PlaneProceduralModel.Normal">
            <summary>
            Gets or sets the normal direction of the plane.
            </summary>
            <userdoc>The direction of the normal of the plane. This changes the default orientation of the plane.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.PlaneProceduralModel.GenerateBackFace">
            <summary>
            Gets or sets value indicating if a back face should be added.
            </summary>
            <userdoc>Check this combo box to generate a back face to the plane</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.ProceduralModelDescriptor">
            <summary>
            A descriptor for a procedural geometry.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.ProceduralModelDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ProceduralModels.ProceduralModelDescriptor"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.ProceduralModelDescriptor.#ctor(SiliconStudio.Paradox.Rendering.ProceduralModels.IProceduralModel)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ProceduralModels.ProceduralModelDescriptor"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.ProceduralModelDescriptor.Type">
            <summary>
            Gets or sets the type of geometric primitive.
            </summary>
            <value>The type of geometric primitive.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.SphereProceduralModel">
            <summary>
            A sphere procedural.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.SphereProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ProceduralModels.SphereProceduralModel"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.SphereProceduralModel.Diameter">
            <summary>
            Gets or sets the diameter of this sphere.
            </summary>
            <value>The diameter.</value>
            <userdoc>The diameter of the sphere.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.SphereProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor (default: 3.0)
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation of the sphere. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.SphereProceduralModel.UVScales">
            <summary>
            Gets or sets the UV scales.
            </summary>
            <value>The UV scales</value>
            <userdoc>The scales to apply onto the UV coordinates of the sphere. This can be used to tile a texture on it.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.TeapotProceduralModel">
            <summary>
            A teapot procedural model.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.TeapotProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ProceduralModels.TeapotProceduralModel"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.TeapotProceduralModel.Size">
            <summary>
            Gets or sets the size of this teapot.
            </summary>
            <value>The diameter.</value>
            <userdoc>The size of the teapot.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.TeapotProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor (default: 3.0)
            </summary>
            <value>The tessellation of the teapot. That is the number of polygons composing it.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProceduralModels.TorusProceduralModel">
            <summary>
            The Torus Model.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ProceduralModels.TorusProceduralModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ProceduralModels.TorusProceduralModel"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.TorusProceduralModel.Diameter">
            <summary>
            Gets or sets the size of this Torus.
            </summary>
            <value>The diameter.</value>
            <userdoc>The major diameter of the torus.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.TorusProceduralModel.Thickness">
            <summary>
            Gets or sets the thickness.
            </summary>
            <value>The minor diameter of the torus. That is the diameter of the ring.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ProceduralModels.TorusProceduralModel.Tessellation">
            <summary>
            Gets or sets the tessellation factor (default: 3.0)
            </summary>
            <value>The tessellation.</value>
            <userdoc>The tessellation of the torus. That is the number of polygons composing it.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ReferenceToEffectsAttribute">
            <summary>
            This attribute can be used to add a reference to the Effects assembly.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderContextExtensions">
            <summary>
            Extensions methods for the <see cref="T:SiliconStudio.Paradox.Rendering.RenderContext"/> class
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderContextExtensions.IsPicking(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Query the render context whether the current rendering is for picking.
            </summary>
            <param name="context">The context</param>
            <returns><value>True</value> if the current rendering is for picking</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderItem">
            <summary>
            A renderable item used by <see cref="T:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderItem.#ctor(SiliconStudio.Paradox.Rendering.IEntityComponentRenderer,System.Object,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.RenderItem"/> struct.
            </summary>
            <param name="renderer">The renderer.</param>
            <param name="drawContext">The draw context.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderItemCollection">
            <summary>
            A collection of <see cref="T:SiliconStudio.Paradox.Rendering.RenderItem"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderItemCollection.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.RenderItemCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="hasTransparency">if set to <c>true</c> [has transparency].</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderItemCollection.HasTransparency">
            <summary>
            Gets a value indicating whether this instance has transparency.
            </summary>
            <value><c>true</c> if this instance has transparency; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.SceneCameraRenderer">
            <summary>
            A camera renderer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.SceneRendererViewportBase">
            <summary>
            A <see cref="T:SiliconStudio.Paradox.Rendering.SceneRendererBase"/> that supports a <see cref="P:SiliconStudio.Paradox.Rendering.SceneRendererViewportBase.Viewport"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.SceneRendererBase">
            <summary>
            Base implementation for a <see cref="T:SiliconStudio.Paradox.Rendering.ISceneRenderer"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.SceneRendererBase.GetOutput(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Gets the current output <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> output.
            </summary>
            <param name="context">The context.</param>
            <returns>RenderFrame.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.SceneRendererBase.ActivateOutput(SiliconStudio.Paradox.Rendering.RenderContext,System.Boolean)">
            <summary>
            Activates the output to the current <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="disableDepth">if set to <c>true</c> [disable depth].</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.SceneRendererBase.ActivateOutputCore(SiliconStudio.Paradox.Rendering.RenderContext,SiliconStudio.Paradox.Rendering.RenderFrame,System.Boolean)">
            <summary>
            Activates the output to the current <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsDevice"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="output">The output.</param>
            <param name="disableDepth">if set to <c>true</c> [disable depth].</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneRendererBase.Output">
            <summary>
            Gets or sets the output of the scene renderer
            </summary>
            <userdoc>Specify the render frame to use as output of the scene renderer</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneRendererBase.Parameters">
            <summary>
            Gets the parameters used to in place of the default <see cref="P:SiliconStudio.Paradox.Rendering.RenderContext.Parameters"/>.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneRendererViewportBase.Viewport">
            <summary>
            Gets or sets the viewport in percentage or pixel.
            </summary>
            <value>The viewport in percentage or pixel.</value>
            <userdoc>Specify the region of the output target in which to draw. 
            Those values are either in pixels or relative depending on status of 'Viewport in %'.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneRendererViewportBase.IsViewportInPercentage">
            <summary>
            Gets or sets a value indicating whether the viewport is in fixed pixels instead of percentage.
            </summary>
            <value><c>true</c> if the viewport is in pixels instead of percentage; otherwise, <c>false</c>.</value>
            <userdoc>When this value is true, the Viewport size is a percentage (0-100) calculated relatively to the size of the Output, else it is a fixed size in pixels.</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.SceneCameraRenderer.Current">
            <summary>
            Property key to access the current <see cref="T:SiliconStudio.Paradox.Rendering.SceneCameraRenderer"/> from <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.SceneCameraRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.SceneCameraRenderer"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneCameraRenderer.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
            <userdoc>The type of rendering to  perform</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneCameraRenderer.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
            <value>The camera.</value>
            <userdoc>The camera to use to render the scene.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneCameraRenderer.CullingMask">
            <summary>
            Gets or sets the culling mask.
            </summary>
            <value>The culling mask.</value>
            <userdoc>The groups of entities that should be rendered by the renderer.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneCameraRenderer.CullingMode">
            <summary>
            Gets or sets the culling mode.
            </summary>
            <value>The culling mode.</value>
            <userdoc>The type of culling to perform on entities. Culling consist into skipping not visible or insignificant entities during rendering in order to improve performances.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneCameraRenderer.IsPickingMode">
            <summary>
            Gets or sets the value indicating the current rendering is for picking or not.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneCameraRenderer.PreRenderers">
            <summary>
            Gets the pre-renderers attached to this instance that are called before rendering this camera.
            </summary>
            <value>The pre renderers.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneCameraRenderer.PostRenderers">
            <summary>
            Gets the post-renderers attached to this instance that are called after rendering this camera.
            </summary>
            <value>The post renderers.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ClearRenderFrameFlags">
            <summary>
            Flags used to clear a render frame.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ClearRenderFrameFlags.Color">
            <summary>
            Clears the Color and DepthStencil buffer.
            </summary>
            <userdoc>Clears both the Color and DepthStencil buffers</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ClearRenderFrameFlags.DepthOnly">
            <summary>
            Clears only the depth.
            </summary>
            <userdoc>Clears only the DepthStencil buffer</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ClearRenderFrameRenderer">
            <summary>
            A renderer to clear a render frame.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ClearRenderFrameRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ClearRenderFrameRenderer"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ClearRenderFrameRenderer.ClearFlags">
            <summary>
            Gets or sets the clear flags.
            </summary>
            <value>The clear flags.</value>
            <userdoc>Flag indicating which buffers to clear.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ClearRenderFrameRenderer.Color">
            <summary>
            Gets or sets the clear color.
            </summary>
            <value>The clear color.</value>
            <userdoc>The color value to use when clearing the render targets</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ClearRenderFrameRenderer.Depth">
            <summary>
            Gets or sets the depth value used to clear the depth stencil buffer.
            </summary>
            <value>
            The depth value used to clear the depth stencil buffer.
            </value>
            <userdoc>The depth value to use when clearing the depth buffer</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ClearRenderFrameRenderer.Stencil">
            <summary>
            Gets or sets the stencil value used to clear the depth stencil buffer.
            </summary>
            <value>
            The stencil value used to clear the depth stencil buffer.
            </value>
            <userdoc>The stencil value to use when clearing the stencil buffer</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsCompositorLayers">
            <summary>
            A Graphics Composer using layers.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.ISceneGraphicsCompositor">
            <summary>
            Defines the common interface for a graphics composer responsible to compose the scene to a final render target.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsCompositorLayers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsCompositorLayers"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsCompositorLayers.Cameras">
            <summary>
            Gets the cameras used by this composition.
            </summary>
            <value>The cameras.</value>
            <userdoc>The list of cameras used in the graphic pipeline</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsCompositorLayers.Layers">
            <summary>
            Gets the layers used for composing a scene.
            </summary>
            <value>The layers.</value>
            <userdoc>The sequence of graphic layers to incorporate into the pipeline</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsCompositorLayers.Master">
            <summary>
            Gets the master layer.
            </summary>
            <value>The master layer.</value>
            <userdoc>The main layer of the pipeline. Its output is the window back buffer.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.CurrentRenderFrameProvider">
            <summary>
            Output to the Direct (same as the output of the master layer).
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.MasterRenderFrameProvider">
            <summary>
            Output to the Direct (same as the output of the master layer).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Composers.MasterRenderFrameProvider.Instance">
            <summary>
            Gets a singleton instance.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.LocalRenderFrameProvider">
            <summary>
            Describes the <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> to render to.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.LocalRenderFrameProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Composers.LocalRenderFrameProvider"/> class.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Composers.LocalRenderFrameProvider.Descriptor">
            <summary>
            Gets or sets the descriptor of the render frame.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Composers.LocalRenderFrameProvider.RelativeSizeSource">
            <summary>
            Gets or sets the relative size source.
            </summary>
            <value>The relative size source.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.SceneDelegateRenderer">
            <summary>
            A delegate renderer.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.SceneDelegateRenderer.#ctor(System.Action{SiliconStudio.Paradox.Rendering.RenderContext,SiliconStudio.Paradox.Rendering.RenderFrame})">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.SceneDelegateRenderer"/> class.
            </summary>
            <param name="drawAction">The draw action.</param>
            <exception cref="T:System.ArgumentNullException">drawAction</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.SharedRenderFrameProvider">
            <summary>
            A link to a shared <see cref="P:SiliconStudio.Paradox.Rendering.SharedRenderFrameProvider.RenderFrame"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SharedRenderFrameProvider.RenderFrame">
            <summary>
            Gets or sets the shared RenderFrame.
            </summary>
            <value>The shared RenderFrame.</value>
            <userdoc>The render frame asset to use.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayerCollection">
            <summary>
            A Collection of <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.SceneEffectRenderer">
            <summary>
            An effect renderer for a scene.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.SceneEffectRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.SceneEffectRenderer"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneEffectRenderer.Input">
            <summary>
            Gets or sets the input of this effect.
            </summary>
            <value>The input.</value>
            <userdoc>Specify the render frame to use as input of the renderer</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.SceneEffectRenderer.Effect">
            <summary>
            Gets or sets the effect to render.
            </summary>
            <userdoc>Specifies the effect to render onto the input</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.SceneRendererCollection">
            <summary>
            A collection of <see cref="T:SiliconStudio.Paradox.Rendering.IGraphicsRenderer"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.CameraRendererModeForward">
            <summary>
            A forward rendering mode.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.CameraRendererModeForward.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.CameraRendererModeForward"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeForward.ModelEffect">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.CameraRendererModeForward.MaterialFilter">
            <summary>
            Gets or sets the material filter used to render this scene camera.
            </summary>
            <value>The material filter.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.IEffectMixinProvider">
            <summary>
            Defines the interface to provide an effect mixin for a <see cref="T:SiliconStudio.Paradox.Rendering.CameraRendererMode"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.IEffectMixinProvider.GenerateShaderSource">
            <summary>
            Generates the shader source used for rendering.
            </summary>
            <returns>ShaderSource.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.FXAAEffect">
            <summary>
            A FXAA anti-aliasing pass.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ImageEffectShader">
            <summary>
            Post effect using an <see cref="T:SiliconStudio.Paradox.Graphics.Effect"/> (either pdxfx or pdxsl).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Images.ImageEffectShader.EffectInstance">
            <summary>
            The current effect instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffectShader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageEffectShader"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffectShader.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffectShader.SetDefaultParameters">
            <summary>
            Sets the default parameters (called at constructor time and if <see cref="!:Reset"/> is called)
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffectShader.UpdateParameters">
            <summary>
            Updates the effect <see cref="!:ImageEffectShader.Parameters"/> from properties defined in this instance. See remarks.
            </summary>
            <exception cref="T:System.InvalidOperationException">Expecting less than 10 textures in input</exception>
            <remarks>By default, all the input textures will be remapped to <see cref="F:SiliconStudio.Paradox.Rendering.TexturingKeys.Texture0"/>...etc.</remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageEffectShader.EffectName">
            <summary>
            Effect name.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageEffectShader.SharedParameterCollections">
            <summary>
            Optional shared parameters. This list must be setup before calling <see cref="!:Initialize"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageEffectShader.ParameterCollections">
            <summary>
            Gets the parameter collections used by this effect.
            </summary>
            <value>The parameter collections.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.FXAAEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.FXAAEffect"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.FXAAEffect.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.FXAAEffect"/> class.
            </summary>
            <param name="antialiasShaderName">Name of the antialias shader.</param>
            <exception cref="T:System.ArgumentNullException">antialiasShaderName</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.FXAAEffect.Quality">
            <summary>
            Animates the film grain.
            </summary>
            <userdoc>The quality of the anti-alising filter.</userdoc>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.Bloom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.Bloom"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.Bloom.Radius">
            <summary>
            Radius of the bloom.
            </summary>
            <userdoc>The range of the bloom effect around bright regions. Note that high values can import performances</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.Bloom.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
            <value>The amount.</value>
            <userdoc>The strength of the bloom effect.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.Bloom.SigmaRatio">
            <summary>
            Gets or sets the sigma ratio.
            </summary>
            <value>The ratio</value>
            <userdoc>The standard deviation used for the blur of the effect. This impact the fall-off of the bloom.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.Bloom.Distortion">
            <summary>
            Vertical or horizontal distortion to apply.
            (1, 2) means the bloom will be stretched twice longer horizontally than vertically.
            </summary>
            <userdoc>Apply vertical of horizontal distortion on the effect</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.Bloom.Afterimage">
            <summary>
            Gets the afterimage effect/>
            </summary>
            <userdoc>When enabled, it simulates some persistence effects of the light points (trails) on the next frames. </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.BrightFilter">
            <summary>
            A bright pass filter.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.BrightFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.BrightFilter"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.BrightFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.BrightFilter"/> class.
            </summary>
            <param name="brightPassShaderName">Name of the bright pass shader.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.BrightFilter.Threshold">
            <summary>
            Gets or sets the threshold relative to the <see cref="!:WhitePoint"/>.
            </summary>
            <value>The threshold.</value>
            <userdoc>The value of the intensity threshold used to identify bright areas</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.BrightFilter.Color">
            <summary>
            Modulate the bloom by a certain color.
            </summary>
            <value>The color.</value>
            <userdoc>Modulates bright areas with the provided color. It affects the color of sub-sequent bloom, light-streak effects.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ColorCombiner">
            <summary>
            A texture combiner allows to mix up to 10 textures with different weights.
            </summary>
            <remarks> This effects takes from 1 to 10 textures in input and combine them to a single output.
            Before using this class, it is recommended to clear the inputs by using <see cref="M:SiliconStudio.Paradox.Rendering.Images.ImageEffect.Reset"/>.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ColorCombiner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorCombiner"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="colorCombinerShaderName">Name of the color combiner shader.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ColorCombiner.Factors">
            <summary>
            Gets the factors used to multiply the colors.
            </summary>
            <value>The factors.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ColorCombiner.ModulateRGB">
            <summary>
            Gets the RGB modulation of each texture.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformCollection">
            <summary>
            A collection of <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup">
            <summary>
            An effect combining a list of <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransform"/> sub-effects.
            </summary>
            <remarks>
            This effect and all <see cref="P:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup.Transforms"/> are collected and compiled into a single shader.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup"/> class.
            </summary>
            <param name="colorTransformGroupEffect">The color transform group effect.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup.Transforms">
            <summary>
            Gets the color transforms.
            </summary>
            <value>The transforms.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup.GammaTransform">
            <summary>
            Gets the gamma transform that is applied after all <see cref="P:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup.Transforms"/>
            </summary>
            <value>The gamma transform.</value>
            <userdoc>Converts the colors from the linear-space to the gamma-space. This re-adjusts the levels white and black to properly display on monitors and TV screens.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup.ParameterCompositeKey">
            <summary>
            An internal key to cache {Key,TransformIndex} => CompositeKey
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup.ParameterCompositeKey.#ctor(SiliconStudio.Paradox.Rendering.ParameterKey,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroup.ParameterCompositeKey"/> struct.
            </summary>
            <param name="key">The key.</param>
            <param name="transformIndex">Index of the transform.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformGroupKeys">
            <summary>
            Keys used by <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMap"/> and ToneMapEffect pdxfx
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformKeys">
            <summary>
            Parameter keys used by <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase"/>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Images.ColorTransformKeys.Enabled">
            <summary>
            A boolean indicating wheter a <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase"/> is active or not.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Images.ColorTransformKeys.Shader">
            <summary>
            The shader used by <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.GammaTransform">
            <summary>
            A Gamma <see cref="T:SiliconStudio.Paradox.Rendering.Images.ColorTransformBase"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.GammaTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.GammaTransform"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.GammaTransform.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.GammaTransform"/> class.
            </summary>
            <param name="colorTransformShader">Name of the shader.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.GammaTransform.Value">
            <summary>
            Gets or sets the gamma value.
            </summary>
            <value>The value.</value>
            <userdoc>The value of the gamma transformation.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ToneMap">
            <summary>
            A tonemap effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ToneMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMap"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ToneMap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMap"/> class.
            </summary>
            <param name="toneMapEffect">The tone map shader effect (default is <c>ToneMapEffect)</c>.</param>
            <exception cref="T:System.ArgumentNullException">toneMapEffect</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMap.Operator">
            <summary>
            Gets or sets the operator used for tonemap.
            </summary>
            <value>The operator.</value>
            <userdoc>The method used to perform the HDR to LDR tone mapping</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMap.KeyValue">
            <summary>
            Gets or sets the key value.
            </summary>
            <value>The key value.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMap.AutoKeyValue">
            <summary>
            Gets or sets a value indicating whether [automatic key value].
            </summary>
            <value><c>true</c> if [automatic key value]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMap.AdaptationRate">
            <summary>
            Gets or sets the adaptation rate.
            </summary>
            <value>The adaptation rate.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMap.LuminanceLocalFactor">
            <summary>
            Gets or sets the luminance local factor.
            </summary>
            <value>The luminance local factor.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMap.Contrast">
            <summary>
            Gets or sets the contrast.
            </summary>
            <value>The contrast.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMap.Brightness">
            <summary>
            Gets or sets the brightness.
            </summary>
            <value>The brightness.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ToneMapCommonOperator">
            <summary>
            Base operator shared by Reinhard, Drago, Exponential and Logarithmic.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ToneMapOperator">
            <summary>
            Base class for a tonemap operator.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ToneMapOperator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMapOperator"/> class.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <exception cref="T:System.ArgumentNullException">effectName</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapCommonOperator.LuminanceSaturation">
            <summary>
            Gets or sets the luminance saturation.
            </summary>
            <value>The luminance saturation.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapCommonOperator.WhiteLevel">
            <summary>
            Gets or sets the white level.
            </summary>
            <value>The white level.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ToneMapDragoOperator">
            <summary>
            The tonemap Drago operator.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ToneMapDragoOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMapDragoOperator"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapDragoOperator.Bias">
            <summary>
            Gets or sets the bias.
            </summary>
            <value>The bias.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ToneMapExponentialOperator">
            <summary>
            The tonemap exponential operator.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ToneMapExponentialOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMapExponentialOperator"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ToneMapHejlDawsonOperator">
            <summary>
            The tonemap operator by Jim Hejl and Richard Burgess-Dawson.
            </summary>
            <remarks>http://filmicgames.com/archives/75</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ToneMapHejlDawsonOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMapHejlDawsonOperator"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ToneMapLogarithmicOperator">
            <summary>
            The tonemap logarithmic operator.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ToneMapLogarithmicOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMapLogarithmicOperator"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ToneMapMikeDayOperator">
            <summary>
            The tonemap operator by Mike Day, Insomniac Games.
            </summary>
            <remarks>
            https://d3cw3dd2w32x2b.cloudfront.net/wp-content/uploads/2012/09/an-efficient-and-user-friendly-tone-mapping-operator.pdf
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ToneMapMikeDayOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMapMikeDayOperator"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapMikeDayOperator.BlackPoint">
            <summary>
            Gets or sets the black point.
            </summary>
            <value>The black point.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapMikeDayOperator.CrossOver">
            <summary>
            Gets or sets the cross over.
            </summary>
            <value>The cross over.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapMikeDayOperator.WhitePoint">
            <summary>
            Gets or sets the white point.
            </summary>
            <value>The white point.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapMikeDayOperator.Toe">
            <summary>
            Gets or sets the toe.
            </summary>
            <value>The toe.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapMikeDayOperator.Shoulder">
            <summary>
            Gets or sets the shoulder.
            </summary>
            <value>The shoulder.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ToneMapReinhardOperator">
            <summary>
            The tonemap Reinhard operator.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ToneMapReinhardOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMapReinhardOperator"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ToneMapU2FilmicOperator">
            <summary>
            The U2Filmic operator.
            </summary>
            <remarks>
            http://filmicgames.com/archives/75
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ToneMapU2FilmicOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ToneMapU2FilmicOperator"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapU2FilmicOperator.ShoulderStrength">
            <summary>
            Gets or sets the shoulder strength.
            </summary>
            <value>The shoulder strength.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapU2FilmicOperator.LinearStrength">
            <summary>
            Gets or sets the linear strength.
            </summary>
            <value>The linear strength.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapU2FilmicOperator.LinearAngle">
            <summary>
            Gets or sets the linear angle.
            </summary>
            <value>The linear angle.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapU2FilmicOperator.ToeStrength">
            <summary>
            Gets or sets the toe strength.
            </summary>
            <value>The toe strength.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapU2FilmicOperator.ToeNumerator">
            <summary>
            Gets or sets the toe numerator.
            </summary>
            <value>The toe numerator.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapU2FilmicOperator.ToeDenominator">
            <summary>
            Gets or sets the toe denominator.
            </summary>
            <value>The toe denominator.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ToneMapU2FilmicOperator.LinearWhite">
            <summary>
            Gets or sets the linear white.
            </summary>
            <value>The linear white.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.BokehBlur">
            <summary>
            This class represents a blur to apply to a texture to create a bokeh effect. 
            It's not supposed to be used as-is, rather you should use subclasses like <see cref="T:SiliconStudio.Paradox.Rendering.Images.GaussianBokeh"/>, 
            <see cref="T:SiliconStudio.Paradox.Rendering.Images.McIntoshBokeh"/> or <see cref="T:SiliconStudio.Paradox.Rendering.Images.TripleRhombiBokeh"/>... which do actually implement a blur technique leading to 
            a particular bokeh shape (circular, hexagonal).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.BokehBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.BokehBlur"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.BokehBlur.SetColorDepthInput(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Provides a color buffer and a depth buffer to apply the blur to.
            </summary>
            <param name="colorBuffer">A color buffer to process.</param>
            <param name="depthBuffer">The depth buffer corresponding to the color buffer provided.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.BokehBlur.Radius">
            <summary>
            Sets the radius of the blur.
            A child class can override it to do special processing when a new value is provided.
            </summary>
            <param name="value">The new value of the blur.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.BokehTechnique">
            <summary>
            Techniques available to perform a DoF effect on a level.
            The technique directly affects the visual result (bokeh shape) as well as the performance. 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Images.BokehTechnique.CircularGaussian">
            <summary>
            Circular blur using a Gaussian. 
            </summary>
            <remarks>
            Fast and cheap technique but the final bokeh shapes are not very realistic.
            </remarks>
            <userdoc>Use circular Gaussian blur to render the bokehs. This technique produce circular bokehs.
            It is fast and cheap technique but not very realistic.</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Images.BokehTechnique.HexagonalMcIntosh">
            <summary>
            Hexagonal blur using the McIntosh technique.
            </summary>
            <userdoc>Use the McIntosh hexagonal blur to render the bokehs. This technique produce hexagonal bokehs</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Images.BokehTechnique.HexagonalTripleRhombi">
            <summary>
            Hexagonal blur using a combination of 3 rhombi blurs. 
            </summary>
            <userdoc>Use a combination of 3 rhombi blurs to render the bokehs. This technique produce hexagonal bokehs</userdoc>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.BokehTechniqueExtensions.ToBlurInstance(SiliconStudio.Paradox.Rendering.Images.BokehTechnique)">
            <summary>
            Instantiates a new <see cref="T:SiliconStudio.Paradox.Rendering.Images.BokehBlur"/> from a technique name.
            </summary>
            <param name="name"></param>
            <returns>A Bokeh blur corresponding to the tehcnique specified.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.GaussianBokeh">
            <summary>
            Applies a depth-aware gaussian blur to a texture. 
            </summary>
            <remarks>
            This does not produce beautiful bokeh shapes, but it is quite light-weight 
            and performance-friendly.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.GaussianBokeh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.GaussianBokeh"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.McIntoshBokeh">
            <summary>
            Applies a McIntosh blur to a texture. (Hexagonal bokeh)
            </summary>
            <remarks>
            This is a 3-pass (+1 final gathering) technique based on the paper of McIntosh from the Simon Fraser University. (2012)
            http://ivizlab.sfu.ca/papers/cgf2012.pdf
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.McIntoshBokeh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.McIntoshBokeh"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.McIntoshBokeh.Phase">
            <summary>
            Phase of the bokeh effect. (rotation angle in radian)
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.TripleRhombiBokeh">
            <summary>
            Applies a TripleRhombi blur to a texture. (Hexagonal bokeh)
            </summary>
            <remarks>
            This is a technique based on DICE's presentation at Siggraph 2011. 
            http://advances.realtimerendering.com/s2011/White,%20BarreBrisebois-%20Rendering%20in%20BF3%20%28Siggraph%202011%20Advances%20in%20Real-Time%20Rendering%20Course%29.pdf
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.TripleRhombiBokeh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.TripleRhombiBokeh"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.TripleRhombiBokeh.Phase">
            <summary>
            Phase of the bokeh effect. (rotation angle in radian)
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.CoCMapBlur">
            <summary>
            Blurs a Circle of Confusion map.
            </summary>
            <remarks>
            This is useful to avoid strong CoC changes leading to out-of-focus silhouette outline appearing in 
            front of another out-of-focus object.
            Internally it uses a special gaussian blur aware of the depth.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.CoCMapBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.CoCMapBlur"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.CoCMapBlur.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.CombineLevelsFromCoCKeys">
            <summary>
            Keys used by the CombineLevelsFromCoCffect
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.DepthAwareDirectionalBlurKeys">
            <summary>
            Keys used by the DepthAwareDirectionalBlurEffect
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.DepthOfField">
            <summary>
            Applies a depth-of-field effect to a scene.
            It takes as input a color-buffer where the scene was rendered, with its associated depth-buffer.
            You also need to provide the camera configuration you used when rendering the scene.
            You can optionally specify which bokeh technique should be used, the number of LOD levels with 
            their Circle-of-Confusion strengths and their resolution.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.DepthOfField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.DepthOfField"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.DepthOfField.SetColorDepthInput(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Provides a color buffer and a depth buffer to apply the depth-of-field to.
            </summary>
            <param name="colorBuffer">A color buffer to process.</param>
            <param name="depthBuffer">The depth buffer corresponding to the color buffer provided.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.DepthOfField.SetupTechnique">
            <summary>
            Caches the current configuration and re-generates the filter effect of each LOD level to avoid 
            generating garbage a each frame.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.DepthOfField.MaxBokehSize">
            <summary>
            Maximum size of the bokeh (ie. when the circle of confusion is 1.0).
            This is resolution-independent, it is a ratio proportional to the screen width in percentage.
            </summary>
            <remarks>
            This property is not supposed to be modified at each frame since it generates garbage. 
            Instead you should set it once for your scene and play with the DOF areas / lens parameters 
            to make out-of-focus objects create bigger bokeh shapes.
            </remarks>
            <userdoc>Specify the maximum size of the bokehs. This value is resolution-independent (proportional to the screen width in percentage).</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.DepthOfField.DOFAreas">
            <summary>
            Areas of the depth of field: [nearStart, nearEnd, farStart, farEnd] expressed as a 
            distance from the camera.
            </summary>
            <userdoc>Specify the area focused by the depth of field (eg. the not blurred area). 
            It is expressed as distances from the camera: [nearStart, nearEnd, farStart, farEnd].</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.DepthOfField.QualityPreset">
            <summary>
            Affects a preset quality setting, between 0 (lowest quality) and 1 (highest quality).
            This auto-configures <cref name="LevelCoCValues"/> and <cref name="LevelDownscaleFactors"/>.
            </summary>
            <userdoc>The quality of the effect where 0 represents the worst quality and 1 the best one.
            Note that increase the quality of the effect significantly increase the rendering time.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.DepthOfField.Technique">
            <summary>
            Bokeh technique used to blur each level.
            </summary>
            <remarks>
            This influences the bokeh shape (circular, hexagonal...) as well as the performance.
            </remarks>
            <userdoc>Specify the technique used to calculate the bokehs.
            This influences both the shape of the bokehs and the performances of the effect.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.DepthOfField.AutoFocus">
            <summary>
            Auto-focus on the pixel at the center of the screen. 
            </summary>
            <userdoc>If checked, the depth of field area is automatically adjusted to the pixel at the center of the screen.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.DepthOfField.LevelCoCValues">
            <summary>
            The number of layers with their own CoC strength. Note that you need to define 
            at least 1 level of blur, each level of blur should have a CoC stronger than its predecessor and the last
            level should always have a CoC of 1.0. Example: { 0.25f, 0.5f, 1.0f }
            The higher the number of levels is, the smoother the transition between 2 levels is, but at a performance cost.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.DepthOfField.LevelDownscaleFactors">
            <summary>
            For each level defined in <cref name="LevelCoCValues"/> you can define a downscale factor (a power of 2) 
            at which to operate. 
            When not specified, the levels are treated by default at half the resolution of the original image.
            Example: for { 1, 2 }, the first level will be processed at half the original resolution, and the second level at 1/4.
            The array provided must be of the same size as the <cref name="LevelCoCValues"/> array.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.DoFUtil">
            <summary>
            Some util function relevant to the depth-of-field effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.DoFUtil.GetUniformWeightBlurArray(System.Int32)">
            <summary>
            Creates an array with uniform weight along one direction of the blur. 
            </summary>
            <param name="count">Number of taps from the center (included) along one direction.</param>
            <returns>The array with uniform weights.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.GaussianBlur">
            <summary>
            Provides a gaussian blur effect.
            </summary>
            <remarks>
            To improve performance of this gaussian blur is using:
            - a separable 1D horizontal and vertical blur
            - linear filtering to reduce the number of taps
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.GaussianBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.GaussianBlur"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.GaussianBlur.InitializeCore">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.GaussianBlur.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
            <userdoc>The radius of the Gaussian in pixels</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.GaussianBlur.SigmaRatio">
            <summary>
            Gets or sets the sigma ratio. The sigma ratio is used to calculate the sigma based on the radius: The actual
            formula is <c>sigma = radius / SigmaRatio</c>. The default value is 2.0f.
            </summary>
            <value>The sigma ratio.</value>
            <userdoc>The sigma ratio of the Gaussian. The sigma ratio is used to calculate the sigma of the Gaussian. 
            The actual formula is <c>sigma = radius / SigmaRatio</c></userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.GaussianBlurKeys">
            <summary>
            Keys used by <see cref="T:SiliconStudio.Paradox.Rendering.Images.GaussianBlur"/> and GaussianBlurEffect pdxfx
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.GaussianUtil">
            <summary>
            Utility class to calculate 1D Gaussian filter used for separable 2D Gaussian filters.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.GaussianUtil.Calculate1D(System.Int32,System.Single,System.Boolean)">
            <summary>
            Calculate a 1D gaussian filter.
            </summary>
            <param name="radius">The radius.</param>
            <param name="sigmaRatio">The sigma ratio. Default is ratio is 2.0f. Sigma = radius / SigmaRatio</param>
            <param name="disableBilinear">if set to <c>true</c> to disable bilinear offsets/weights.</param>
            <returns>An array of offsets (<see cref="F:SiliconStudio.Core.Mathematics.Vector2.X"/>) and weights (<see cref="F:SiliconStudio.Core.Mathematics.Vector2.Y"/>).</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ImageEffectExtensions">
            <summary>
            Extensions for <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageEffect"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffectExtensions.SetInput(SiliconStudio.Paradox.Rendering.Images.IImageEffect,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets an input texture
            </summary>
            <param name="imageEffect">The post effect.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffectExtensions.SetInput(SiliconStudio.Paradox.Rendering.Images.IImageEffect,SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets two input textures
            </summary>
            <param name="imageEffect">The post effect.</param>
            <param name="texture">The texture.</param>
            <param name="texture2">The texture2.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageEffectExtensions.SetInput(SiliconStudio.Paradox.Rendering.Images.IImageEffect,SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Sets two input textures
            </summary>
            <param name="imageEffect">The post effect.</param>
            <param name="texture">The texture.</param>
            <param name="texture2">The texture2.</param>
            <param name="texture3">The texture3.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects">
            <summary>
            A default bundle of <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageEffect"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects"/> class.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.#ctor(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
            <value>The camera.</value>
            <userdoc>Specifies the camera to use for the sequence of post-effects</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.DepthOfField">
            <summary>
            Gets the depth of field effect.
            </summary>
            <value>The depth of field.</value>
            <userdoc>The depth of field post-effect allows you to accentuate some regions of your image by blurring object in foreground or background.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.BrightFilter">
            <summary>
            Gets the bright pass-filter.
            </summary>
            <value>The bright filter.</value>
            <userdoc>The parameters for the bright filter. The bright filter is not an effect by itself. 
            It just extracts the brightest areas of the image and gives it to other effect that need it (eg. bloom, light streaks, lens-flares).</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.Bloom">
            <summary>
            Gets the bloom effect.
            </summary>
            <value>The bloom.</value>
            <userdoc>Produces a bleeding effect of bright areas onto their surrounding.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.LightStreak">
            <summary>
            Gets the light streak effect.
            </summary>
            <value>The light streak.</value>
            <userdoc>Produces a bleeding effect of the brightest points of the image along streaks.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.LensFlare">
            <summary>
            Gets the lens flare effect.
            </summary>
            <value>The lens flare.</value>
            <userdoc>Simulates the artifacts produced by the internal reflection or scattering of the light within camera lens.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.ColorTransforms">
            <summary>
            Gets the final color transforms.
            </summary>
            <value>The color transforms.</value>
            <userdoc>Performs a transformation onto the image colors.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.PostProcessingEffects.Antialiasing">
            <summary>
            Gets the antialiasing effect.
            </summary>
            <value>The antialiasing.</value>
            <userdoc>Performs anti-aliasing filtering on the image. This smoothes the jagged edges of models.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1">
            <summary>
            Allow readback a Texture from GPU to CPU with a frame delay count to avoid blocking read.
            </summary>
            <typeparam name="T">Pixel struct that should match the input texture format</typeparam>
            <remarks>The input texture should be small enough to avoid CPU/GPU readback stalling</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1.#ctor(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1.FrameDelayCount">
            <summary>
            Gets or sets the number of frame to store before reading back. Default is <c>16</c>.
            </summary>
            <value>The frame delay count.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1.IsResultAvailable">
            <summary>
            Gets a boolean indicating whether a result is available from <see cref="P:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1.Result"/>.
            </summary>
            <value>A result available.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1.IsSlow">
            <summary>
            Gets a boolean indicating whether the readback is slow and may be stalling, indicating a <see cref="P:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1.FrameDelayCount"/> to low or
            an input texture too large for an efficient non-blocking readback.
            </summary>
            <value>The readback is slow and stalling.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1.ForceGetLatestBlocking">
            <summary>
            Gets or sets a value indicating whether [force get latest blocking].
            </summary>
            <value><c>true</c> if [force get latest blocking]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1.ElapsedTime">
            <summary>
            Gets the elapsed time to query the result.
            </summary>
            <value>The elapsed time.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1.Result">
            <summary>
            Gets the result pixels, only valid if <see cref="P:SiliconStudio.Paradox.Rendering.Images.ImageReadback`1.IsResultAvailable"/>
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ImageMultiScaler">
            <summary>
            Allow to up-scale or down-scale a texture (input) multiple times while capturing intermediate mipmap results (outputs).
            </summary>
            <remarks>
            Based on the input texture and output texture, this class automatically downscale or upscale the input texture to the different output textures. 
            The requirement for the output textures are:
            <ul>
            <li>They must have a mipsize compatible with input texture (multiple of 2).</li>
            <li>They must share the same pixel format.</li>
            <li>They must be a different size from input texture.</li>
            <li>They must scale to a single direction (either down or up scale, but not both).</li>
            </ul>
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageMultiScaler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageMultiScaler"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageMultiScaler.PrepareScaling(SiliconStudio.Paradox.Graphics.Texture,System.Int32@,SiliconStudio.Paradox.Graphics.PixelFormat@)">
            <summary>
            Prepares the scaling.
            </summary>
            <param name="inputTexture">The input texture.</param>
            <param name="scalingDirection">The scaling direction.</param>
            <param name="outputPixelFormat">The output pixel format.</param>
            <returns><c>true</c> if we have some output to process; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ImageScaler">
            <summary>
            Scales an input texture to an output texture (down or up, depending on the relative size between input and output)
            </summary>
            <remarks>This effect can be used for downscaling or upscaling if the output rendertarget is smaller/larger than
            the input texture</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.ImageScaler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageScaler"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageScaler.Color">
            <summary>
            Gets or sets the color multiplier. Default is <see cref="F:SiliconStudio.Core.Mathematics.Color.White"/>
            </summary>
            <value>The color multiplier.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageScaler.IsOnlyChannelRed">
            <summary>
            Copy only the red channel. Default is <c>false</c>
            </summary>
            <value><c>true</c> if this instance is only channel red; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.ImageScaler.Sampler">
            <summary>
            Gets or sets the sampler used to sample the input texture. Default is <see cref="F:SiliconStudio.Paradox.Graphics.SamplerStateFactory.LinearClamp"/>
            </summary>
            <value>The sampler.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.ImageScalerShaderKeys">
            <summary>
            Defines default values.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect">
            <summary>
            Luminance effect.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect.LuminanceFormat">
            <summary>
            Luminance texture format.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect.LuminanceLogEffect">
            <summary>
            Luminance log effect.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect.DownscaleCount">
            <summary>
            Gets or sets down scale count used to downscale the input intermediate texture used for local luminance (if no 
            output is given). By default 1/64 of the input texture size.
            </summary>
            <value>Down scale count.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect.UpscaleCount">
            <summary>
            Gets or sets the upscale count used to upscale the downscaled input local luminance texture. By default x16 of the 
            input texture size.
            </summary>
            <value>The upscale count.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect.EnableAverageLuminanceReadback">
            <summary>
            Gets or sets a value indicating whether to enable calculation of <see cref="P:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect.AverageLuminance"/> (default is true).
            </summary>
            <value><c>true</c> if to enable calculation of <see cref="P:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect.AverageLuminance"/>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect.AverageLuminance">
            <summary>
            Gets the average luminance calculated on the GPU. See remarks.
            </summary>
            <value>The average luminance.</value>
            <remarks>
            The average luminance is calculated on the GPU and readback with a few frames of delay, depending on the number of 
            frames in advance between command scheduling and actual execution on GPU.
            </remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.LuminanceEffect.AverageLuminanceTexture">
            <summary>
            Gets the average luminance 1x1 texture available after drawing this effect.
            </summary>
            <value>The average luminance texture.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.LuminanceLogEffect">
            <summary>
            Class LuminanceLogEffect.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Images.LuminanceResult">
            <summary>
            Struct LuminanceResult
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Images.SphericalHarmonics.SphericalHarmonicsRendererEffect.InputSH">
            <summary>
            Gets or sets the harmonic order to use during the filtering.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightShadowImportance">
            <summary>
            Importance of a shadow.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowImportance.Low">
            <summary>
            A low importance means that the shadow has a low visual impact. 
            (e.g shadows from point lights)
            </summary>
            <userdoc>A low importance means that the shadow has a low visual impact (e.g shadows from point lights).</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowImportance.Medium">
            <summary>
            A medium importance shadow means the shadow has a medium visual impact. 
            (e.g shadows from spot lights)
            </summary>
            <userdoc>A medium importance shadow means the shadow has a medium visual impact (e.g shadows from spot lights).</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightShadowImportance.High">
            <summary>
            A high importance means the shadow has a high visual impact.
            (e.g shadows from directional lights)
            </summary>
            <userdoc>A high importance means the shadow has a high visual impact (e.g shadows from directional lights).</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.IEnvironmentLight">
            <summary>
            Base interface for all environment lights.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.ILightColor">
            <summary>
            Defines the interface for describing the color of a light.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.ILightColor.ComputeColor">
            <summary>
            Computes the color of the light (sRgb space).
            </summary>
            <returns>Color3.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightAmbient">
            <summary>
            An ambient light.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightColorRgb">
            <summary>
            A light color described by a rgb color
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightColorRgb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightColorRgb"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightColorRgb.#ctor(SiliconStudio.Core.Mathematics.Color3)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightColorRgb"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightColorRgb.#ctor(SiliconStudio.Core.Mathematics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightColorRgb"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightColorRgb.Color">
            <summary>
            Gets or sets the light color in rgb.
            </summary>
            <value>The color.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.LightComponent">
            <summary>
            Add a light to an <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>, that will be used during rendering.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.LightComponent.DefaultDirection">
            <summary>
            The default direction of a light vector is (x,y,z) = (0,0,-1)
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.LightComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.LightComponent"/> class.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.LightComponent.Position">
            <summary>
            Gets the light position in World-Space (computed by the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightProcessor"/>) (readonly field). See remarks.
            </summary>
            <value>The position.</value>
            <remarks>This property should only be used inside a renderer and not from a script as it is updated after scripts</remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.LightComponent.Direction">
            <summary>
            Gets the light direction in World-Space (computed by the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightProcessor"/>) (readonly field).
            </summary>
            <value>The direction.</value>
            <remarks>This property should only be used inside a renderer and not from a script as it is updated after scripts</remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.LightComponent.BoundingBox">
            <summary>
            The bounding box of this light in WS after the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightProcessor"/> has been applied (readonly field).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.LightComponent.BoundingBoxExt">
            <summary>
            The bounding box extents of this light in WS after the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightProcessor"/> has been applied (readonly field).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.LightComponent.HasBoundingBox">
            <summary>
            The determines whether this instance has a valid bounding box (readonly field).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.LightComponent.Update">
            <summary>
            Updates this instance( <see cref="F:SiliconStudio.Paradox.Engine.LightComponent.Position"/>, <see cref="F:SiliconStudio.Paradox.Engine.LightComponent.Direction"/>, <see cref="F:SiliconStudio.Paradox.Engine.LightComponent.HasBoundingBox"/>, <see cref="F:SiliconStudio.Paradox.Engine.LightComponent.BoundingBox"/>, <see cref="F:SiliconStudio.Paradox.Engine.LightComponent.BoundingBoxExt"/>
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.Type">
            <summary>
            Gets or sets the type of the light.
            </summary>
            <value>The type of the light.</value>
            <userdoc>The type of the light</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.Intensity">
            <summary>
            Gets or sets the light intensity.
            </summary>
            <value>The light intensity.</value>
            <userdoc>The intensity of the light.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.LightComponent.CullingMask">
            <summary>
            Get or sets the layers that the light influences
            </summary>
            <value>
            The layer mask.
            </value>
            <userdoc>The group of entities that this light belongs to.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection">
            <summary>
            A list of <see cref="T:SiliconStudio.Paradox.Engine.LightComponent"/> for a specified <see cref="T:SiliconStudio.Paradox.Engine.EntityGroupMask"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection.Tags">
            <summary>
            Tags attached.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightComponentCollection.CullingMask">
            <summary>
            Gets or sets the culling mask.
            </summary>
            <value>The culling mask.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightDirectional">
            <summary>
            A directional light.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.LightingKeys">
            <summary>
            Keys used for lighting.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightProcessor">
            <summary>
            Process <see cref="T:SiliconStudio.Paradox.Engine.LightComponent"/> stored in an <see cref="T:SiliconStudio.Paradox.Engine.EntityManager"/> by providing grouped lights per types/shadows.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightProcessor"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightProcessor.Lights">
            <summary>
            Gets the active lights.
            </summary>
            <value>The lights.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightSkybox">
            <summary>
            A light coming from a skybox. The <see cref="P:SiliconStudio.Paradox.Rendering.Lights.LightSkybox.SkyboxComponent"/> must be set on the entity in order to see a skybox. 
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightSkybox.SkyboxComponent">
            <summary>
            Gets the skybox component (this is set after the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightProcessor"/> has processed this light.
            </summary>
            <value>The skybox component.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightSkyboxRenderer">
            <summary>
            Light renderer for <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightSkybox"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Lights.LightSpot">
            <summary>
            A spot light.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Lights.LightSpot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Lights.LightSpot"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightSpot.Range">
            <summary>
            Gets or sets the range distance the light is affecting.
            </summary>
            <value>The range.</value>
            <userdoc>The range of the spot light in scene units</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightSpot.AngleInner">
            <summary>
            Gets or sets the spot angle in degrees.
            </summary>
            <value>The spot angle in degrees.</value>
            <userdoc>The angle of the main beam of the light spot.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Lights.LightSpot.AngleOuter">
            <summary>
            Gets or sets the spot angle in degrees.
            </summary>
            <value>The spot angle in degrees.</value>
            <userdoc>The angle of secondary beam of the light spot</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ModelComponentAndPickingRenderer">
            <summary>
            The main renderer for <see cref="T:SiliconStudio.Paradox.Engine.ModelComponent"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderFrame">
            <summary>
            A render frame is a container for a render target and its depth stencil buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderFrame.Current">
            <summary>
            Property key to access the Current <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> from <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrame.#ctor">
            <summary>
            Creates a new render for serialization
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrame.CheckIfResizeRequired(SiliconStudio.Paradox.Rendering.RenderFrame)">
            <summary>
            Checks if resizing this instance is required.
            </summary>
            <param name="referenceFrame">The reference frame.</param>
            <returns><c>true</c> if resizing this instance is required, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrame.Activate(SiliconStudio.Paradox.Rendering.RenderContext,System.Boolean)">
            <summary>
            Activates the specified render context.
            </summary>
            <param name="renderContext">The render context.</param>
            <param name="enableDepth">if set to <c>true</c> [enable depth].</param>
            <exception cref="T:System.ArgumentNullException">renderContext</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrame.op_Implicit(SiliconStudio.Paradox.Rendering.RenderFrame)~SiliconStudio.Paradox.Graphics.Texture">
            <summary>
            Performs an implicit conversion from <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> to <see cref="T:SiliconStudio.Paradox.Graphics.Texture"/>.
            </summary>
            <param name="from">The render frame.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrame.FromTexture(SiliconStudio.Paradox.Graphics.Texture[],SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Recover a <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> from a texture that has been created for a render frame.
            </summary>
            <param name="renderTextures">The texture.</param>
            <param name="depthStencilTexture">The depth stencil texture.</param>
            <returns>The instance of RenderFrame or null if no render frame was used to create this texture.</returns>
            <exception cref="T:System.InvalidOperationException">The texture must be a render target</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrame.FromTexture(SiliconStudio.Paradox.Graphics.Texture,SiliconStudio.Paradox.Graphics.Texture)">
            <summary>
            Recover a <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> from a texture that has been created for a render frame.
            </summary>
            <param name="texture">The texture.</param>
            <param name="depthStencilTexture">The depth stencil texture.</param>
            <returns>The instance of RenderFrame or null if no render frame was used to create this texture.</returns>
            <exception cref="T:System.InvalidOperationException">The texture must be a render target</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrame.NewFake(SiliconStudio.Paradox.Rendering.RenderFrameDescriptor)">
            <summary>
            Creates a fake instance of <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> for serialization.
            </summary>
            <param name="frameDescriptor">The frame descriptor.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/>.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrame.New(SiliconStudio.Paradox.Graphics.GraphicsDevice,SiliconStudio.Paradox.Rendering.RenderFrameDescriptor,SiliconStudio.Paradox.Rendering.RenderFrame)">
            <summary>
            Creates a new instance of <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> from the specified parameters.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="frameDescriptor">The frame descriptor.</param>
            <param name="referenceFrame">The reference frame, when using relative mode for <see cref="P:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor.Mode"/>.</param>
            <returns>A new instance of <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            graphicsDevice
            or
            frameDescriptor
            </exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrame.InitializeFrom(SiliconStudio.Paradox.Rendering.RenderFrameDescriptor,SiliconStudio.Paradox.Graphics.Texture[],SiliconStudio.Paradox.Graphics.Texture,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> class.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="renderTargets">The render target.</param>
            <param name="depthStencil">The depth stencil.</param>
            <param name="ownsResources">if set to <c>true</c> this instance is owning the rendertargets and depth stencil buffer.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderFrame.Descriptor">
            <summary>
            Gets the descriptor of this render frame.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderFrame.RenderTargets">
            <summary>
            Gets or sets the render target.
            </summary>
            <value>The render target.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderFrame.DepthStencil">
            <summary>
            Gets or sets the depth stencil.
            </summary>
            <value>The depth stencil.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialKeys.GenericTexture">
            <summary>
            Generic texture key used by a material
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialKeys.GenericValueColor3">
            <summary>
            Generic texture key used by a material
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialKeys.GenericValueColor4">
            <summary>
            Generic texture key used by a material
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialKeys.GenericValueVector4">
            <summary>
            Generic texture key used by a material
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialKeys.TextureScale">
            <summary>
            Texture UV scaling
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialKeys.TextureOffset">
            <summary>
            Texture UV offset
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialKeys.GenericValueFloat">
            <summary>
            Generic texture key used by a material
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Materials.MaterialKeys.Sampler">
            <summary>
            Generic sampler key used by a material
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Materials.MaterialStreamDescriptor">
            <summary>
            A Material Stream.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialStreamDescriptor.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialStreamDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="stream">The stream.</param>
            <param name="colorType">Type of the color.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Materials.MaterialStreamDescriptor.#ctor(System.String,System.String,SiliconStudio.Paradox.Shaders.ShaderSource)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialStreamDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="stream">The stream.</param>
            <param name="filter">The filter.</param>
            <exception cref="T:System.ArgumentNullException">
            name
            or
            stream
            </exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialStreamDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialStreamDescriptor.Stream">
            <summary>
            Gets the stream name.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Materials.MaterialStreamDescriptor.Filter">
            <summary>
            Gets the filter to modify the shader.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderFrameDepthFormat">
            <summary>
            The format of the depth stencil buffer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderFrameDepthFormat.Shared">
            <summary>
            Use the depth stencil buffer from the current frame without creating a new one (only if the size are the same)
            </summary>
            <userdoc>Use the depth stencil buffer from the current frame without creating a new one (only if the size are the same).</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderFrameDepthFormat.None">
            <summary>
            No depth stencil is used.
            </summary>
            <userdoc>No depth stencil is used.</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderFrameDepthFormat.Depth">
            <summary>
            A depth only buffer.
            </summary>
            <userdoc>A depth only buffer.</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderFrameDepthFormat.DepthAndStencil">
            <summary>
            The depth and stencil buffer.
            </summary>
            <userdoc>The depth and stencil buffer.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor">
            <summary>
            A descriptor used to create a <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor.Default">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
            <userdoc>Specifies how the size of the render frame should be determined. 
            Fixed to have a frame of fixed size in pixels. Relative to have frame size relative to the size of the bound back buffer.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor.Width">
            <summary>
            Gets or sets the width, in pixels when <see cref="P:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor.Mode"/> is <see cref="F:SiliconStudio.Paradox.Rendering.RenderFrameSizeMode.Fixed"/> 
            or in percentage when <see cref="F:SiliconStudio.Paradox.Rendering.RenderFrameSizeMode.Relative"/>
            </summary>
            <value>The width.</value>
            <userdoc>The width of the render frame, in pixels or percentage depending on the render target 'Mode'.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor.Height">
            <summary>
            Gets or sets the height, in pixels when <see cref="P:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor.Mode"/> is <see cref="F:SiliconStudio.Paradox.Rendering.RenderFrameSizeMode.Fixed"/> 
            or in percentage when <see cref="F:SiliconStudio.Paradox.Rendering.RenderFrameSizeMode.Relative"/>
            </summary>
            <value>The height.</value>
            <userdoc>The height of the render frame, in pixels or percentage depending on the render target 'Mode'.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor.Format">
            <summary>
            Gets or sets the pixel format of this render frame.
            </summary>
            <value>The format.</value>
            <userdoc>Specifies the pixel format of the color render target.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderFrameDescriptor.DepthFormat">
            <summary>
            Gets or sets the depth format.
            </summary>
            <value>The depth format.</value>
            <userdoc>Specifies the depth format of the depth buffer. 'Shared' uses the currently bound depth buffer.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderFrameFormat">
            <summary>
            The pixel format of the render target.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderFrameFormat.None">
            <summary>
            No render target.
            </summary>
            <userdoc>No render target.</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderFrameFormat.LDR">
            <summary>
            The rendering target is a 32bits bits targets (4 x 16 bits half floats per RGBA component).
            </summary>
            <userdoc>The rendering target is a 32bits bits targets (4 x 16 bits half floats per RGBA component).</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderFrameFormat.HDR">
            <summary>
            The rendering target is a floating point 64 bits targets (4 x 16 bits half floats per RGBA component).
            </summary>
            <userdoc>The rendering target is a floating point 64 bits targets (4 x 16 bits half floats per RGBA component).</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderFrameSizeMode">
            <summary>
            The size of a <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderFrameSizeMode.Relative">
            <summary>
            The size of the render frame is relative in percentage to the <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.BackBuffer"/> size or 
            the render target being rendered in a composite rendering.
            </summary>
            <userdoc>The size of the render frame is relative in percentage to the <see cref="P:SiliconStudio.Paradox.Graphics.GraphicsDevice.BackBuffer"/> size or 
            the render target being rendered in a composite rendering.</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderFrameSizeMode.Fixed">
            <summary>
            The size is fixed in pixels.
            </summary>
            <userdoc>The size of the render frame is fixed in pixels.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer">
            <summary>
            A graphics layer.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer.Master">
            <summary>
            Property key to access the Master <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> from <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer.CurrentInput">
            <summary>
            Property key to access the Input <see cref="T:SiliconStudio.Paradox.Rendering.RenderFrame"/> from the current SceneGraphicsLayer
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer.Add(SiliconStudio.Paradox.Rendering.ISceneRenderer)">
            <summary>
            Adds the specified scene renderer.
            </summary>
            <param name="sceneRenderer">The scene renderer.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer.Name">
            <summary>
            Gets or set the name of the graphic layer.
            </summary>
            <userdoc>The name used to identify the graphic layer</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer.Output">
            <summary>
            Gets or sets the output of this layer.
            </summary>
            <value>The output.</value>
            <userdoc>
            Defines the output of a layer. This can be a local or shared render target.
            (This can be the previous layer or a specific layer or a render target...etc.)
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Composers.SceneGraphicsLayer.Renderers">
            <summary>
            Gets the renderers that will be used to render this layer.
            </summary>
            <value>The renderers.</value>
            <userdoc>
            The sequence of renderers that will be used to render this layer.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Shadows.ShadowMapKeys">
            <summary>
            Keys used for shadow mapping.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Shadows.ShadowMapKeys.Texture">
            <summary>
            Final shadow map texture.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Shadows.ShadowMapKeys.TextureSize">
            <summary>
            Final shadow map texture size
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Shadows.ShadowMapKeys.TextureTexelSize">
            <summary>
            Final shadow map texture texel size.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Skyboxes.Skybox">
            <summary>
            The Skybox at runtime.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Skyboxes.Skybox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Skyboxes.Skybox"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Skyboxes.Skybox.Parameters">
            <summary>
            Gets or sets the parameters compiled for the runtime for the skybox.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxBackground">
            <summary>
            Defines how the background parameters used for this skybox.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxBackground.Color">
            <summary>
            Display the color of the skybox.
            </summary>
            <userdoc>Display to color of the skybox</userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxBackground.Irradiance">
            <summary>
            Display the irradiance of the skybox
            </summary>
            <userdoc>Display the irradiance generated from the skybox</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxComponentRenderer">
            <summary>
            A renderer for a skybox.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxComponentRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxComponentRenderer"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxProcessor">
            <summary>
            A default entity processor for <see cref="T:SiliconStudio.Paradox.Engine.SkyboxComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxProcessor"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxProcessor.GenerateAssociatedData(SiliconStudio.Paradox.Engine.Entity)">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Skyboxes.SkyboxProcessor.ActiveSkyboxBackground">
            <summary>
            Gets the active skybox background.
            </summary>
            <value>The active skybox background.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Tessellation.TessellationKeys.DesiredTriangleSize">
            <summary>
            Desired maximum triangle size in screen space during tessellation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Tessellation.TessellationKeys.SmoothingMap">
            <summary>
            The intensity of the smoothing for PN-based tessellation.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.ISceneEditorGraphicsModeSettings">
            <summary>
            Rendering settings.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.ISceneEditorGraphicsModeSettings.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
            <userdoc>The background color used by the editor view</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.ISpriteProvider">
            <summary>
            The base interface for all classes providing a sequence of sprites.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.ISpriteProvider.GetSprite(System.Int32)">
            <summary>
            Get the sprite located at <paramref name="index"/> in the sprite sequence.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.ISpriteProvider.SpritesCount">
            <summary>
            Gets the number of sprites available in the sequence.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.ModelProcessor">
            <summary>
            The processor for <see cref="T:SiliconStudio.Paradox.Engine.ModelComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Processors.ModelProcessor.linkTransformationToUpdate">
            <summary>
            The link transformation to update.
            </summary>
            <remarks>The collection is declared globally only to avoid allocation at each frames</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ModelProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Processors.ModelProcessor"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Processors.ModelProcessor.ModelGroups">
            <summary>
            Gets the current models to render per group.
            </summary>
            <value>The current models to render.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.ChildSceneComponentChangedEventArgs">
            <summary>
            An event occurring when the <see cref="P:SiliconStudio.Paradox.Engine.ChildSceneComponent.Scene"/> changed.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ChildSceneComponentChangedEventArgs.#ctor(SiliconStudio.Paradox.Engine.ChildSceneComponent,SiliconStudio.Paradox.Engine.Scene,SiliconStudio.Paradox.Engine.Scene)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Processors.ChildSceneComponentChangedEventArgs"/> struct.
            </summary>
            <param name="component">The child component.</param>
            <param name="previousScene">The previous scene.</param>
            <param name="newScene">The new scene.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Processors.ChildSceneComponentChangedEventArgs.Component">
            <summary>
            The child component
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Processors.ChildSceneComponentChangedEventArgs.PreviousScene">
            <summary>
            The previous scene
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Processors.ChildSceneComponentChangedEventArgs.NewScene">
            <summary>
            The new scene
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.ChildSceneProcessor">
            <summary>
            The scene child processor to handle a child scene. See remarks.
            </summary>
            <remarks>
            This processor is handling specially an entity with a <see cref="T:SiliconStudio.Paradox.Engine.ChildSceneComponent"/>. If an scene component is found, it will
            create a sub-<see cref="T:SiliconStudio.Paradox.Engine.EntityManager"/> dedicated to handle the entities inside the child scene.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ChildSceneProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Processors.ChildSceneProcessor"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Processors.ChildSceneProcessor.ContainingScene">
            <summary>
            Returns the scene containing the processor.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.SceneEditorCameraSettings">
            <summary>
            Settings for the Camera.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.SceneEditorCameraSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Design.SceneEditorSettings"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.SceneEditorCameraSettings.CopyTo(SiliconStudio.Paradox.Engine.CameraComponent)">
            <summary>
            Copies main parameters from this component to the specified instance.
            </summary>
            <param name="camera">The camera to receive copied parameters from this instance.</param>
            <exception cref="T:System.ArgumentNullException">camera</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorCameraSettings.Projection">
            <summary>
            Gets or sets the projection.
            </summary>
            <value>The projection.</value>
            <userdoc>The type of projection used by the camera.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorCameraSettings.VerticalFieldOfView">
            <summary>
            Gets or sets the vertical field of view in degrees.
            </summary>
            <value>
            The vertical field of view.
            </value>
            <userdoc>The vertical field-of-view used by the camera (in degrees).</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorCameraSettings.OrthographicSize">
            <summary>
            Gets or sets the height of the orthographic projection.
            </summary>
            <value>
            The height of the orthographic projection.
            </value>
            <userdoc>The height of the orthographic projection (the width is automatically calculated based on the target ratio).</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorCameraSettings.NearPlane">
            <summary>
            Gets or sets the near plane distance.
            </summary>
            <value>
            The near plane distance.
            </value>
            <userdoc>The value of the near clip plane.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorCameraSettings.FarPlane">
            <summary>
            Gets or sets the far plane distance.
            </summary>
            <value>
            The far plane distance.
            </value>
            <userdoc>The value of the far clip plane.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.SceneEditorGraphicsModeHDRSettings">
            <summary>
            Settings for a HDR rendering
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.SceneEditorGraphicsModeSettingsBase">
            <summary>
            Base implementation of <see cref="T:SiliconStudio.Paradox.Engine.Design.ISceneEditorGraphicsModeSettings"/>
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorGraphicsModeSettingsBase.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <userdoc>The color used as the scene editor background.</userdoc>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.SceneEditorGraphicsModeHDRSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Design.SceneEditorGraphicsModeHDRSettings"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorGraphicsModeHDRSettings.PostProcessingEffects">
            <summary>
            Gets or sets the default post processing effects.
            </summary>
            <value>The post processing effects.</value>
            <userdoc>Default post processing effects applied to the scene in the editor</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.SceneEditorGraphicsModeLDRSettings">
            <summary>
            Settings for a LDR rendering.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.SceneEditorGraphicsModeLDRSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Design.SceneEditorGraphicsModeLDRSettings"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.SceneEditorSettings">
            <summary>
            Settings for the editor when viewing a scene in the scene editor.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.SceneEditorSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Design.SceneEditorSettings"/> class.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorSettings.GridColor">
            <summary>
            Gets or sets the color of the grid.
            </summary>
            <value>The color of the grid.</value>
            <userdoc>The color of the grid used in scene editor</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorSettings.SceneUnit">
            <summary>
            Gets or sets the scene unit, used to scale entity gizmos and camera speed.
            </summary>
            <value>The color of the background.</value>
            <userdoc>The scene unit, used to scale gizmos and camera speed.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorSettings.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
            <value>The camera.</value>
            <userdoc>The settings for the camera used in the scene editor</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.SceneEditorSettings.Mode">
            <summary>
            Gets or sets a value indicating whether to use HDR when displaying a scene in the editor.
            </summary>
            <value><c>true</c> if [use HDR]; otherwise, <c>false</c>.</value>
            <userdoc>Specifies the type of rendering used in the scene editor. Basically, specifies if the scene editor should run in LDR or HDR mode.</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.SceneProcessor">
            <summary>
            The scene processor to handle a scene. See remarks.
            </summary>
            <remarks>
            This processor is handling specially an entity with a scene component. If an scene component is found, it will
            create a sub-<see cref="T:SiliconStudio.Paradox.Engine.EntityManager"/> dedicated to handle the entities inside the scene.
            </remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.SceneProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Processors.SceneProcessor"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.SceneProcessor.#ctor(SiliconStudio.Paradox.Engine.SceneInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Processors.SceneProcessor"/> class.
            </summary>
            <param name="sceneInstance">The scene instance.</param>
            <exception cref="T:System.ArgumentNullException">sceneEntityRoot</exception>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.ScriptProcessor">
            <summary>
            Manage scripts
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ScriptProcessor.GenerateAssociatedData(SiliconStudio.Paradox.Engine.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ScriptProcessor.OnEntityAdding(SiliconStudio.Paradox.Engine.Entity,SiliconStudio.Paradox.Engine.Processors.ScriptProcessor.AssociatedData)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ScriptProcessor.OnEntityRemoved(SiliconStudio.Paradox.Engine.Entity,SiliconStudio.Paradox.Engine.Processors.ScriptProcessor.AssociatedData)">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromSheet">
            <summary>
            A sprite provider from a <see cref="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromSheet.Sheet"/>
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromSheet.Sheet">
            <summary>
            Gets or sets the <see cref="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromSheet.Sheet"/> of the provider.
            </summary>
            <userdoc>The sheet that provides the sprites</userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromTexture">
            <summary>
            A <see cref="T:SiliconStudio.Paradox.Graphics.Sprite"/> provider from a <see cref="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromTexture.Texture"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromTexture.#ctor">
            <summary>
            Creates a new instance of <see cref="T:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromTexture"/>.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromTexture.Texture">
            <summary>
            Gets or sets the texture of representing the sprite
            </summary>
            <userdoc>Specify the texture to use as sprite</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromTexture.PixelsPerUnit">
            <summary>
            Gets or sets the value specifying the size of one pixel in scene units
            </summary>
            <userdoc>
            Specify the size in pixels of one unit in the scene.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromTexture.Center">
            <summary>
            The position of the center of the image in pixels.
            </summary>
            <userdoc>
            The position of the center of the sprite in pixels. 
            Depending on the value of 'CenterFromMiddle', it is the offset from the top/left corner or the middle of the image.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromTexture.CenterFromMiddle">
            <summary>
            Gets or sets the value indicating position provided to <see cref="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromTexture.Center"/> is from the middle of the sprite region or from the left/top corner.
            </summary>
            <userdoc>
            If checked, the value in 'Center' represents the offset of the sprite center from the middle of the image.
            </userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteFromTexture.IsTransparent">
            <summary>
            Gets or sets the transparency value of the sprite.
            </summary>
            <userdoc>
            If checked, the sprite is considered as having transparent colors.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Sprites.SpriteType">
            <summary>
            Enumerates the different types of sprites.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Sprites.SpriteType.Sprite">
            <summary>
            A 3D sprite.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Sprites.SpriteType.Billboard">
            <summary>
            A billboard sprite.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.UIComponentProcessor">
            <summary>
            The processor in charge of updating and drawing the entities having sprite components.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.UIComponentProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Sprites.SpriteProcessor"/> class.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.DefaultEntityComponentProcessorAttribute">
            <summary>
            An attribute used to associate a default <see cref="T:SiliconStudio.Paradox.Engine.EntityProcessor"/> to an entity component.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.DefaultEntityComponentProcessorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Design.DefaultEntityComponentProcessorAttribute"/> class.
            </summary>
            <param name="type">The type must derived from <see cref="T:SiliconStudio.Paradox.Engine.EntityProcessor"/>.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.EntityComponentEventArgs">
            <summary>
            An event when an <see cref="T:SiliconStudio.Paradox.Engine.EntityComponent"/> changed in an <see cref="F:SiliconStudio.Paradox.Engine.Design.EntityComponentEventArgs.Entity"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.EntityComponentEventArgs.#ctor(SiliconStudio.Paradox.Engine.Entity,SiliconStudio.Core.PropertyKey,SiliconStudio.Paradox.Engine.EntityComponent,SiliconStudio.Paradox.Engine.EntityComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Design.EntityComponentEventArgs"/> struct.
            </summary>
            <param name="entity">The entity.</param>
            <param name="componentKey">The component key.</param>
            <param name="previousComponent">The previous component.</param>
            <param name="newComponent">The new component.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EntityComponentEventArgs.Entity">
            <summary>
            The entity
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EntityComponentEventArgs.ComponentKey">
            <summary>
            The component key
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EntityComponentEventArgs.PreviousComponent">
            <summary>
            The previous component
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EntityComponentEventArgs.NewComponent">
            <summary>
            The new component
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.EffectCompileRequest">
            <summary>
            Represents an effect compile request done to the <see cref="T:SiliconStudio.Paradox.Rendering.EffectSystem"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Extensions.GeometricPrimitiveExtensions">
            <summary>
            An extension class for the <see cref="T:SiliconStudio.Paradox.Graphics.GeometricPrimitives.GeometricPrimitive"/>
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.DefaultEntityComponentRendererAttribute">
            <summary>
            An attribute used to associate a default <see cref="T:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer"/> to an entity component.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.DefaultEntityComponentRendererAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Design.DefaultEntityComponentRendererAttribute"/> class.
            </summary>
            <param name="type">The type must derived from <see cref="T:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer"/>.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.DefaultEntityComponentRendererAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Design.DefaultEntityComponentRendererAttribute"/> class.
            </summary>
            <param name="type">The type must derived from <see cref="T:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer"/>.</param>
            <param name="order">The order.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.EntityComponentRendererType">
            <summary>
            Defines the default <see cref="T:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer"/> attached to an <see cref="T:SiliconStudio.Paradox.Engine.EntityComponent"/>. 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.EntityComponentRendererType.#ctor(System.Type,System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Design.EntityComponentRendererType"/> struct.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="rendererType">The type.</param>
            <param name="displayOrder">The display order.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EntityComponentRendererType.ComponentType">
            <summary>
            The type of component. Must be derived from <see cref="T:SiliconStudio.Paradox.Engine.EntityComponent"/>/
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EntityComponentRendererType.RendererType">
            <summary>
            The type of the renderer. Must derived from <see cref="T:SiliconStudio.Paradox.Rendering.IEntityComponentRenderer"/> and have a public parameter-less
            constructor.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EntityComponentRendererType.DisplayOrder">
            <summary>
            The display order of this renderer. Zero is the default for the <see cref="T:SiliconStudio.Paradox.Engine.ModelComponent"/> renderer.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.EntityGroupMask">
            <summary>
            A mask for <see cref="T:SiliconStudio.Paradox.Engine.EntityGroup"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.EntityGroupMaskExtensions">
            <summary>
            Extensions for <see cref="T:SiliconStudio.Paradox.Engine.EntityGroupMask"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityGroupMaskExtensions.Contains(SiliconStudio.Paradox.Engine.EntityGroupMask,SiliconStudio.Paradox.Engine.EntityGroup)">
            <summary>
            Determines whether the group mask contains the specified group.
            </summary>
            <param name="mask">The mask.</param>
            <param name="group">The group.</param>
            <returns><c>true</c> if the group mask contains the specified group; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.SimpleExtensions.IsSimple(SiliconStudio.Paradox.Graphics.VertexBufferBinding)">
            <summary>
            Determines whether the specified vertex buffer binding data is simple.
            A vertex buffer binding data is simple if:
            * Offset is 0.
            * Stride is 0 (automatic), or equals to Declaration.VertexStride.
            * Buffer.Content.Length is equal to Declaration.VertexStride * Count
            </summary>
            <param name="vertexBufferBindingData">The vertex buffer binding data.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.SimpleExtensions.IsSimple(SiliconStudio.Paradox.Graphics.IndexBufferBinding)">
            <summary>
            Determines whether the specified index buffer binding data is simple.
            A index buffer binding data is simple if:
            * Offset is 0.
            * Is32Bit is true.
            * Buffer.Content.Length is equal to sizeof(int) * Count.
            </summary>
            <param name="indexBufferBindingData">The index buffer binding data.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.SimpleExtensions.IsSimple(SiliconStudio.Paradox.Rendering.MeshDraw)">
            <summary>
            Determines whether the specified mesh draw data is simple.
            A <see cref="!:MeshDrawData"/> is simple if:
            * It contains only one <see cref="!:VertexBufferBindingData"/>, which must be simple.
            * It contains either no <see cref="!:IndexBufferBindingData"/>, or a simple one.
            * StartLocation is 0.
            * DrawCount is IndexBuffer.Count if there is an index buffer, otherwise VertexBuffers[0].Count.
            </summary>
            <param name="meshDrawData">The mesh draw data.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.MergeDrawData(System.Collections.Generic.IList{SiliconStudio.Paradox.Rendering.MeshDraw},System.Boolean)">
            <summary>
            Transform a vertex buffer positions, normals, tangents and bitangents using the given matrix.
            </summary>
            <param name="meshDrawDatas">The mesh draw datas.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.CreateDeclarationMergeGroup(System.Collections.Generic.IList{SiliconStudio.Paradox.Rendering.MeshDraw})">
            <summary>
            Group meshes that can be merged because they have the same vertex declaration.
            </summary>
            <param name="meshDrawDatas">The list of meshes.</param>
            <returns>A list of grouped meshes.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.CreateOptimizedMergeGroups(System.Collections.Generic.IList{SiliconStudio.Paradox.Rendering.MeshDraw},System.Boolean)">
            <summary>
            Create group of MeshDrawData that will be merged.
            </summary>
            <param name="meshDrawDatas">List of MehsDrawData to merge.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers are allowed.</param>
            <returns>A List of groups to merge internally.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.CreateShortIndexBuffer(System.Int32,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Create an short typed index buffer.
            </summary>
            <param name="offset">The offset to apply to the indices.</param>
            <param name="count">The number of indices.</param>
            <param name="baseIndices">A possible base index buffer</param>
            <param name="is32Bit">Stating if baseIndices is filled with 32 bits int</param>
            <returns>A new index buffer.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.CreateIntIndexBuffer(System.Int32,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Create an int typed index buffer.
            </summary>
            <param name="offset">The offset to apply to the indices.</param>
            <param name="count">The number of indices.</param>
            <param name="baseIndices">A possible base index buffer</param>
            <param name="is32Bits">Stating if baseIndices is filled with 32 bits int</param>
            <returns>A new index buffer.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.IsIndexed(System.Collections.Generic.IList{SiliconStudio.Paradox.Rendering.MeshDraw})">
            <summary>
            Check if a index buffer will be needed for this merge group.
            </summary>
            <param name="meshDrawDatas">The list of MeshDrawdata to merge.</param>
            <returns>True if an index is needed, false otherwise.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.MergeExtensions.GroupDrawData(System.Collections.Generic.IList{SiliconStudio.Paradox.Rendering.MeshDraw},System.Boolean)">
            <summary>
            Group the meshes.
            </summary>
            <param name="meshDrawDatas">The list of meshes to group.</param>
            <param name="can32BitIndex">A flag stating if 32 bit index buffers are allowed</param>
            <returns>The list of merged meshes.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.SplitExtensions.SplitMesh(SiliconStudio.Paradox.Rendering.MeshDraw,System.Boolean)">
            <summary>
            Split the mesh if it has strictly more than 65535 vertices (max index = 65534) on a plaftorm that does not support 32 bits indices.
            </summary>
            <param name="meshDrawData">The mesh to analyze.</param>
            <param name="can32bitIndex">A flag stating if 32 bit indices are allowed.</param>
            <returns>A list of meshes.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.SplitExtensions.AddTriangle(SiliconStudio.Paradox.Extensions.SplitExtensions.SplitInformation,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Add the triangle to the split information.
            </summary>
            <param name="currentSplit">The current split information.</param>
            <param name="index0">The index of the first vertex.</param>
            <param name="index1">The index of the second vertex.</param>
            <param name="index2">The index of the third vertex.</param>
            <param name="triangleIndex">The original index of the triangle.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.TransformExtensions.TransformBuffer(SiliconStudio.Paradox.Graphics.VertexBufferBinding,SiliconStudio.Core.Mathematics.Matrix@)">
            <summary>
            Transform a vertex buffer positions, normals, tangents and bitangents using the given matrix.
            </summary>
            <param name="meshData">The mesh data.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.KeyFrameData`1">
            <summary>
            A single key frame value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.BackgroundComponentRenderer">
            <summary>
            This renderer draws a full-screen image as background. 
            The ratio or the texture used is preserved. The texture is centered and cropped along X or Y axis depending on the screen ratio.
            </summary>
            <remarks>This renderer does not write into the depth buffer</remarks>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.CameraComponentRenderer">
            <summary>
            Updates the parameters in the 
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.CameraComponentRenderer.Current">
            <summary>
            Property key to access the current collection of <see cref="T:SiliconStudio.Paradox.Engine.CameraComponent"/> from <see cref="!:RenderContext.Tags"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.DefaultEffectInstance">
            <summary>
            An effect instance using a set of <see cref="T:SiliconStudio.Paradox.Rendering.ParameterCollection"/> for creating <see cref="T:SiliconStudio.Paradox.Graphics.Effect"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.DynamicEffectInstance">
            <summary>
            A dynamic effect instance updated by <see cref="T:SiliconStudio.Paradox.Rendering.DynamicEffectCompiler"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DynamicEffectInstance.FillParameterCollections(SiliconStudio.Core.Collections.FastList{SiliconStudio.Paradox.Rendering.ParameterCollection})">
            <summary>
            Fills the parameter collections used by this instance.
            </summary>
            <param name="parameterCollections">The parameter collections.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.DynamicEffectInstance.Effect">
            <summary>
            Gets the effect currently being compiled.
            </summary>
            <value>The effect.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DefaultEffectInstance.#ctor(SiliconStudio.Paradox.Rendering.ParameterCollection[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.DefaultEffectInstance"/> class.
            </summary>
            <param name="parameterCollections">The parameter collections.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DefaultEffectInstance.#ctor(System.Collections.Generic.IEnumerable{SiliconStudio.Paradox.Rendering.ParameterCollection})">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.DefaultEffectInstance"/> class.
            </summary>
            <param name="parameterCollections">The parameter collections.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.DynamicEffectCompiler">
            <summary>
            Provides a dynamic compiler for an effect based on parameters changed.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DynamicEffectCompiler.#ctor(SiliconStudio.Core.IServiceRegistry,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.DynamicEffectCompiler"/> class.
            </summary>
            <param name="services">The services.</param>
            <param name="effectName">Name of the effect.</param>
            <param name="asyncDynamicEffectCompiler">if set to <c>true</c> it can compile effect asynchronously.</param>
            <exception cref="T:System.ArgumentNullException">services
            or
            effectName</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DynamicEffectCompiler.Update(SiliconStudio.Paradox.Rendering.DynamicEffectInstance,SiliconStudio.Paradox.Rendering.ParameterCollection)">
            <summary>
            Update a dynamic effect instance based on its parameters.
            </summary>
            <param name="effectInstance">A dynmaic effect instance</param>
            <param name="passParameters">The pass parameters.</param>
            <returns><c>true</c> if the effect was recomiled on the effect instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DynamicEffectCompiler.PrepareUpdater(SiliconStudio.Paradox.Rendering.DynamicEffectInstance,SiliconStudio.Paradox.Rendering.ParameterCollection)">
            <summary>
            Prepare the EffectParameterUpdater for the effect instance.
            </summary>
            <param name="effectInstance">The effect instance.</param>
            <param name="passParameters">The pass parameters.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.DynamicEffectCompiler.Services">
            <summary>
            Gets the services.
            </summary>
            <value>The services.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.DynamicEffectCompiler.EffectName">
            <summary>
            Gets the name of the effect.
            </summary>
            <value>The name of the effect.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.DynamicEffectCompiler.EffectSystem">
            <summary>
            Gets or sets the effect system.
            </summary>
            <value>The effect system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.DynamicEffectCompiler.GraphicsDevice">
            <summary>
            Gets or sets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.DynamicEffectParameterCollectionGroup.#ctor(SiliconStudio.Paradox.Rendering.ParameterCollection[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.DynamicEffectParameterCollectionGroup"/> class.
            </summary>
            <param name="parameterCollections">The parameter collections.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Material">
            <summary>
            A compiled version of <see cref="T:SiliconStudio.Paradox.Rendering.Materials.MaterialDescriptor"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Material.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Material"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Material.#ctor(SiliconStudio.Paradox.Rendering.ParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Material"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Material.TessellationMethod">
            <summary>
            The tessellation method used by the material.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Material.New(SiliconStudio.Paradox.Rendering.Materials.MaterialDescriptor)">
            <summary>
            Creates a new material from the specified descriptor.
            </summary>
            <param name="descriptor">The material descriptor.</param>
            <returns>An instance of a <see cref="T:SiliconStudio.Paradox.Rendering.Material"/>.</returns>
            <exception cref="T:System.ArgumentNullException">descriptor</exception>
            <exception cref="T:System.InvalidOperationException">If an error occurs with the material description</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Material.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Material.HasTransparency">
            <summary>
            Gets or sets a value indicating whether this instance has transparent.
            </summary>
            <value><c>true</c> if this instance has transparent; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Material.Descriptor">
            <summary>
            Gets or sets the descriptor (this field is null at runtime).
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.MaterialAssetKeys">
            <summary>
            Defines keys associated with mesh used for compiling assets.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.MaterialAssetKeys.UseParameters">
            <summary>
            When compiling effect with an EffectLibraryAsset (pdxfxlib), set it to true to allow permutation based on the 
            parameters of all materials.
            </summary>
            <userdoc>
            If checked, the material parameters will be used to generate effects.
            </userdoc>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.MaterialAssetKeys.GenerateShader">
            <summary>
            Allow material compilation without mesh.
            </summary>
            <userdoc>
            If checked, the materials will generate a shader even if they are not attached to a mesh.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.MeshBoneDefinition">
            <summary>
            Describes a bone cluster inside a <see cref="T:SiliconStudio.Paradox.Rendering.Mesh"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.MeshBoneDefinition.NodeIndex">
            <summary>
            The node index in <see cref="P:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater.NodeTransformations"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.MeshBoneDefinition.LinkToMeshMatrix">
            <summary>
            The matrix to transform from mesh space to local space of this bone.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.MeshKeys">
            <summary>
            Defines keys associated with mesh used for compiling assets.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.MeshKeys.UseParameters">
            <summary>
            When compiling effect with an EffectLibraryAsset (pdxfxlib), set it to true to allow permutation based on the 
            parameters of all meshes.
            </summary>
            TODO: allow permutation for a specific mesh
            <userdoc>
            If checked, the mesh parameters will be used to generate effects.
            </userdoc>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.MeshSkinningUpdater">
            <summary>
            Performs blend matrix skinning.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.MeshSkinningDefinition">
            <summary>
            Describes skinning for a <see cref="T:SiliconStudio.Paradox.Rendering.Mesh"/>, through a collection of <see cref="T:SiliconStudio.Paradox.Rendering.MeshBoneDefinition"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.MeshSkinningDefinition.Bones">
            <summary>
            The bones.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ModelNodeFlags">
            <summary>
            Flags describing state of a <see cref="T:SiliconStudio.Paradox.Rendering.ModelNodeDefinition"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ModelNodeFlags.EnableTransform">
            <summary>
            If true, <see cref="F:SiliconStudio.Paradox.Rendering.ModelNodeTransformation.Transform"/> will be used to update <see cref="F:SiliconStudio.Paradox.Rendering.ModelNodeTransformation.LocalMatrix"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ModelNodeFlags.EnableRender">
            <summary>
            If true, associated <see cref="T:SiliconStudio.Paradox.Rendering.Mesh"/> will be rendered.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ModelNodeFlags.Default">
            <summary>
            The default flags.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater">
            <summary>
            Performs hierarchical updates for a given <see cref="T:SiliconStudio.Paradox.Rendering.Model"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater.#ctor(SiliconStudio.Paradox.Rendering.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater.#ctor(SiliconStudio.Paradox.Rendering.ModelNodeDefinition[])">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater"/> class.
            </summary>
            <param name="newNodes">The new nodes.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater.ResetInitialValues">
            <summary>
            Resets initial values.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater.UpdateMatrices">
            <summary>
            For each node, updates the world matrices from local matrices.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater.UpdateToRenderModel(SiliconStudio.Paradox.Rendering.RenderModel,System.Int32)">
            <summary>
            Updates previously computed world matrices to TransformationKeys.World for each <see cref="T:SiliconStudio.Paradox.Rendering.Mesh"/>.
            </summary>
            <param name="renderModel">The render model.</param>
            <param name="slot">The slot.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ModelViewHierarchyDefinition">
            <summary>
            Describes hiderarchical nodes in a flattened array.
            </summary>
            <remarks>
            Nodes are ordered so that parents always come first, allowing for hierarchical updates in a simple loop.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ModelViewHierarchyDefinition.Nodes">
            <summary>
            The nodes in this hierarchy.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ModelNodeDefinition">
            <summary>
            Describes a single transformation node, usually in a <see cref="T:SiliconStudio.Paradox.Rendering.Model"/> node hierarchy.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ModelNodeDefinition.ParentIndex">
            <summary>
            The parent node index.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ModelNodeDefinition.Transform">
            <summary>
            The local transform.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ModelNodeDefinition.Name">
            <summary>
            The name of this node.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ModelNodeDefinition.Flags">
            <summary>
            The flags of this node.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.ModelNodeTransformation.Flags">
            <summary>
            The flags of this node.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.EffectSystemExtensions">
            <summary>
            Extensions for <see cref="T:SiliconStudio.Paradox.Rendering.EffectSystem"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.EffectSystemExtensions.LoadEffect(SiliconStudio.Paradox.Rendering.EffectSystem,System.String)">
            <summary>
            Creates an effect.
            </summary>
            <param name="effectSystem">The effect system.</param>
            <param name="effectName">Name of the effect.</param>
            <returns>A new instance of an effect.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.MeshAnimationUpdater">
            <summary>
            Applies animation from a <see cref="T:SiliconStudio.Paradox.Animations.AnimationClip"/> to a <see cref="T:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.MeshAnimationUpdater.UpdateChannel">
            <summary>
            Describes how to update data from <see cref="T:SiliconStudio.Paradox.Animations.AnimationClipResult"/> to <see cref="T:SiliconStudio.Paradox.Rendering.ModelViewHierarchyUpdater"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ModelRendererState">
            <summary>
            State stored in a <see cref="!:RenderPipeline"/> by a <see cref="T:SiliconStudio.Paradox.Rendering.ModelComponentRenderer"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelRendererState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ModelRendererState"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelRendererState.AllocateModelSlot(System.String)">
            <summary>
            Gets or creates a mesh pass slot for this pass inside its <see cref="!:RenderPipeline"/>.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <returns>ModelRendererSlot.</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ProfilingKeys">
            <summary>
            Various <see cref="T:SiliconStudio.Core.Diagnostics.ProfilingKey"/> used to measure performance across some part of the effect system.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RendererExtensions">
            <summary>
            Extensions for <see cref="T:SiliconStudio.Paradox.Rendering.EntityComponentRendererBase"/>
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RendererExtensions.AppendDebugName``1(``0,System.String)">
            <summary>
            Appends a name to an existing <see cref="!:RendererBase.Name"/>.
            </summary>
            <typeparam name="T">Type of the renderer</typeparam>
            <param name="renderer">The renderer</param>
            <param name="name">Name to append to <see cref="!:RendererBase.Name"/>.</param>
            <returns>The renderer</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.EntityGroup">
            <summary>
            An entity group.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Mesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Mesh"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Mesh.#ctor(SiliconStudio.Paradox.Rendering.Mesh)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Mesh"/> class using a shallow copy constructor.
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Mesh.#ctor(SiliconStudio.Paradox.Rendering.MeshDraw,SiliconStudio.Paradox.Rendering.ParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Mesh"/> class.
            </summary>
            <param name="meshDraw">The mesh draw.</param>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentNullException">parameters</exception>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Mesh.NodeIndex">
            <summary>
            Index of the transformation node in <see cref="T:SiliconStudio.Paradox.Rendering.Model"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.Mesh.BoundingSphere">
            <summary>
            Gets the bounding sphere
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Mesh.BoundingBox">
            <summary>
            Gets or sets the bounding box encompassing this <see cref="T:SiliconStudio.Paradox.Rendering.Mesh"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Model">
            <summary>
            Collection of <see cref="T:SiliconStudio.Paradox.Rendering.Mesh"/>, each one usually being a different LOD of the same Model.
            The effect system will select the appropriate LOD depending on distance, current pass, and other effect-specific requirements.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Model.Add(SiliconStudio.Paradox.Rendering.Model)">
            <summary>
            Adds the specified model view (for collection initializers).
            </summary>
            <param name="model">The model view.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Model.Add(SiliconStudio.Paradox.Rendering.Mesh)">
            <summary>
            Adds the specified mesh (for collection initializers).
            </summary>
            <param name="mesh">The mesh.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Model.Add(SiliconStudio.Paradox.Rendering.MaterialInstance)">
            <summary>
            Adds the specified material (for collection initializers).
            </summary>
            <param name="material">The mesh.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Model.Instantiate">
            <summary>
            Create a clone with its own ParameterCollection.
            It allows reuse of a single Model for multiple ModelComponent.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Model.Children">
            <summary>
            Gets the views.
            </summary>
            <value>
            The views.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Model.Materials">
            <summary>
            Gets the materials.
            </summary>
            <value>
            The materials.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Model.Meshes">
            <summary>
            Gets the meshes.
            </summary>
            <value>
            The meshes.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Model.Hierarchy">
            <summary>
            Gets or sets the hierarchy definition, which describes nodes name, default transformation and hierarchical parent.
            </summary>
            <value>
            The hierarchy, which describes nodes name, default transformation and hierarchical parent.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Model.BoundingBox">
            <summary>
            Gets or sets the bounding box encompassing all the <see cref="P:SiliconStudio.Paradox.Rendering.Model.Meshes"/> (not including animation).
            </summary>
            <value>
            The bounding box.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Model.BoundingSphere">
            <summary>
            Gets or sets the bounding sphere encompassing all the <see cref="P:SiliconStudio.Paradox.Rendering.Model.Meshes"/> (not including animation).
            </summary>
            <value>The bounding sphere.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.EffectSystem">
            <summary>
            The effect system.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.EffectSystem.EffectUsed">
            <summary>
            Called each time a non-cached effect is requested.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.EffectSystem.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.EffectSystem"/> class.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.EffectSystem.CreateEffectCompiler(SiliconStudio.Paradox.Shaders.Compiler.TaskSchedulerSelector)">
            <summary>
            Creates an effect compiler, with either specificed <see cref="!:effectCompiler"/> or default one, wrapped in an <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.EffectCompilerCache"/>.
            </summary>
            <param name="effectCompiler">The effect compiler.</param>
            <param name="taskSchedulerSelector">The task scheduler selector.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.EffectSystem.LoadEffect(System.String,SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters)">
            <summary>
            Loads the effect.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <param name="compilerParameters">The compiler parameters.</param>
            <returns>A new instance of an effect.</returns>
            <exception cref="T:System.InvalidOperationException">Could not compile shader. Need fallback.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.EffectSystem.LoadEffect(System.String,SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters,SiliconStudio.Paradox.Rendering.ParameterCollection@)">
            <summary>
            Loads the effect.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <param name="compilerParameters">The compiler parameters.</param>
            <param name="usedParameters">The used parameters.</param>
            <returns>A new instance of an effect.</returns>
            <exception cref="T:System.InvalidOperationException">Could not compile shader. Need fallback.</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.EffectSystem.GetShaderFromParameters(System.String,SiliconStudio.Paradox.Shaders.Compiler.CompilerParameters)">
            <summary>
            Get the shader from the database based on the parameters used for its compilation.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <param name="parameters">The parameters.</param>
            <returns>The EffectBytecode if found.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.EffectSystem.FileProvider">
            <summary>
            Gets or sets the database file provider, to use for loading effects and shader sources.
            </summary>
            <value>
            The database file provider.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ModelComponentRenderer">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Rendering.EntityComponentRendererBase"/> is responsible to prepare and render meshes for a specific pass.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ModelComponentRenderer"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.ModelComponentRenderer"/> class.
            </summary>
            <param name="effectName">Name of the effect.</param>
            <exception cref="T:System.ArgumentNullException">effectName</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.GetAttached(SiliconStudio.Core.ComponentBase)">
            <summary>
            Gets the attached <see cref="T:SiliconStudio.Paradox.Rendering.ModelComponentRenderer"/> from the specified component.
            </summary>
            <param name="component">The component.</param>
            <returns>ModelComponentRenderer.</returns>
            <exception cref="T:System.ArgumentNullException">component</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.Attach(SiliconStudio.Core.ComponentBase,SiliconStudio.Paradox.Rendering.ModelComponentRenderer)">
            <summary>
            Attaches a <see cref="T:SiliconStudio.Paradox.Rendering.ModelComponentRenderer"/> to the specified component.
            </summary>
            <param name="component">The component.</param>
            <param name="renderer">The renderer.</param>
            <exception cref="T:System.ArgumentNullException">component</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.UpdateEffect(SiliconStudio.Paradox.Rendering.RenderContext,SiliconStudio.Paradox.Rendering.RenderMesh,SiliconStudio.Paradox.Rendering.ParameterCollection)">
            <summary>
            Create or update the Effect of the effect mesh.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.EffectName">
            <summary>
            Gets or sets the name of the effect.
            </summary>
            <value>The name of the effect.</value>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.InvalidOperationException">Cannot change effect name after first initialize</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.Callbacks">
            <summary>
            Gets or sets the callbacks.
            </summary>
            <value>The callbacks.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.UseCustomRenderModelList">
            <summary>
            Gets or sets a value indicating whether [use custom render model list].
            </summary>
            <value><c>true</c> if [use custom render model list]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.CustomRenderModelList">
            <summary>
            Gets the custom render model list to be used instead of the model processor list
            </summary>
            <value>The custom render model list.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.RasterizerState">
            <summary>
            Gets or sets the state of the rasterizer to overrides the default one.
            </summary>
            <value>The state of the rasterizer.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.ModelComponentRenderer.SafeDelegateList`1">
            <summary>
            A list to ensure that all delegates are not null.
            </summary>
            <typeparam name="T">A delegate</typeparam>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.SpriteComponentRenderer">
            <summary>
            This <see cref="T:SiliconStudio.Paradox.Rendering.EntityComponentRendererBase"/> is responsible to prepare and render sprites for a specific pass.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.TransformTRS">
            <summary>
            Stores transformation in a TRS format (Position, Rotation and Scale).
            </summary>
            <remarks>
            It first applies scaling, then rotation, then translation.
            Rotation is stored in a Quaternion so that animation system can provides smooth rotation interpolations and blending.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.TransformTRS.Translation">
            <summary>
            The translation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.TransformTRS.Rotation">
            <summary>
            The rotation.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.TransformTRS.Scaling">
            <summary>
            The scaling
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.UIComponentRenderer">
            <summary>
            The renderer in charge of drawing the UI.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Animations.AnimationOperation">
            <summary>
            A single animation operation (push or blend).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationOperation.NewPush(SiliconStudio.Paradox.Animations.AnimationClipEvaluator)">
            <summary>
            Creates a new animation push operation.
            </summary>
            <param name="evaluator">The evaluator.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationOperation.NewPush(SiliconStudio.Paradox.Animations.AnimationClipEvaluator,System.TimeSpan)">
            <summary>
            Creates a new animation push operation.
            </summary>
            <param name="evaluator">The evaluator.</param>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationOperation.NewPop(SiliconStudio.Paradox.Animations.AnimationClipEvaluator,System.TimeSpan)">
            <summary>
            Creates a new animation pop operation.
            </summary>
            <param name="evaluator">The evaluator.</param>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.AnimationOperation.NewBlend(SiliconStudio.Paradox.Animations.AnimationBlendOperation,System.Single)">
            <summary>
            Creates a new animation blend operation.
            </summary>
            <param name="operation">The blend operation.</param>
            <param name="blendFactor">The blend factor.</param>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioEmitterSoundController">
            <summary>
            This class is used to control a <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> associated to a <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/>.
            </summary>
            <remarks>
            <para>
            Instances of this class can not be directly created by the user, but need to queried from an <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> 
            instance using the <see cref="M:SiliconStudio.Paradox.Engine.AudioEmitterComponent.GetSoundEffectController(SiliconStudio.Paradox.Audio.SoundEffect)"/> function.
            </para>
            <para>
            An instance <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterSoundController"/> is not valid anymore if any of those situations arrives: 
            <list type="bullet">
             <item><description>The underlying <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> is disposed.</description></item>
             <item><description>The <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> is detached from its entity.</description></item>
             <item><description>The entity to which it is attached is removed from the Entity System.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEmitterSoundController.soundEffect">
            <summary>
            The underlying <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/>
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEmitterSoundController.parent">
            <summary>
            The parent <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> to which to controller is associated.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEmitterSoundController.associatedSoundEffectInstances">
            <summary>
            The instances of <see cref="F:SiliconStudio.Paradox.Audio.AudioEmitterSoundController.soundEffect"/> currently created by this controller (one for each listener).
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEmitterSoundController.#ctor(SiliconStudio.Paradox.Engine.AudioEmitterComponent,SiliconStudio.Paradox.Audio.SoundEffect)">
            <summary>
            Created a new <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterSoundController"/> instance.
            </summary>
            <param name="parent">The parent AudioEmitterComponent to which the controller is associated.</param>
            <param name="soundEffect">The underlying SoundEffect to be controlled</param>
            <remarks>A <see cref="T:SiliconStudio.Paradox.Audio.SoundEffect"/> can be associated to several controllers.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEmitterSoundController.CreateSoundInstance">
            <summary>
            Create an new instance of underlying sound, and register it in the controller's sound instance list.
            </summary>
            <returns>The new sound effect instance created</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEmitterSoundController.DestroySoundInstance(SiliconStudio.Paradox.Audio.SoundEffectInstance)">
            <summary>
            Dispose and sound instance and removes it from the controller sound instance list.
            </summary>
            <param name="soundInstance">Sound instance to destroy</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEmitterSoundController.DestroyAllSoundInstances">
            <summary>
            Dispose and removes all the controller sound instances.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEmitterSoundController.ShouldBePlayed">
            <summary>
            Indicate the <see cref="T:SiliconStudio.Paradox.Audio.AudioListenerProcessor"/> if the controller's sound instances need to be played.
            This variable is need because <see cref="M:SiliconStudio.Paradox.Audio.AudioEmitterSoundController.Play"/> is asynchronous and actually starts playing only on next system update.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioEngineInternalExceptions">
            <summary>
            The exception that is thrown when an internal error happened in the Audio System. That is an error that is not due to the user behavior.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioListenerProcessor">
            <summary>
            Processor in charge of creating and updating the <see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> data associated to the scene <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/>s.
            </summary>
            <remarks>
            The processor updates only <see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> associated to <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/>s 
            added to the <see cref="T:SiliconStudio.Paradox.Audio.AudioSystem"/> via the <see cref="M:SiliconStudio.Paradox.Audio.AudioSystem.AddListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)"/> function.
            The processor is subscribing to the <see cref="F:SiliconStudio.Paradox.Audio.AudioListenerProcessor.audioSystem"/> <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> collection events to be informed of required <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/> updates.
            When a <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> is added to the <see cref="F:SiliconStudio.Paradox.Audio.AudioListenerProcessor.audioSystem"/>, the processor set the associated <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/>.
            When a <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> is removed from the entity system, 
            the processor set the <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/> reference of the <see cref="T:SiliconStudio.Paradox.Audio.AudioSystem"/> to null 
            but do not remove the <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> from its collection.
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioListenerProcessor.audioSystem">
            <summary>
            Reference to the <see cref="T:SiliconStudio.Paradox.Audio.AudioSystem"/> of the game instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioListenerProcessor.#ctor">
            <summary>
            Create a new instance of AudioListenerProcessor.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioListenerProcessor.OnListenerCollectionChanged(System.Object,SiliconStudio.Core.Collections.TrackingCollectionChangedEventArgs)">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Audio.AudioSystem"/> listeners collection has been modified.
            Mark AudioEmitter not for update if removed from the list.
            Create the AudioEmitter data and mark it for update  if added to the list.
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioListenerProcessor.AssociatedData.ShouldBeComputed">
            <summary>
            Boolean indicating whether the AudioEmitter need to be updated for the current loop turn or not.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioListenerProcessor.AssociatedData.AudioListener">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> associated to the below <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioListenerProcessor.AssociatedData.ListenerComponent">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> associated to the entity.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioListenerProcessor.AssociatedData.TransformComponent">
            <summary>
            The <see cref="F:SiliconStudio.Paradox.Audio.AudioListenerProcessor.AssociatedData.TransformComponent"/> associated to the entity.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioEmitterProcessor">
            <summary>
            Processor in charge of updating the <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/>s.
            </summary>
            <remarks>
            <para>More precisely it updates the <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/>s and 
            then applies 3D localization to each couple <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/>-<see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/>.
            When a new emitter or a new listener is added to the system, its creates the required SoundInstances and associate them with the new emitter/listener tuples.
            </para> 
            </remarks>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.audioSystem">
            <summary>
            Reference to the audioSystem.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.#ctor">
            <summary>
            Create a new instance of the processor.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.AssociatedData">
            <summary>
            Data associated to each <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> instances of the system having an <see cref="F:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent"/> and an <see cref="F:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.AssociatedData.TransformComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.AssociatedData.AudioEmitter">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitter"/> associated to the <see cref="F:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent">
            <summary>
            The <see cref="T:SiliconStudio.Paradox.Engine.AudioEmitterComponent"/> associated to the entity
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.AssociatedData.TransformComponent">
            <summary>
            The <see cref="F:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.AssociatedData.TransformComponent"/> associated to the entity
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.AssociatedData.ListenerControllerToSoundInstance">
            <summary>
            A dictionary associating each activated listener of the AudioSystem and each sound controller of the <see cref="F:SiliconStudio.Paradox.Audio.AudioEmitterProcessor.AssociatedData.AudioEmitterComponent"/> to a valid sound effect instance.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Audio.AudioSystem">
            <summary>
            The Audio System.
            It creates an underlying instance of <see cref="P:SiliconStudio.Paradox.Audio.AudioSystem.AudioEngine"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioSystem.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Create an new instance of AudioSystem
            </summary>
            <param name="registry">The service registry in which to register the <see cref="T:SiliconStudio.Paradox.Audio.AudioSystem"/> services</param>
        </member>
        <member name="F:SiliconStudio.Paradox.Audio.AudioSystem.Listeners">
            <summary>
            A collection containing the <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/>-<see cref="T:SiliconStudio.Paradox.Audio.AudioListener"/> associations.
            The AudioListenerComponent keys are added/removed by the user by calls to <see cref="M:SiliconStudio.Paradox.Audio.AudioSystem.AddListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)"/>/<see cref="M:SiliconStudio.Paradox.Audio.AudioSystem.RemoveListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)"/>.
            The AudioListener values are created/updated by the <see cref="T:SiliconStudio.Paradox.Audio.AudioListenerProcessor"/>. 
            </summary>
            <remarks>When a AudioListenerComponent is added to the AudioSystem but not present in the Entity System, 
            a valid AudioListener can not be computed. Thus we set its value to 'null'.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioSystem.AddListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)">
            <summary>
            Add and activate a <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> to the Audio System.
            After this call sounds played via <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterSoundController"/>s will be heard by this listener.
            </summary>
            <param name="listener">The listener to add to the audio system.</param>
            <remarks>Adding a listener already added as no effects.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Audio.AudioSystem.RemoveListener(SiliconStudio.Paradox.Engine.AudioListenerComponent)">
            <summary>
            Remove a <see cref="T:SiliconStudio.Paradox.Engine.AudioListenerComponent"/> from the Audio System.
            After this call sounds played via <see cref="T:SiliconStudio.Paradox.Audio.AudioEmitterSoundController"/>s will not be heard by this listener anymore.
            </summary>
            <param name="listener">The listener to remove from the audio system.</param>
            <exception cref="T:System.ArgumentException">The provided listener was not present in the Audio System.</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Audio.AudioSystem.AudioEngine">
            <summary>
            The underlying <see cref="P:SiliconStudio.Paradox.Audio.AudioSystem.AudioEngine"/>. This instance can be used to possibly create <see cref="T:SiliconStudio.Paradox.Audio.DynamicSoundEffectInstance"/>.
            </summary>
            <value>The audio engine.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Animations.PlayingAnimation.FilterNodes(SiliconStudio.Paradox.Rendering.ModelNodeDefinition[],System.String[])">
            <summary>
            Filters the animation to the specified sub-trees given by <see cref="!:roots"/>.
            </summary>
            <param name="nodes">The node hierarchy.</param>
            <param name="roots">The node roots of sub-trees that should be active (others will be filtered out).</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.PlayingAnimation.BlendOperation">
            <summary>
            Gets or sets the blend operation.
            </summary>
            <value>
            The blend operation.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.PlayingAnimation.RepeatMode">
            <summary>
            Gets or sets the repeat mode.
            </summary>
            <value>
            The repeat mode.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.PlayingAnimation.Weight">
            <summary>
            Gets or sets the animation weight.
            </summary>
            <value>
            The weight.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.PlayingAnimation.CurrentTime">
            <summary>
            Gets or sets the current time.
            </summary>
            <value>
            The current time.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.PlayingAnimation.TimeFactor">
            <summary>
            Gets or sets the playback speed factor.
            </summary>
            <value>
            The playback speed factor.
            </value>
        </member>
        <member name="P:SiliconStudio.Paradox.Animations.PlayingAnimation.IsPlaying">
            <summary>
            Gets or sets a value indicating whether animation is playing.
            </summary>
            <value>
              <c>true</c> if animation is playing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem">
            <summary>
            A system in charge of animating the sprites 
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Creates a new instance of <see cref="T:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem"/> and register it in the services.
            </summary>
            <param name="registry"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem.Play(SiliconStudio.Paradox.Engine.SpriteComponent,System.Int32,System.Int32,SiliconStudio.Paradox.Animations.AnimationRepeatMode,System.Single,System.Boolean)">
            <summary>
            Play the sprite animation starting at index <paramref name="startIndex"/> and ending at <paramref name="endIndex"/>.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="startIndex">The first index of the animation</param>
            <param name="endIndex">The last index of the animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
            <param name="clearQueuedAnimations">Indicate if queued animation should be cleared</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem.Play(SiliconStudio.Paradox.Engine.SpriteComponent,System.Int32[],SiliconStudio.Paradox.Animations.AnimationRepeatMode,System.Single,System.Boolean)">
            <summary>
            Play the sprite animation defined by the provided sequence of indices.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="indices">The sequence of indices defining the sprite animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
            <param name="clearQueuedAnimations">Indicate if queued animation should be cleared</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem.Queue(SiliconStudio.Paradox.Engine.SpriteComponent,System.Int32,System.Int32,SiliconStudio.Paradox.Animations.AnimationRepeatMode,System.Single)">
            <summary>
            Queue the sprite animation starting at index <paramref name="startIndex"/> and ending at <paramref name="endIndex"/> at the end of the animation queue.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="startIndex">The first index of the animation</param>
            <param name="endIndex">The last index of the animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem.Queue(SiliconStudio.Paradox.Engine.SpriteComponent,System.Int32[],SiliconStudio.Paradox.Animations.AnimationRepeatMode,System.Single)">
            <summary>
            Queue the sprite animation defined by the provided sequence of indices at the end of the animation queue.
            </summary>
            <param name="spriteComponent">The sprite component containing the animation</param>
            <param name="indices">The sequence of indices defining the sprite animation</param>
            <param name="repeatMode">The value indicating how to loop the animation</param>
            <param name="framesPerSeconds">The animation speed in frames per second. 0 to use the sprite animation system default speed.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem.Pause(SiliconStudio.Paradox.Engine.SpriteComponent)">
            <summary>
            Pauses the animation of the provided sprite component.
            </summary>
            <param name="spriteComponent">the sprite component to pause</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem.Resume(SiliconStudio.Paradox.Engine.SpriteComponent)">
            <summary>
            Resumes a previously paused animation.
            </summary>
            <param name="spriteComponent">the sprite component to resume</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem.Stop(SiliconStudio.Paradox.Engine.SpriteComponent)">
            <summary>
            Stops the animation of the provided sprite component.
            </summary>
            <param name="spriteComponent">the sprite component to stop</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.Sprites.SpriteAnimationSystem.DefaultFramesPerSecond">
            <summary>
            Gets or sets the default sprite animation FPS (Default value = 30 FPS). 
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.CloneSerializer`1">
            <summary>
            Serializer for helping cloning of <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.EntityExtensions.Clone(SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Deep clone of this entity.
            </summary>
            <param name="entity">The entity to clone</param>
            <returns>The cloned entity</returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.GameSettings">
            <summary>
            Stores some default parameters for the game.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.GameSettings.EffectCompilation">
            <summary>
            Gets or sets a value indicating whether effect compile should be allowed, and if yes, should it be done locally (if possible) or remotely?
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Design.GameSettings.RecordUsedEffects">
            <summary>
            Gets or sets a value indicating whether effect compile (local or remote) should be recorded and sent to effect compile server for GameStudio notification.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Scene">
            <summary>
            A scene.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Entity">
            <summary>
            Game entity. It usually aggregates multiple EntityComponent
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Entity.Components">
            <summary>
            The components stored in this entity.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Entity.Id">
            <summary>
            The entity identifier.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.#ctor">
            <summary>
            Create a new <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> instance.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> instance having the provided name.
            </summary>
            <param name="name">The name to give to the entity</param>
            <param name="generateId">if set to <c>true</c> use <see cref="M:System.Guid.NewGuid"/> to initialize <see cref="F:SiliconStudio.Paradox.Engine.Entity.Id"/>.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.#ctor(SiliconStudio.Core.Mathematics.Vector3,System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> instance having the provided name and initial position.
            </summary>
            <param name="position">The initial position of the entity</param>
            <param name="name">The name to give to the entity</param>
            <param name="generateId">if set to <c>true</c> use <see cref="M:System.Guid.NewGuid"/> to initialize <see cref="F:SiliconStudio.Paradox.Engine.Entity.Id"/>.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.GetOrCreate``1">
            <summary>
            Gets or create a component with the specified key.
            </summary>
            <typeparam name="T">Type of the entity component</typeparam>
            <returns>A new or existing instance of {T}</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.GetOrCreate``1(SiliconStudio.Core.PropertyKey{``0})">
            <summary>
            Gets or create a component with the specified key.
            </summary>
            <typeparam name="T">Type of the entity component</typeparam>
            <param name="key">The key.</param>
            <returns>A new or existing instance of {T}</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.Add(SiliconStudio.Paradox.Engine.EntityComponent)">
            <summary>
            Adds the specified component using the <see cref="!:EntityComponent.DefaultKey"/>.
            </summary>
            <param name="component">The component.</param>
            <exception cref="T:System.ArgumentNullException">component</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.Get``1">
            <summary>
            Gets a component by the specified key.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <returns>The component or null if does no exist</returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.Get``1(SiliconStudio.Core.PropertyKey{``0})">
            <summary>
            Gets a component by the specified key.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <param name="key">The key.</param>
            <returns>The component or null if does no exist</returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.Add``1(SiliconStudio.Core.PropertyKey{``0},``0)">
            <summary>
            Sets a component with the specified key.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.Set``1(SiliconStudio.Core.PropertyKey{``0},``0)">
            <summary>
            Sets a component with the specified key.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Entity.Remove``1(SiliconStudio.Core.PropertyKey{``0})">
            <summary>
            Removes a component with the specified key.
            </summary>
            <typeparam name="T">Type of the component</typeparam>
            <param name="key">The key.</param>
            <returns><c>True</c> if the component was removed, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Entity.Transform">
            <summary>
            Gets or sets the <see cref="P:SiliconStudio.Paradox.Engine.Entity.Transform"/> associated to this entity.
            Added for convenience over usual Get/Set method.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Entity.Group">
            <summary>
            Gets or sets the group of this entity.
            </summary>
            <value>The group.</value>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Scene.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Scene"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Scene.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Core.ComponentBase"/> class.
            </summary>
            <param name="name">The name attached to this component</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Scene.Settings">
            <summary>
            Gets the settings of this scene.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.SceneChildRenderer">
            <summary>
            A renderer for a child scene defined by a <see cref="T:SiliconStudio.Paradox.Engine.ChildSceneComponent"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SceneChildRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.SceneChildRenderer"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SceneChildRenderer.#ctor(SiliconStudio.Paradox.Engine.ChildSceneComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.SceneChildRenderer"/> class.
            </summary>
            <param name="childScene">The scene child.</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SceneChildRenderer.ChildScene">
            <summary>
            Gets or sets the scene.
            </summary>
            <value>The scene.</value>
            <userdoc>The entity of the scene containing the child scene to render.</userdoc>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SceneChildRenderer.GraphicsCompositorOverride">
            <summary>
            Gets or sets the graphics compositor override, allowing to override the composition of the scene.
            </summary>
            <value>The graphics compositor override.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.SceneSystem">
            <summary>
            The scene system handles the scenes of a game.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SceneSystem.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Games.GameSystemBase"/> class.
            </summary>
            <param name="registry">The registry.</param>
            <remarks>The GameSystem is expecting the following services to be registered: <see cref="T:SiliconStudio.Paradox.Games.IGame"/> and <see cref="T:SiliconStudio.Core.Serialization.Assets.IAssetManager"/>.</remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SceneSystem.MainRenderFrame">
            <summary>
            The main render frame of the scene system
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SceneSystem.SceneInstance">
            <summary>
            Gets or sets the root scene.
            </summary>
            <value>The scene.</value>
            <exception cref="T:System.ArgumentNullException">Scene cannot be null</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.SceneSystem.InitialSceneUrl">
            <summary>
            URL of the initial scene that should be used upon loading
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Game">
            <summary>
            Main Game class system.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Game.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Game"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Game.LoadContent">
            <summary>
            Loads the content.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.GraphicsDeviceManager">
            <summary>
            Gets the graphics device manager.
            </summary>
            <value>The graphics device manager.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.Script">
            <summary>
            Gets the script system.
            </summary>
            <value>The script.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.Input">
            <summary>
            Gets the input manager.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.SceneSystem">
            <summary>
            Gets the scene system.
            </summary>
            <value>The scene system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.EffectSystem">
            <summary>
            Gets the effect system.
            </summary>
            <value>The effect system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.Audio">
            <summary>
            Gets the audio system.
            </summary>
            <value>The audio.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.UI">
            <summary>
            Gets the UI system.
            </summary>
            <value>The UI.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.SpriteAnimation">
            <summary>
            Gets the sprite animation system.
            </summary>
            <value>The sprite animation system.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.Font">
            <summary>
            Gets the font system.
            </summary>
            <value>The font system.</value>
            <exception cref="T:System.InvalidOperationException">The font system is not initialized yet</exception>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.ConsoleLogMode">
            <summary>
            Gets or sets the console log mode. See remarks.
            </summary>
            <value>The console log mode.</value>
            <remarks>
            Defines how the console will be displayed when running the game. By default, on Windows, It will open only on debug
            if there are any messages logged.
            </remarks>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.ConsoleLogLevel">
            <summary>
            Gets or sets the default console log level.
            </summary>
            <value>The console log level.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Game.AutoLoadDefaultSettings">
            <summary>
            Automatically initializes game settings like default scene, resolution, graphics profile.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Fonts.GameFontSystem">
            <summary>
            The game system in charge of calling <see cref="P:SiliconStudio.Paradox.Rendering.Fonts.GameFontSystem.FontSystem"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.Sprites.SpriteProcessor">
            <summary>
            The processor in charge of updating and drawing the entities having sprite components.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.Sprites.SpriteProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.Sprites.SpriteProcessor"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Internals.LambdaReadOnlyCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Internals.LambdaReadOnlyCollection`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Internals.LambdaReadOnlyCollection`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:SiliconStudio.Paradox.Internals.LambdaReadOnlyCollection`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Network.RouterClient.DefaultPort">
            <summary>
            The default port to connect to router server.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Network.RouterClient.DefaultListenPort">
            <summary>
            The default port to listen for connection from router.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Network.RouterClient.RegisterService">
            <summary>
            Starts a service.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Network.RouterClient.RequestServer(System.String)">
            <summary>
            Requests a specific server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Network.RouterClient.InitiateConnectionToRouter">
            <summary>
            Initiates a connection to the router.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Network.RouterClient.ConnectionMode">
            <summary>
            Gets a value indicating whether this platform initiates connections by listening on a port and wait for router (true) or connecting to router (false).
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Network.RouterClient.RouterConnectionMode.Connect">
            <summary>
            Tries to connect to the router.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Network.RouterClient.RouterConnectionMode.Listen">
            <summary>
            Tries to listen from a router connection.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Network.RouterClient.RouterConnectionMode.ConnectThenListen">
            <summary>
            First, tries to connect, and if not possible, listen for a router connection.
            This is useful for platform where we can't be sure (no way to determine if emulator and/or run in desktop or remotely, such as UWP).
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Shaders.Compiler.RemoteEffectCompilerClient">
            <summary>
            Used internally by <see cref="T:SiliconStudio.Paradox.Shaders.Compiler.RemoteEffectCompiler"/> to compile shaders remotely,
            and <see cref="M:SiliconStudio.Paradox.Rendering.EffectSystem.CreateEffectCompiler(SiliconStudio.Paradox.Shaders.Compiler.TaskSchedulerSelector)"/> to record effect requested.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.ScriptSystem">
            <summary>
            The script system handles scripts scheduling in a game.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Processors.ScriptSystem.registeredScripts">
            <summary>
            Contains all currently executed scripts
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ScriptSystem.#ctor(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Games.GameSystemBase"/> class.
            </summary>
            <param name="registry">The registry.</param>
            <remarks>The GameSystem is expecting the following services to be registered: <see cref="T:SiliconStudio.Paradox.Games.IGame"/> and <see cref="T:SiliconStudio.Core.Serialization.Assets.AssetManager"/>.</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ScriptSystem.NextFrame">
            <summary>
            Allows to wait for next frame.
            </summary>
            <returns>ChannelMicroThreadAwaiter&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ScriptSystem.AddTask(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds the specified micro thread function.
            </summary>
            <param name="microThreadFunction">The micro thread function.</param>
            <returns>MicroThread.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ScriptSystem.WhenAll(SiliconStudio.Core.MicroThreading.MicroThread[])">
            <summary>
            Waits all micro thread finished their task completion.
            </summary>
            <param name="microThreads">The micro threads.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ScriptSystem.Add(SiliconStudio.Paradox.Engine.Script)">
            <summary>
            Add the provided script to the script system.
            </summary>
            <param name="script">The script to add</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ScriptSystem.Remove(SiliconStudio.Paradox.Engine.Script)">
            <summary>
            Remove the provided script from the script system.
            </summary>
            <param name="script">The script to remove</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.ScriptSystem.LiveReload(SiliconStudio.Paradox.Engine.Script,SiliconStudio.Paradox.Engine.Script)">
            <summary>
            Called by a live scripting debugger to notify the ScriptSystem about reloaded scripts.
            </summary>
            <param name="oldScript">The old script</param>
            <param name="newScript">The new script</param>
        </member>
        <member name="P:SiliconStudio.Paradox.Engine.Processors.ScriptSystem.Scheduler">
            <summary>
            Gets the scheduler.
            </summary>
            <value>The scheduler.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.CameraKeys">
            <summary>
            Keys used by transformations.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.CameraKeys.FocusDistance">
            <summary>
            Camera focus distance
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.GraphicsResizeContext">
            <summary>
            Keep track of actions to execute when GraphicsDevice is resized.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.GraphicsResizeContext.SetupResize(System.Action{SiliconStudio.Paradox.Rendering.GraphicsResizeContext})">
            <summary>
            Execute the resize action and register it for later reexecution.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.GraphicsResizeContext.StartResize">
            <summary>
            First step of the resize process: it sets to null all the resources assigned to a group through SetWithResize.
            Later, EndResize() should be called to execute second step of this system.
            This two steps system should help avoiding unecessary memory peaks and reduce GPU memory fragmentation.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.GraphicsResizeContext.EndResize">
            <summary>
            Recreate all the resizable resources.
            It reexecute all the resize handlers registered through SetupResize to recreate necessary resources.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.GraphicsResizeExtensions.SetWithResize``1(SiliconStudio.Paradox.Rendering.ParameterCollection,SiliconStudio.Paradox.Rendering.GraphicsResizeContext,SiliconStudio.Paradox.Rendering.ParameterKey{``0},``0)">
            <summary>
            Sets a resizable resource for the specified key.
            </summary>
            <typeparam name="T">Type must be a <see cref="T:SiliconStudio.Core.IReferencable"/></typeparam>
            <param name="parameterCollection">The parameter collection.</param>
            <param name="context">The context.</param>
            <param name="key">The key.</param>
            <param name="resourceValue">The resource value.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderMesh">
            <summary>
            An effect mesh.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderMesh.RenderModel">
            <summary>
            The model instance associated to this effect mesh.
            </summary>
            <value>The model instance.</value>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderMesh.Mesh">
            <summary>
            The mesh associated with this instance.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderMesh.RasterizerState">
            <summary>
            A Rasterizer state setup before <see cref="M:SiliconStudio.Paradox.Rendering.RenderMesh.Draw(SiliconStudio.Paradox.Rendering.RenderContext)"/> when rendering this mesh.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderMesh.#ctor(SiliconStudio.Paradox.Rendering.RenderModel,SiliconStudio.Paradox.Rendering.Mesh)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.RenderMesh"/> class.
            </summary>
            <param name="renderModel">The render model.</param>
            <param name="mesh">The mesh data.</param>
            <exception cref="T:System.ArgumentNullException">mesh</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderMesh.Draw(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Draw this effect mesh.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderMesh.Enabled">
            <summary>
            Enable or disable this particular effect mesh.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderMesh.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderContext">
            <summary>
            Rendering context.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderContext.#ctor(SiliconStudio.Core.IServiceRegistry,SiliconStudio.Paradox.Graphics.GraphicsResourceAllocator)">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Rendering.RenderContext"/> class.
            </summary>
            <param name="services">The services.</param>
            <param name="allocator">The allocator.</param>
            <exception cref="T:System.ArgumentNullException">services</exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderContext.GetSharedEffect``1">
            <summary>
            Gets or creates a shared effect.
            </summary>
            <typeparam name="T">Type of the shared effect (mush have a constructor taking a <see cref="T:SiliconStudio.Paradox.Rendering.RenderContext"/></typeparam>
            <returns>A singleton instance of <typeparamref name="T"/></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.RenderContext.GetShared(SiliconStudio.Core.IServiceRegistry)">
            <summary>
            Gets a global shared context.
            </summary>
            <param name="services">The services.</param>
            <returns>RenderContext.</returns>
        </member>
        <member name="E:SiliconStudio.Paradox.Rendering.RenderContext.RendererInitialized">
            <summary>
            Occurs when a renderer is initialized.
            </summary>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderContext.Effects">
            <summary>
            Gets the content manager.
            </summary>
            <value>The content manager.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderContext.GraphicsDevice">
            <summary>
            Gets or sets the graphics device.
            </summary>
            <value>The graphics device.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderContext.Services">
            <summary>
            Gets the services registry.
            </summary>
            <value>The services registry.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderContext.Parameters">
            <summary>
            Gets the parameters shared with all <see cref="T:SiliconStudio.Paradox.Rendering.Images.ImageEffect"/> instance.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderContext.Time">
            <summary>
            Gets the time.
            </summary>
            <value>The time.</value>
        </member>
        <member name="P:SiliconStudio.Paradox.Rendering.RenderContext.Allocator">
            <summary>
            Gets the <see cref="T:SiliconStudio.Paradox.Graphics.GraphicsResource"/> allocator.
            </summary>
            <value>The allocator.</value>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Processors.TransformProcessor">
            <summary>
            Updates <see cref="F:SiliconStudio.Paradox.Engine.TransformComponent.WorldMatrix"/> of entities.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Processors.TransformProcessor.transformationRoots">
            <summary>
            List of <see cref="T:SiliconStudio.Paradox.Engine.TransformComponent"/> of every <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> in <see cref="!:EntityManager.RootEntities"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Processors.TransformProcessor.notSpecialRootComponents">
            <summary>
            The list of the components that are not special roots.
            </summary>
            <remarks>This field is instantiated here to avoid reallocation at each frames</remarks>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.TransformProcessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SiliconStudio.Paradox.Engine.Processors.TransformProcessor"/> class.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.TransformProcessor.GenerateAssociatedData(SiliconStudio.Paradox.Engine.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.TransformProcessor.OnSystemAdd">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.TransformProcessor.OnSystemRemove">
            <inheritdoc/>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.TransformProcessor.Draw(SiliconStudio.Paradox.Rendering.RenderContext)">
            <summary>
            Updates all the <see cref="F:SiliconStudio.Paradox.Engine.TransformComponent.WorldMatrix"/>.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Processors.TransformProcessor.CreateMatrixR(SiliconStudio.Core.Mathematics.Vector3@,SiliconStudio.Core.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that contains the X, Y and Z rotation.
            </summary>
            <param name="rotation">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.IndexExtensions.GenerateIndexBuffer(SiliconStudio.Paradox.Rendering.MeshDraw,SiliconStudio.Paradox.Graphics.VertexDeclaration)">
            <summary>
            Generates an index buffer for this mesh data.
            </summary>
            <param name="meshData">The mesh data.</param>
            <param name="declaration">The final vertex declaration</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.IndexExtensions.CompactIndexBuffer(SiliconStudio.Paradox.Rendering.MeshDraw)">
            <summary>
            Compacts the index buffer from 32 bits to 16 bits per index, if possible.
            </summary>
            <param name="meshData">The mesh data.</param>
            <returns>Returns true if index buffer was actually compacted.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.IndexExtensions.GenerateIndexBufferAEN(SiliconStudio.Paradox.Rendering.MeshDraw)">
            <summary>
            Generates the index buffer with dominant edge and vertex information.
            Each triangle gets its indices expanded to 12 control points, with 0 to 2 being original triangle,
            3 to 8 being dominant edges and 9 to 11 being dominant vertices.
            </summary>
            <param name="meshData">The mesh data.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.IndexExtensions.GenerateIndexMapping(SiliconStudio.Paradox.Graphics.VertexBufferBinding,System.String[])">
            <summary>
            Generates an index mapping with the specified vertex elements.
            If no vertex elements are specified, use the whole vertex.
            </summary>
            <param name="vertexBufferBinding">The vertex buffer binding.</param>
            <param name="usages">The vertex element usages to consider.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.IndexExtensions.ReverseWindingOrder(SiliconStudio.Paradox.Rendering.MeshDraw)">
            <summary>
            Reverses the winding order of an index buffer. Assumes it is stored in <see cref="F:SiliconStudio.Paradox.Graphics.PrimitiveType.TriangleList"/> format.
            Works on both 32 and 16 bit indices.
            </summary>
            <param name="vertexBufferBinding">The vertex buffer binding.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.TNBExtensions.GenerateTangentBinormal(SiliconStudio.Paradox.Rendering.MeshDraw)">
            <summary>
            Generates the tangents and binormals for this mesh data.
            Tangents and bitangents will be encoded as float4:
            float3 for tangent and an additional float for handedness (1 or -1),
            so that bitangent can be reconstructed.
            More info at http://www.terathon.com/code/tangent.html
            </summary>
            <param name="meshData">The mesh data.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Extensions.VertexExtensions.GetVertexBufferData``1(SiliconStudio.Paradox.Rendering.MeshDraw,System.String[])">
            <summary>
            Extracts a selection of vertices from a vertex buffer stored in this mesh data.
            </summary>
            <param name="meshData">The mesh data.</param>
            <param name="vertexElementToExtract">The declaration to extract (e.g. "POSITION0"...etc.) </param>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Network.SimpleSocket">
            <summary>
            Manages socket connection+ack and low-level communication.
            High-level communication is supposed to happen in <see cref="T:SiliconStudio.Paradox.Engine.Network.SocketMessageLayer"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Network.SimpleSocket.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.EntityCloner">
            <summary>
            Provides method for deep cloning of en <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.EntityCloner.Clone(SiliconStudio.Paradox.Engine.Entity)">
            <summary>
            Clones the specified entity.
            <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>, children <see cref="T:SiliconStudio.Paradox.Engine.Entity"/> and their <see cref="T:SiliconStudio.Paradox.Engine.EntityComponent"/> will be cloned.
            Other assets will be shared.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.Design.EntityCloner.Clone``1(System.Collections.Generic.HashSet{System.Object},SiliconStudio.Paradox.Engine.Design.EntityCloner.TryGetValueFunction{System.Object,System.Object},``0)">
            <summary>
            Clones the specified object, taking special care of <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>, <see cref="T:SiliconStudio.Paradox.Engine.EntityComponent"/> and external assets.
            User can optionally provides list of cloned objects (list of data reference objects that should be cloned)
            and mapped objects (list of data reference objects that should be ducplicated using the given instance).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="clonedObjects">The cloned objects.</param>
            <param name="mappedObjects">The mapped objects.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.Design.EntityCloner.CloneContext">
            <summary>
            Helper class for cloning <see cref="T:SiliconStudio.Paradox.Engine.Entity"/>.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EntityCloner.CloneContext.ClonedObjects">
            <summary>
            Lists objects that should be cloned.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EntityCloner.CloneContext.SharedObjects">
            <summary>
            Stores objects that should be reused in the new cloned instance.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Engine.Design.EntityCloner.CloneContext.EntitySerializerSelector">
            <summary>
            Special serializer that goes through <see cref="F:SiliconStudio.Paradox.Engine.Design.EntityCloner.CloneContext.EntitySerializerSelector"/> and <see cref="T:SiliconStudio.Paradox.Engine.Design.CloneEntityComponentSerializer`1"/>.
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.RenderTargetKeys">
            <summary>
            Keys used for render target settings.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderTargetKeys.DepthStencil">
            <summary>
            The depth stencil buffer key.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderTargetKeys.DepthStencilSource">
            <summary>
            The depth stencil buffer key used as an input shader resource.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderTargetKeys.RenderTarget">
            <summary>
            The render target key.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderTargetKeys.StreamTarget">
            <summary>
            The render target key.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.RenderTargetKeys.RequireDepthStencilShaderResource">
            <summary>
            Used by <see cref="!:RenderTargetPlugin"/> to notify that the plugin requires support for depth stencil as shader resource
            </summary>
        </member>
        <member name="T:SiliconStudio.Paradox.Rendering.TransformationKeys">
            <summary>
            Keys used by transformations.
            </summary>
        </member>
        <member name="F:SiliconStudio.Paradox.Rendering.TransformationKeys.ProjectionFrustumPlanes">
            <summary>
            Projection frustum planes.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.TransformationKeys.ExtractProjScreenRay(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Vector2@)">
            <summary>
            Extracts the projected screem 2d vector from the projection matrix.
            </summary>
            <param name="projection">The projection.</param>
            <param name="projScreenRay">The proj screen ray.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.TransformationKeys.ViewToEye(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Vector4@)">
            <summary>
            Invert the view matrix and build an eye vector.
            </summary>
            <param name="view">The view matrix.</param>
            <param name="eye">The eye vector.</param>
        </member>
        <member name="M:SiliconStudio.Paradox.Rendering.TransformationKeys.ExtractFrustumPlanes(SiliconStudio.Core.Mathematics.Matrix@,SiliconStudio.Core.Mathematics.Plane[]@)">
            <summary>
            Extracts the frustum planes from given matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="planes">The planes.</param>
        </member>
        <member name="T:SiliconStudio.Paradox.Engine.SyncScript">
            <summary>
            A script whose <see cref="M:SiliconStudio.Paradox.Engine.SyncScript.Update"/> will be called every frame.
            </summary>
        </member>
        <member name="M:SiliconStudio.Paradox.Engine.SyncScript.Update">
            <summary>
            Called every frame.
            </summary>
        </member>
    </members>
</doc>
